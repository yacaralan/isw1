

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (22 May 2023 21:15:58) as /home/clinux01/Escritorio/cuis/CuisUniversity-5799.image!


----End fileIn of /home/clinux01/Escritorio/2023-1c/Portfolio-Ejercicio.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferTest category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:23:42'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferTest methodsFor: 'no messages' stamp: 'AYac 5/22/2023 21:25:57'!
test01TransferBetweenTwoAccountsAffectsTheirBalance! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AYac 5/22/2023 21:26:24'!
test01TransferBetweenTwoAccountsAffectsTransfererBalance! !

!methodRemoval: TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AYac 5/22/2023 21:26:27'!
test01TransferBetweenTwoAccountsAffectsTheirBalance!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AYac 5/22/2023 21:26:42' prior: 50620605!
test01TransferBetweenTwoAccountsAffectsTransfererBalance

	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AYac 5/22/2023 21:28:50' prior: 50620616!
test01TransferBetweenTwoAccountsAffectsTransfererBalance

	| transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AYac 5/22/2023 21:30:08' prior: 50620622!
test01TransferBetweenTwoAccountsAffectsTransfererBalance

	| transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	
	transfererAccount transfer: 100 to: transfereeAccount.
	
	self assert: transfererAccount balance equals: -100! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTransfererBalance stamp: 'AYac 5/22/2023 21:30:11'!
ERROR!
!ReceptiveAccount methodsFor: 'transfer' stamp: 'AYac 5/22/2023 21:30:30'!
transfer: aRenameMe1 to: transfereeAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transfer' stamp: 'AYac 5/22/2023 21:31:21' prior: 50620648!
transfer: anAmmountToTransfer to: anAccount
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transfer' stamp: 'AYac 5/22/2023 21:31:51' prior: 50620654!
transfer: anAmmountToTransfer to: anAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'transfer' stamp: 'AYac 5/22/2023 21:35:17' prior: 50620660!
transfer: anAmmountToTransfer to: anAccount 
	
	Withdraw ! !
!ReceptiveAccount methodsFor: 'transfer' stamp: 'AYac 5/22/2023 21:35:51' prior: 50620666!
transfer: anAmmountToTransfer to: anAccount 
	
	Withdraw register: 100 on: self! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AYac 5/22/2023 21:35:55'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTransfererBalance stamp: 'AYac 5/22/2023 21:35:59'!
PASSED!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:40:41'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AYac 5/22/2023 21:40:34'!
test01TransferBetweenTwoAccountsAffectsTheirBalance

	| transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: transfererAccount balance equals: -100.
	self assert: transfereeAccount balance equals: 100! !

!methodRemoval: TransferTest #test01TransferBetweenTwoAccountsAffectsTransfererBalance stamp: 'AYac 5/22/2023 21:40:46'!
test01TransferBetweenTwoAccountsAffectsTransfererBalance

	| transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	
	transfererAccount transfer: 100 to: transfereeAccount.
	
	self assert: transfererAccount balance equals: -100!

!methodRemoval: ReceptiveAccount #transfer:to: stamp: 'AYac 5/22/2023 21:40:58'!
transfer: anAmmountToTransfer to: anAccount 
	
	Withdraw register: 100 on: self!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AYac 5/22/2023 21:41:03'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AYac 5/22/2023 21:41:03'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'AYac 5/22/2023 21:41:20'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'AYac 5/22/2023 21:42:21' prior: 50620754!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	^self new initializeRegister: anAmount from: aTransfererAccount to: aTransfereeAccount ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AYac 5/22/2023 21:42:24'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:42:41'!
Object subclass: #Transfer
	instanceVariableNames: 'amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:42:41'!
Object subclass: #Transfer
	instanceVariableNames: 'amount transfererAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:42:41'!
Object subclass: #Transfer
	instanceVariableNames: 'amount transfererAccount transfereeAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transfer methodsFor: 'transfer' stamp: 'AYac 5/22/2023 21:42:41'!
initializeRegister: anAmount from: aTransfererAccount to: aTransfereeAccount 
	self shouldBeImplemented.
	amount := anAmount.
	transfererAccount := aTransfererAccount.
	transfereeAccount := aTransfereeAccount.! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'amount transfererAccount transfereeAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:44:47'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'amount transfererAccount transfereeAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:44:53'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Transfer #initializeRegister:from:to: stamp: 'AYac 5/22/2023 21:44:58'!
initializeRegister: anAmount from: aTransfererAccount to: aTransfereeAccount 
	self shouldBeImplemented.
	amount := anAmount.
	transfererAccount := aTransfererAccount.
	transfereeAccount := aTransfereeAccount.!
!Transfer class methodsFor: 'instance creation' stamp: 'AYac 5/22/2023 21:45:45' prior: 50620766!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	Deposit register: anAmount on: aTransfereeAccount.
	Withdraw register: 100 on: aTransfererAccount ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AYac 5/22/2023 21:45:47'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'AYac 5/22/2023 21:46:05' prior: 50620847!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	Deposit register: anAmount on: aTransfereeAccount.
	Withdraw register: anAmount on: aTransfererAccount ! !

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AYac 5/22/2023 21:46:14'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferTest methodsFor: 'tests' stamp: 'AYac 5/22/2023 21:58:35'!
test02TransferBetweenTwoAccountsIsRegisteredInBoth

	| transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: transfererAccount balance equals: -100.
	self assert: transfereeAccount balance equals: 100! !

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AYac 5/22/2023 21:58:40'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AYac 5/22/2023 21:58:40'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AYac 5/22/2023 21:58:40'!
PASSED!

----SNAPSHOT----(22 May 2023 21:58:50) CuisUniversity-5799.image priorSource: 9222790!

----End fileIn of /home/alanyacar/Desktop/isw1/isw1/07-Portfolio2/Portfolio-Ejercicio.st----!
!TransferTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 17:12:48' prior: 50621876!
test02TransferBetweenTwoAccountsIsRegisteredInBoth

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: transfererAccount balance equals: -100.
	self assert: transfereeAccount balance equals: 100! !
!TransferTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 17:15:24' prior: 50622274!
test02TransferBetweenTwoAccountsIsRegisteredInBoth

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: (transfererAccount hasRegistered: aTransfer withdraw).
	self assert: (transfereeAccount hasRegistered: aTransfer deposit).! !

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:15:29'!
ERROR!
!Transfer class methodsFor: 'operations' stamp: 'AlYac 5/30/2023 17:15:51'!
withdraw
	self shouldBeImplemented.! !

!classDefinition: 'Transfer class' category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:17:08'!
Transfer class
	instanceVariableNames: 'withdraw'!
!Transfer class methodsFor: 'operations' stamp: 'AlYac 5/30/2023 17:17:06' prior: 50622309!
withdraw
	^withdraw.! !

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:17:12'!
FAILURE!

!classDefinition: 'Transfer class' category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:17:52'!
Transfer class
	instanceVariableNames: 'withdraw deposit'!
!Transfer class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:17:50' prior: 50622262!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	deposit := Deposit register: anAmount on: aTransfereeAccount.
	withdraw := Withdraw register: anAmount on: aTransfererAccount ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:17:56'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:17:56'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:17:56'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:18:14'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:18:14'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:18:14'!
ERROR!
!Transfer class methodsFor: 'operations' stamp: 'AlYac 5/30/2023 17:18:18'!
deposit
	self shouldBeImplemented.
	^deposit! !
!Transfer class methodsFor: 'operations' stamp: 'AlYac 5/30/2023 17:18:25' prior: 50622363!
deposit
	
	^deposit! !

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:18:28'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:18:32'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:18:32'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 17:23:40'!
test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: (transfererAccount hasRegistered: aTransfer withdraw).
	self assert: (transfereeAccount hasRegistered: aTransfer deposit).! !

!methodRemoval: TransferTest #test02TransferBetweenTwoAccountsIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:23:40'!
test02TransferBetweenTwoAccountsIsRegisteredInBoth

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: (transfererAccount hasRegistered: aTransfer withdraw).
	self assert: (transfereeAccount hasRegistered: aTransfer deposit).!
!TransferTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 17:26:43'!
test03DepositOfATransferKnowsItsTransfer

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.

	self assert: aTransfer deposit transfer equals: aTransfer .! !

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:26:45'!
ERROR!

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:28:53'!
AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transfer class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:27:23' prior: 50622331!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	deposit := TransferDeposit register: anAmount on: aTransfereeAccount.
	withdraw := Withdraw register: anAmount on: aTransfererAccount ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:29:04'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:29:04'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:29:04'!
ERROR!
!TransferDeposit methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 17:29:55'!
transfer

	^myTransfer ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 17:30:05'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 17:30:09'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:30:11'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:30:11'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:30:11'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:30:17'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:30:31'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:30:31'!
ERROR!
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:30:39'!
for: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger ! !
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:31:07' prior: 50622660!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:31:47'!
AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferDeposit methodsFor: 'nil' stamp: 'AlYac 5/30/2023 17:31:44'!
initializeFor: aValue

	value := aValue ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:32:24'!
initializeFor: aValue fromTransfer: aTransfer

	value := aValue 
! !

!methodRemoval: TransferDeposit #initializeFor: stamp: 'AlYac 5/30/2023 17:32:39'!
initializeFor: aValue

	value := aValue !
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:33:30'!
for: aValue fromTransfer: aTransfer

	^ self new initializeFor: aValue fromTransfer: aTransfer ! !

!methodRemoval: TransferDeposit class #for: stamp: 'AlYac 5/30/2023 17:33:34'!
for: aValue

	^ self new initializeFor: aValue !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:34:05' prior: 50622687!
initializeFor: aValue fromTransfer: aTransfer

	value := aValue.
	myTransfer := aTransfer 
! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:37:33' prior: 50622707!
initializeFor: aValue fromTransfer: aTransfer

	| a |
	TransferDeposit register: aValue on: a.
	myTransfer := aTransfer 
! !
!Transfer class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:42:50' prior: 50622442!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	self new register: anAmount from: aTransfererAccount to: aTransfereeAccount.
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:42:58' prior: 50622721!
register: anAmount from: aTransfererAccount to: aTransfereeAccount 

	^self new register: anAmount from: aTransfererAccount to: aTransfereeAccount.
	! !

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:43:52'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:43:53'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transfer methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 17:43:50'!
register: anAmount from: aTransfererAccount to: aTransfereeAccount

	deposit := TransferDeposit register: anAmount on: aTransfereeAccount.
	withdraw := Withdraw register: anAmount on: aTransfererAccount ! !

Transfer class
	instanceVariableNames: ''!

!classDefinition: 'Transfer class' category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:44:05'!
Transfer class
	instanceVariableNames: ''!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:45:19' prior: 50622752!
register: anAmount from: aTransfererAccount to: aTransfereeAccount

	deposit := TransferDeposit register: anAmount on: aTransfereeAccount fromTransfer: self.
	withdraw := Withdraw register: anAmount on: aTransfererAccount ! !

Object subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:45:33'!
Object subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:45:46'!
Object subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:46:13'!
for: aValue on: anAccount fromTransfer: aTransfer

	^ self new initializeFor: aValue fromTransfer: aTransfer ! !

!methodRemoval: TransferDeposit class #for:fromTransfer: stamp: 'AlYac 5/30/2023 17:46:15'!
for: aValue fromTransfer: aTransfer

	^ self new initializeFor: aValue fromTransfer: aTransfer !
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:46:30' prior: 50622804!
for: aValue on: anAccount fromTransfer: aTransfer

	^ self new initializeFor: aValue on: anAccount fromTransfer: aTransfer ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:46:58'!
initializeFor: aValue on: anAccount fromTransfer: aTransfer

	
	TransferDeposit register: aValue on: anAccount.
	myTransfer := aTransfer 
! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:48:05' prior: 50622824!
initializeFor: aValue on: anAccount fromTransfer: aTransfer

	
	TransferDeposit registerOn: anAccount.
	myTransfer := aTransfer 
! !

!methodRemoval: TransferDeposit #initializeFor:fromTransfer: stamp: 'AlYac 5/30/2023 17:48:54'!
initializeFor: aValue fromTransfer: aTransfer

	| a |
	TransferDeposit register: aValue on: a.
	myTransfer := aTransfer 
!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:50:29'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:50:29'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:50:29'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:50:34'!
ERROR!
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:51:09'!
register: aValue on: anAccount fromTransfer: aTransfer

	^ self new initializeFor: aValue on: anAccount fromTransfer: aTransfer ! !

!methodRemoval: TransferDeposit class #for:on:fromTransfer: stamp: 'AlYac 5/30/2023 17:51:09'!
for: aValue on: anAccount fromTransfer: aTransfer

	^ self new initializeFor: aValue on: anAccount fromTransfer: aTransfer !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:51:12'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:51:12'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:51:12'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:51:14'!
ERROR!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:51:59'!
registerOn: anAccount


! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:52:04'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:52:04'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:52:04'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:52:06'!
ERROR!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:52:37' prior: 50622890!
registerOn: anAccount


! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:52:42'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:52:42'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:52:42'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:52:43'!
ERROR!

!methodRemoval: TransferDeposit #registerOn: stamp: 'AlYac 5/30/2023 17:53:23'!
registerOn: anAccount


!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:54:27' prior: 50622768!
register: anAmount from: aTransfererAccount to: aTransfereeAccount

	deposit := TransferDeposit registerOn: aTransfereeAccount fromTransfer: self.
	withdraw := Withdraw register: anAmount on: aTransfererAccount ! !

!classDefinition: #Transfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 17:54:44'!
Object subclass: #Transfer
	instanceVariableNames: 'deposit withdraw value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:54:41' prior: 50622933!
register: anAmount from: aTransfererAccount to: aTransfereeAccount

	deposit := TransferDeposit registerOn: aTransfereeAccount fromTransfer: self.
	withdraw := Withdraw register: anAmount on: aTransfererAccount.
	value := anAmount ! !
!TransferDeposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 17:55:29'!
registerOn: anAccount fromTransfer: aTransfer

	^ self new initializeOn: anAccount fromTransfer: aTransfer ! !

!methodRemoval: TransferDeposit class #register:on:fromTransfer: stamp: 'AlYac 5/30/2023 17:56:16'!
register: aValue on: anAccount fromTransfer: aTransfer

	^ self new initializeFor: aValue on: anAccount fromTransfer: aTransfer !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:56:29'!
initializeOn: anAccount fromTransfer: aTransfer

	
	TransferDeposit registerOn: anAccount.
	myTransfer := aTransfer 
! !

!methodRemoval: TransferDeposit #initializeFor:on:fromTransfer: stamp: 'AlYac 5/30/2023 17:56:35'!
initializeFor: aValue on: anAccount fromTransfer: aTransfer

	
	TransferDeposit registerOn: anAccount.
	myTransfer := aTransfer 
!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 17:58:10' prior: 50622976!
initializeOn: anAccount fromTransfer: aTransfer

	myTransfer := aTransfer.
	anAccount register: self
! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:58:16'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:58:16'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:58:16'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:58:19'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:58:25'!
ERROR!
!Transfer methodsFor: 'operations' stamp: 'AlYac 5/30/2023 17:58:59'!
deposit

	^deposit ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 17:59:00'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 17:59:00'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 17:59:00'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:00:25'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:00:25'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:00:25'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:00:26'!
ERROR!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:00:32'!
affectBalance: currentBalance 
	self shouldBeImplemented.! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:00:52' prior: 50623047!
affectBalance: currentBalance 
	^myTransfer value! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:00:59'!
FAILURE!
!Transfer methodsFor: 'operations' stamp: 'AlYac 5/30/2023 18:01:27' overrides: 16902254!
value

	^value! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:01:29'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:01:29'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:01:29'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:01:29'!
ERROR!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:01:37'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:01:38'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:01:38'!
ERROR!
!Transfer methodsFor: 'operations' stamp: 'AlYac 5/30/2023 18:02:37'!
withdraw

	^withdraw ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:02:38'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:02:38'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:02:38'!
PASSED!
!TransferTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 18:02:52'!
test04WithdrawOfATransferKnowsItsTransfer

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.

	self assert: aTransfer deposit transfer equals: aTransfer .! !
!TransferTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 18:03:26' prior: 50623109!
test04WithdrawOfATransferKnowsItsTransfer

	| transfereeAccount transfererAccount aTransfer |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.

	self assert: aTransfer withdraw transfer equals: aTransfer .! !

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:03:27'!
ERROR!

Object subclass: #TransferWithdraw
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 18:03:39'!
Object subclass: #TransferWithdraw
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Transfer class #withdraw stamp: 'AlYac 5/30/2023 18:04:21'!
withdraw
	^withdraw.!

!methodRemoval: Transfer class #deposit stamp: 'AlYac 5/30/2023 18:04:22'!
deposit
	
	^deposit!
!Transfer methodsFor: 'operations' stamp: 'AlYac 5/30/2023 18:04:32' prior: 50622951!
register: anAmount from: aTransfererAccount to: aTransfereeAccount

	deposit := TransferDeposit registerOn: aTransfereeAccount fromTransfer: self.
	withdraw := TransferWithdraw register: anAmount on: aTransfererAccount.
	value := anAmount ! !
!TransferWithdraw class methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 18:04:47'!
registerOn: anAccount fromTransfer: aTransfer

	^ self new initializeOn: anAccount fromTransfer: aTransfer ! !
!TransferWithdraw methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 18:05:02'!
initializeOn: anAccount fromTransfer: aTransfer

	myTransfer := aTransfer.
	anAccount register: self
! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:05:15' prior: 50623053!
affectBalance: currentBalance 
	
	^myTransfer value! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:05:31' prior: 50623182!
affectBalance: currentBalance 
	
	^myTransfer value negated! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:05:37' prior: 50623187!
affectBalance: currentBalance 
	
	^myTransfer value! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:05:53'!
affectBalance: currentBalance 
	
	^myTransfer value negated! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:06:04'!
transfer

	^myTransfer ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:06:21'!
ERROR!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:06:21'!
ERROR!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:06:21'!
ERROR!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:06:21'!
ERROR!
!Transfer methodsFor: 'operations' stamp: 'AlYac 5/30/2023 18:06:59' prior: 50623158!
register: anAmount from: aTransfererAccount to: aTransfereeAccount

	deposit := TransferDeposit registerOn: aTransfereeAccount fromTransfer: self.
	withdraw := TransferWithdraw registerOn: aTransfererAccount fromTransfer: self.
	value := anAmount ! !

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:07:00'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:07:00'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:07:00'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:07:00'!
PASSED!

AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 18:07:46'!
AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #TransferWithdraw
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 18:08:00'!
AccountTransaction subclass: #TransferWithdraw
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:10:12' prior: 50623193 overrides: 50622144!
affectBalance: currentBalance 
	
	^currentBalance + myTransfer value! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:10:58' prior: 50623198 overrides: 50622144!
affectBalance: currentBalance 
	
	^currentBalance - myTransfer value! !

TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReportsTest category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 18:22:16'!
TestCase subclass: #ReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReportsTest methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 18:23:34'!
test01AccountSummaryOfANewAccountIsEmpty! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 18:24:35' prior: 50623300!
test01AccountSummaryOfANewAccountIsEmpty

	self assert: ReceptiveAccount new accountSummary isEmpty ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:24:38'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:24:49'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:25:15' prior: 50623314!
accountSummary
	^OrderedCollection new! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 18:25:16'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:25:18'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:25:18'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:27:39'!
test02AccountWithOneDepositHasItInItsAccountSummary

	self assert: ReceptiveAccount new accountSummary isEmpty ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:28:35' prior: 50623357!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount |
	anAccount := ReceptiveAccount new.
	

	self assert: ReceptiveAccount new accountSummary isEmpty ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:29:02' prior: 50623364!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.

	self assert: anAccount accountSummary isEmpty ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:30:34' prior: 50623372!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Depósito por 100.'.

	self assert: anAccount accountSummary  ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:31:09' prior: 50623381!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Depósito por 100.'.

	self assert: anAccount accountSummary = expectedSummary ! !

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:31:13'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:32:39' prior: 50623319!
accountSummary
	| accountSummary |
	accountSummary := OrderedCollection new.
	^ accountSummary! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:33:04' prior: 50623408!
accountSummary
	| accountSummary |
	accountSummary := OrderedCollection new.
	
	^ accountSummary! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:37:17' prior: 50623414!
accountSummary
	| accountSummary |
	accountSummary := OrderedCollection new.
	
	^ transactions inject: OrderedCollection new into: [:summary :transaction|
		(transaction isKindOf: Deposit) ifTrue: [summary add: 'Deposito por ', transaction value ,'.'] ]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:37:39' prior: 50623420!
accountSummary
	
	^ transactions inject: OrderedCollection new into: [:summary :transaction|
		(transaction isKindOf: Deposit) ifTrue: [summary add: 'Depósito por ', transaction value ,'.'] ]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:37:43' prior: 50623431!
accountSummary
	
	^ transactions inject: OrderedCollection new into: [:summary :transaction|
		(transaction isKindOf: Deposit) ifTrue: [summary add: 'Depósito por ', transaction value ,'.'] 
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 18:37:47'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 18:37:50'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 18:37:50'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:37:50'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 18:37:50'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:37:53'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:37:53'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:37:53'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:39:03' prior: 50623440!
accountSummary
	
	^ transactions inject: OrderedCollection new into: [:summary :transaction|
		(transaction isKindOf: Deposit) ifTrue: [summary add: 'Depósito por ', transaction value asString ,'.'] 
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 18:39:04'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:39:12'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:39:12'!
FAILURE!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:39:12'!
FAILURE!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:39:33'!
FAILURE!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:39:33'!
FAILURE!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:40:21'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:40:21'!
FAILURE!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:40:21'!
FAILURE!

anAccount accountSummary!

expectedSummary!

anAccount accountSummary!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:43:07' prior: 50623502!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'] 
		]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 18:43:10'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:43:24' prior: 50623571!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'] 
		]
		^OrderedCollection new! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 18:43:25'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:43:30'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:43:30'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:43:36'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:44:07' prior: 50623607!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.']
		].
		^OrderedCollection new! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 18:44:10'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:44:16'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:44:16'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:45:05'!
test03AccountWithOneWithdrawHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.'.

	self assert: anAccount accountSummary = expectedSummary ! !

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:45:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:46:11' prior: 50623654!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ ^OrderedCollection with: 'Extraccion por ', transaction value asString ,'.'].
		].
		^OrderedCollection new! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:46:14'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:46:14'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:46:14'!
FAILURE!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:46:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:46:34' prior: 50623713!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ ^OrderedCollection with: 'Extracción por ', transaction value asString ,'.'].
		].
		^OrderedCollection new! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:46:40'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:46:40'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:46:40'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:47:22'!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.'.

	self assert: anAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:48:23' prior: 50623765!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary aTransfer transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.'.

	self assert: transfereeAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:48:44' prior: 50623777!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.'.

	self assert: transfereeAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 18:49:11' prior: 50623794!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Entrada por transferencia de 100.'.

	self assert: transfereeAccount accountSummary = expectedSummary ! !

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:49:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 18:49:59' prior: 50623741!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ ^OrderedCollection with: 'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ ^OrderedCollection with: 'Entrada por transferencia de ', transaction value asString ,'.'].
		].
		^OrderedCollection new! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 18:50:04'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:50:04'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:50:04'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:50:04'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 18:50:04'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:08:39'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:08:39'!
ERROR!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 19:09:11' prior: 50623276 overrides: 50622144!
affectBalance: currentBalance 
	
	^currentBalance + self value! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 19:09:38' overrides: 50622140!
value
	
	myTransfer value ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:09:57'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:09:57'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:09:57'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:09:57'!
FAILURE!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:09:57'!
FAILURE!

transfereeAccount accountSummary!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 19:10:48' prior: 50623883 overrides: 50622140!
value
	
	^myTransfer value ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:10:57'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:10:57'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:10:57'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:10:57'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:12:11'!
test04AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.'.

	self assert: transfererAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:12:18'!
test05AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.'.

	self assert: transfererAccount accountSummary = expectedSummary ! !

!methodRemoval: ReportsTest #test04AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:12:18'!
test04AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.'.

	self assert: transfererAccount accountSummary = expectedSummary !

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:12:26'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:13:24' prior: 50623831!
accountSummary
	
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ ^OrderedCollection with: 'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ ^OrderedCollection with: 'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ ^OrderedCollection with: 'Salida por transferencia de ', transaction value asString ,'.'].
		].
		^OrderedCollection new! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 19:13:38' prior: 50623283 overrides: 50622144!
affectBalance: currentBalance 
	
	^currentBalance - self value! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 19:13:57' overrides: 50622140!
value
	
	^myTransfer value! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:14:46'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:14:46'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:14:46'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:14:46'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:14:46'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:16:29'!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.'.

	self assert: transfererAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:19:57' prior: 50623392!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Depósito por 100.' with:'Balance = 100'.

	self assert: anAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:21:23' prior: 50623305!
test01AccountSummaryOfANewAccountIsEmpty

	self assert: (ReceptiveAccount new accountSummary = OrderedCollection with: 'Balance = 0')! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:21:57' prior: 50623697!
test03AccountWithOneWithdrawHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100'.

	self assert: anAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:22:30' prior: 50623810!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100'.

	self assert: transfereeAccount accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:22:49' prior: 50623942!
test05AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100'.

	self assert: transfererAccount accountSummary = expectedSummary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:24:06' prior: 50623980!
accountSummary
	
		| summary |
	summary = OrderedCollection new
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ ^OrderedCollection with: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ ^OrderedCollection with: 'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ ^OrderedCollection with: 'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ ^OrderedCollection with: 'Salida por transferencia de ', transaction value asString ,'.'].
		].
		^OrderedCollection new! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:26:08' prior: 50624116!
accountSummary
	
		| summary |
	summary = OrderedCollection new.
		transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ summary add: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ summary add:  'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ summary add:  'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ summary add:  'Salida por transferencia de ', transaction value asString ,'.'].
		].
		summary add: 'Balance = ', self balance.
		^summary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:26:43' prior: 50624140!
accountSummary
	
	| summary |
	summary = OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ summary add: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ summary add:  'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ summary add:  'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ summary add:  'Salida por transferencia de ', transaction value asString ,'.'].
		].
	summary add: 'Balance = ', self balance.
	^summary ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 19:26:48'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:26:56'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:26:56'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:26:56'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:26:56'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:26:56'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:26:56'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:27:00'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:27:31' prior: 50624164!
accountSummary
	
	| summary |
	summary = OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ summary add: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ summary add:  'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ summary add:  'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ summary add:  'Salida por transferencia de ', transaction value asString ,'.'].
		].
	summary add: 'Balance = ', self balance asString .
	^summary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:27:36' prior: 50624241!
accountSummary
	
	| summary |
	summary = OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ summary add: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ summary add:  'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ summary add:  'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ summary add:  'Salida por transferencia de ', transaction value asString ,'.'].
		].
	summary add: 'Balance = ', self balance asString.
	^summary ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 19:27:39'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:27:47'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:27:47'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:27:47'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:27:47'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:27:47'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:27:47'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:27:49'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:28:17' prior: 50624265!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	transactions do: [:transaction|
		(transaction isKindOf: Deposit) ifTrue: [ summary add: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ summary add:  'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ summary add:  'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ summary add:  'Salida por transferencia de ', transaction value asString ,'.'].
		].
	summary add: 'Balance = ', self balance asString.
	^summary ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 19:28:18'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:28:23'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:28:23'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:28:23'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:28:23'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:28:23'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:28:23'!
FAILURE!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:28:28'!
ERROR!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:29:13' prior: 50624062!
test01AccountSummaryOfANewAccountIsEmpty

	self assert: (ReceptiveAccount new accountSummary = (OrderedCollection with: 'Balance = 0'))! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:29:14'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:29:14'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:29:15'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:29:15'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:29:15'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:29:15'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:29:15'!
FAILURE!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:29:15'!
FAILURE!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:34:22' prior: 50624032!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Salida por transferencia de 100.'.

	self assert: accountOne accountSummary = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:37:10' prior: 50624457!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70.'.

	self assert: accountOne accountSummary = expectedSummary ! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:37:17'!
FAILURE!

accountOne!

accountOne!

expectedSummary!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:40:01' prior: 50624477!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70.'.

	self assert: accountOne accountSummary = expectedSummary ! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:40:06'!
FAILURE!

accountOne accountSummary!

accountOne accountSummary = expectedSummary!

self at: index!

otherCollection at: index!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 19:46:29' prior: 50624508!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70'.

	self assert: accountOne accountSummary = expectedSummary ! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:46:31'!
PASSED!

----SNAPSHOT----(30 May 2023 19:46:39) CuisUniversity-5799.image priorSource: 9272719!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:51:42' prior: 50624342!
accountSummary
	

	^(transactions inject: OrderedCollection new into: [:summary :transaction| transaction affectAccountSummary: summary.
		(transaction isKindOf: Deposit) ifTrue: [ summary add: 'Depósito por ', transaction value asString ,'.'].
		(transaction isKindOf: Withdraw) ifTrue: [ summary add:  'Extracción por ', transaction value asString ,'.'].
		(transaction isKindOf: TransferDeposit) ifTrue: [ summary add:  'Entrada por transferencia de ', transaction value asString ,'.'].
		(transaction isKindOf: TransferWithdraw) ifTrue: [ summary add:  'Salida por transferencia de ', transaction value asString ,'.'].
		]) add: 'Balance = ', self balance asString.
! !
!AccountTransaction methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:52:38'!
affectAccountSummary: anAccountSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'nil' stamp: 'AlYac 5/30/2023 19:53:29' overrides: 50624622!
affectAccountSummary: anAccountSummary! !
!TransferDeposit methodsFor: 'nil' stamp: 'AlYac 5/30/2023 19:53:38' overrides: 50624622!
affectAccountSummary: anAccountSummary! !
!TransferWithdraw methodsFor: 'nil' stamp: 'AlYac 5/30/2023 19:53:44' overrides: 50624622!
affectAccountSummary: anAccountSummary! !
!Withdraw methodsFor: 'nil' stamp: 'AlYac 5/30/2023 19:53:49' overrides: 50624622!
affectAccountSummary: anAccountSummary! !
!Deposit methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:55:57' prior: 50624627 overrides: 50624622!
affectAccountSummary: anAccountSummary

	anAccountSummary add: 'Depósito por ', self value asString ,'.'! !
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:56:39' prior: 50624641 overrides: 50624622!
affectAccountSummary: anAccountSummary

	anAccountSummary add:  'Extracción por ', self value asString ,'.'! !
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:57:10' prior: 50624632 overrides: 50624622!
affectAccountSummary: anAccountSummary

	anAccountSummary add:  'Entrada por transferencia de ', self value asString ,'.'! !
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:57:39' prior: 50624637 overrides: 50624622!
affectAccountSummary: anAccountSummary
	
	anAccountSummary add:  'Salida por transferencia de ', self value asString ,'.'! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 19:58:05' prior: 50624598!
accountSummary
	

	^(transactions inject: OrderedCollection new into: [:summary :transaction| transaction affectAccountSummary: summary
		]) add: 'Balance = ', self balance asString.
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 19:58:07'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:58:16'!
FAILURE!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:58:16'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:58:16'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:58:16'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 19:58:16'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 19:58:16'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 19:58:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:00:30' prior: 50624675!
accountSummary
	

	| summary |
	summary := OrderedCollection new.
	transactions do: [:transaction| transaction affectAccountSummary: summary].
	summary add: 'Balance = ', self balance asString.
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:00:45' prior: 50624738!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	transactions do: [:transaction| transaction affectAccountSummary: summary].
	summary add: 'Balance = ', self balance asString.
	^summary 
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 20:00:46'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 20:00:53'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 20:00:53'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 20:00:53'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 20:00:53'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 20:00:53'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 20:00:53'!
PASSED!
!AccountTransaction methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:07:39'!
printOnSummary: anAccountSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:07:39' overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary add: 'Depósito por ', self value asString ,'.'! !
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:07:39' overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary add:  'Entrada por transferencia de ', self value asString ,'.'! !
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:07:39' overrides: 50624807!
printOnSummary: anAccountSummary
	
	anAccountSummary add:  'Salida por transferencia de ', self value asString ,'.'! !
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 20:07:39' overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary add:  'Extracción por ', self value asString ,'.'! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 20:07:39' prior: 50624748!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	transactions do: [:transaction| transaction printOnSummary: summary].
	summary add: 'Balance = ', self balance asString.
	^summary 
! !

!methodRemoval: AccountTransaction #affectAccountSummary: stamp: 'AlYac 5/30/2023 20:07:39'!
affectAccountSummary: anAccountSummary

	self subclassResponsibility!

!methodRemoval: Deposit #affectAccountSummary: stamp: 'AlYac 5/30/2023 20:07:39'!
affectAccountSummary: anAccountSummary

	anAccountSummary add: 'Depósito por ', self value asString ,'.'!

!methodRemoval: TransferDeposit #affectAccountSummary: stamp: 'AlYac 5/30/2023 20:07:39'!
affectAccountSummary: anAccountSummary

	anAccountSummary add:  'Entrada por transferencia de ', self value asString ,'.'!

!methodRemoval: TransferWithdraw #affectAccountSummary: stamp: 'AlYac 5/30/2023 20:07:39'!
affectAccountSummary: anAccountSummary
	
	anAccountSummary add:  'Salida por transferencia de ', self value asString ,'.'!

!methodRemoval: Withdraw #affectAccountSummary: stamp: 'AlYac 5/30/2023 20:07:39'!
affectAccountSummary: anAccountSummary

	anAccountSummary add:  'Extracción por ', self value asString ,'.'!

Object subclass: #AccountSummaryPrinter
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountSummaryPrinter category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 20:24:36'!
Object subclass: #AccountSummaryPrinter
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountSummaryPrinter methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 20:25:11' overrides: 16902957!
print! !
!AccountSummaryPrinter class methodsFor: 'no messages' stamp: 'AlYac 5/30/2023 20:26:05'!
for: aTransactionCollection! !
!AccountSummaryPrinter class methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 20:28:46' prior: 50624898!
for: aTransactionCollection
	
	^self new initializeFor: aTransactionCollection! !
!AccountSummaryPrinter methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 20:29:30'!
initializeFor: aTransactionCollection

	transactions := aTransactionCollection! !

!classRenamed: #AccountSummaryPrinter as: #AccountSummary stamp: 'AlYac 5/30/2023 20:53:12'!
Smalltalk renameClassNamed: #AccountSummaryPrinter as: #AccountSummary!

Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 20:53:21'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountSummary class methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 20:53:53'!
of: aTransactionCollection
	
	^self new initializeFor: aTransactionCollection! !
!Deposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 20:53:53'!
of: aValue

	^ self new initializeFor: aValue ! !
!Withdraw class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 20:53:53'!
of: aValue

	^ self new initializeFor: aValue ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 20:53:53' prior: 50621533!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit of: 100))! !
!AccountTransaction class methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 20:53:53' prior: 50622158!
register: aValue on: account

	| transaction |
	
	transaction := self of: aValue.
	account register: transaction.
		
	^ transaction! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 20:53:53' prior: 50621827!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit of: 100.
	withdraw := Withdraw of: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

!methodRemoval: AccountSummary class #for: stamp: 'AlYac 5/30/2023 20:53:53'!
for: aTransactionCollection
	
	^self new initializeFor: aTransactionCollection!

!methodRemoval: Deposit class #for: stamp: 'AlYac 5/30/2023 20:53:53'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: Withdraw class #for: stamp: 'AlYac 5/30/2023 20:53:53'!
for: aValue

	^ self new initializeFor: aValue !
!AccountSummary methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 20:54:45'!
initializeOf: aTransactionCollection

	transactions := aTransactionCollection! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 20:54:45' prior: 50624932!
of: aTransactionCollection
	
	^self new initializeOf: aTransactionCollection! !

!methodRemoval: AccountSummary #initializeFor: stamp: 'AlYac 5/30/2023 20:54:45'!
initializeFor: aTransactionCollection

	transactions := aTransactionCollection!
!Withdraw class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 20:55:14'!
for: aValue

	^ self new initializeFor: aValue ! !

!methodRemoval: Withdraw class #of: stamp: 'AlYac 5/30/2023 20:55:14'!
of: aValue

	^ self new initializeFor: aValue !
!Deposit class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 20:55:27'!
for: aValue

	^ self new initializeFor: aValue ! !

!methodRemoval: Deposit class #of: stamp: 'AlYac 5/30/2023 20:55:27'!
of: aValue

	^ self new initializeFor: aValue !
!AccountSummary methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 20:55:59' prior: 50624988!
initializeOf: anAccount

	account := anAccount ! !
!AccountSummary class methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 20:56:13' prior: 50624994!
of: anAccount
	
	^self new initializeOf: anAccount ! !

!classRenamed: #AccountSummary as: #ReportPrinter stamp: 'AlYac 5/30/2023 20:57:22'!
Smalltalk renameClassNamed: #AccountSummary as: #ReportPrinter!
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 20:57:44'!
printAccountSummary! !

!methodRemoval: ReportPrinter #print stamp: 'AlYac 5/30/2023 20:57:44'!
print!
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 20:58:29' prior: 50625036!
printAccountSummary
	
	| summary |
	summary := OrderedCollection new.! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 20:58:40' prior: 50625042!
printAccountSummary
	
	| summary |
	summary := OrderedCollection new.
	
	^summary! !

----SNAPSHOT----(30 May 2023 21:00:29) CuisUniversity-5799.image priorSource: 9374200!
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:22:00' prior: 50625047!
printAccountSummary
	
	| summary |
	summary := OrderedCollection new.
	account fillAccountSummary: summary
	
	^summary! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:23:42'!
fillAccountSummary: aSummary

	transactions do: [:transaction| transaction printOnSummary: aSummary ].
	aSummary add: 'Balance = ', self balance asString.
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:23:43' prior: 50625063!
fillAccountSummary: aSummary

	transactions do: [:transaction| transaction printOnSummary: aSummary].
	aSummary add: 'Balance = ', self balance asString.
! !
!Deposit methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:25:45' prior: 50624812 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary printDepositOf: self value! !
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:26:13' prior: 50624833 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary print! !
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:26:36' prior: 50625086 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary printWithdrawOf: self value! !
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:27:19' prior: 50624826 overrides: 50624807!
printOnSummary: anAccountSummary
	
	anAccountSummary printTransferWithdrawOf: self value! !
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:27:46' prior: 50624819 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary printTransferDepositOf: self value! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/30/2023 21:29:05' prior: 50625071!
fillAccountSummary: aSummary

	transactions do: [:transaction| transaction printOnSummary: aSummary].
	aSummary printBalanceOf: self balance
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:29:41' prior: 50625056!
printAccountSummary
	
	| summary |
	summary := OrderedCollection new.
	account fillAccountSummary: summary
	^summary! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:30:11' prior: 50625120!
printAccountSummary
	
	^account fillAccountSummary: OrderedCollection new
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:31:43'!
printWithdrawOf: anAmount
	
	^account fillAccountSummary: OrderedCollection new
! !

!classDefinition: #ReportPrinter category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/30/2023 21:32:17'!
Object subclass: #ReportPrinter
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReportPrinter methodsFor: 'initialization' stamp: 'AlYac 5/30/2023 21:32:15' prior: 50625022!
initializeOf: anAccount

	account := anAccount.
	summary := OrderedCollection new! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:33:04' prior: 50625127!
printAccountSummary
	
	^account fillAccountSummary: self
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:34:57' prior: 50625132!
printWithdrawOf: anAmount
	
	^summary add: 'Extracción por ', anAmount asString , '.'
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:35:21'!
printDepositOf: anAmount
	
	^summary add: 'Depósito por ', anAmount asString , '.'
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:35:46'!
printTransferDepositOf: anAmount
	
	^summary add: 'Entrada por transferencia de ', anAmount asString , '.'
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:35:58'!
printTransferWithdrawOf: anAmount
	
	^summary add: 'Salida por transferencia de ', anAmount asString , '.'
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:36:52'!
printBalanceOf: anAmount
	
	^summary add: 'Balance = ', anAmount asString
! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:39:31' prior: 50624542!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70'.

	self assert: (ReportPrinter of: accountOne) print = expectedSummary ! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:39:32'!
ERROR!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AlYac 5/30/2023 21:40:01' prior: 50624956!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:40:11'!
FAILURE!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:40:11'!
FAILURE!

(ReportPrinter of: accountOne) print!
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:43:15' prior: 50625152!
printAccountSummary
	
	account fillAccountSummary: self
	^summary 
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:43:17' prior: 50625234!
printAccountSummary
	
	account fillAccountSummary: self
	
	^summary 
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:43:19' prior: 50625239!
printAccountSummary
	
	account fillAccountSummary: self
	
^summary 
! !
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:43:19' prior: 50625244!
printAccountSummary
	
	account fillAccountSummary: self
	^summary 
! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:43:27'!
FAILURE!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:43:27'!
FAILURE!

(ReportPrinter of: accountOne) print!
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:44:18' overrides: 16902957!
print
	
	account fillAccountSummary: self
	^summary 
! !

!methodRemoval: ReportPrinter #printAccountSummary stamp: 'AlYac 5/30/2023 21:44:18'!
printAccountSummary
	
	account fillAccountSummary: self
	^summary 
!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:44:24'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:44:24'!
ERROR!
!ReportPrinter methodsFor: 'print' stamp: 'AlYac 5/30/2023 21:44:48' prior: 50625264 overrides: 16902957!
print
	
	account fillAccountSummary: self.
	^summary 
! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:44:52'!
PASSED!

!classRenamed: #ReportPrinter as: #AccountSummary stamp: 'AlYac 5/30/2023 21:45:38'!
Smalltalk renameClassNamed: #ReportPrinter as: #AccountSummary!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/30/2023 21:45:38' prior: 50625186!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70'.

	self assert: (AccountSummary of: accountOne) print = expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:46:18' prior: 50625297!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70'.

	self assert: (AccountSummary of: accountOne) print equals: expectedSummary ! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:19'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 21:46:19'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:19'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:19'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:19'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:19'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:19'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:24'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 21:46:24'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:24'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:24'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:24'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:24'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:24'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:46:42' prior: 50625323!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70'.

	self assert: (AccountSummary of: accountOne) print equals: expectedSummary ! !

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:46:44'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:47:33' prior: 50624099!
test05AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100'.

	self assert: (AccountSummary of: transfererAccount ) print equals: expectedSummary ! !

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:47:35'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 21:47:35'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:47:35'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:47:35'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:47:35'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:47:35'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:47:35'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:47:54' prior: 50624082!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100'.

	self assert: (AccountSummary of: transfereeAccount ) print equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:48:03' prior: 50624069!
test03AccountWithOneWithdrawHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100'.

	self assert: (AccountSummary of: anAccount) print equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:48:13' prior: 50624049!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Depósito por 100.' with:'Balance = 100'.

	self assert: (AccountSummary of: anAccount) print equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/30/2023 21:49:03' prior: 50624419!
test01AccountSummaryOfANewAccountIsEmpty

	self assert: (AccountSummary of: ReceptiveAccount new) print equals: (OrderedCollection with: 'Balance = 0')! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:49:04'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AlYac 5/30/2023 21:51:11'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 21:51:11'!
ERROR!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'AlYac 5/30/2023 21:51:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AlYac 5/30/2023 21:51:55'!
ERROR!
!PortfolioTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 21:52:21' prior: 50624948!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100))! !

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AlYac 5/30/2023 21:52:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 21:52:32'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AlYac 5/30/2023 21:52:46' prior: 50624964!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/30/2023 21:52:53'!
PASSED!

----SNAPSHOT----(30 May 2023 21:53:06) CuisUniversity-5799.image priorSource: 9388852!

----SNAPSHOT----(30 May 2023 21:55:28) CuisUniversity-5799.image priorSource: 9410050!

----STARTUP---- (30 May 2023 23:59:16) as /home/alanyacar/Desktop/isw1/cuis/CuisUniversity-5799.image!

!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:00:58' prior: 50625283 overrides: 16902957!
print
	
	
	account fillAccountSummary: self.
	^summary 
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:01:11' prior: 50625725 overrides: 16902957!
print
	
	summary :=OrderedCollection new
	account fillAccountSummary: self.
	^summary 
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:01:16' prior: 50625731 overrides: 16902957!
print
	
	summary := OrderedCollection new
	account fillAccountSummary: self.
	^summary 
! !
!AccountSummary methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 00:01:25' prior: 50625146!
initializeOf: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 00:01:51' prior: 50625744!
initializeOf: anAccount

	account := anAccount.
	summary := OrderedCollection new! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:02:23' prior: 50625738 overrides: 16902957!
print
	
	summary isEmpty ifFalse: [^summary].
	account fillAccountSummary: self.
	^summary 
! !
!AccountSummary methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 00:04:01' prior: 50625749!
initializeOf: anAccount

	account := anAccount.! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:04:15' prior: 50625755 overrides: 16902957!
print
	
	summary := OrderedCollection new.
	account fillAccountSummary: self.
	^summary 
! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'AlYac 5/31/2023 00:10:14'!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	transactions do: [:transaction| transaction printOnSummary: summary].
	summary add: 'Balance = ', self balance asString.
	^summary 
!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:15:06' prior: 50625766 overrides: 16902957!
print
	
	summary := OrderedCollection new.
	account fillAccountSummary: self.
	self printBalanceOf: account balance
	^summary 
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:15:39' prior: 50625112!
fillAccountSummary: aSummary

	transactions do: [:transaction| transaction printOnSummary: aSummary].
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/31/2023 00:15:43'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:15:49'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:15:49'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:15:49'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:15:53'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:15:53'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:15:54'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:16:02'!
ERROR!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:02'!
ERROR!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:02'!
ERROR!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:07'!
ERROR!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:07'!
ERROR!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:08'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:16:10'!
ERROR!

----STARTUP---- (31 May 2023 00:16:38) as /home/alanyacar/Desktop/isw1/cuis/CuisUniversity-5799.image!


!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:16:48'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:48'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:48'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:48'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:48'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:16:48'!
PASSED!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:17:16' prior: 50625283 overrides: 16902957!
print
	
	summary := OrderedCollection new.
	account fillAccountSummary: self.
	^summary 
! !
!AccountSummary methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 00:17:29' prior: 50625146!
initializeOf: anAccount

	account := anAccount.
! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:17:35'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:17:35'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:17:35'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:17:35'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:17:35'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:17:35'!
PASSED!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'AlYac 5/31/2023 00:18:05'!
accountSummary
	
	| summary |
	summary := OrderedCollection new.
	transactions do: [:transaction| transaction printOnSummary: summary].
	summary add: 'Balance = ', self balance asString.
	^summary 
!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:18:10'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:10'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:10'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:10'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:10'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:10'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:18:22' prior: 50625112!
fillAccountSummary: aSummary

	transactions do: [:transaction| transaction printOnSummary: aSummary].
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 00:18:54' prior: 50625748 overrides: 16902957!
print
	
	summary := OrderedCollection new.
	account fillAccountSummary: self.
	self printBalanceOf: account balance.
	^summary 
! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:18:58'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:58'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:58'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:58'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:58'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:18:58'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:19:03'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:19:03'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:19:03'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:19:03'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:19:03'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:19:03'!
PASSED!

----SNAPSHOT----(31 May 2023 00:19:10) CuisUniversity-5799.image priorSource: 9410138!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:21:34'!
test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne aPorfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 50 on: accountOne.
	Deposit register: 70 on: accountTwo.
	Withdraw register: 10 on: accountTwo.
	
	aPorfolio := Portfolio new.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 50.'.
	expectedSummary add: 'Depósito por 70.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Balance = 110'.

	self assert: (AccountSummary of: accountOne) print equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:22:17' prior: 50625877!
test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne aPorfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 50 on: accountOne.
	Deposit register: 70 on: accountTwo.
	Withdraw register: 10 on: accountTwo.
	
	aPorfolio := Portfolio new.
	aPorfolio add: accountOne.
	aPorfolio add: accountTwo.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 50.'.
	expectedSummary add: 'Depósito por 70.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Balance = 110'.

	self assert: (AccountSummary of: aPorfolio) print equals: expectedSummary ! !

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:22:31'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:22:45'!
fillAccountSummary: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:26:21' prior: 50625934!
fillAccountSummary: anAccountSummary 
	
	accounts do: [:anAccount| anAccount fillAccountSummary: anAccountSummary].! !

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:28:33'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:28:38'!
PASSED!
!Account methodsFor: 'nil' stamp: 'AlYac 5/31/2023 00:30:25'!
fillAccountSummary: anAccountSummary

	self subclassResponsibility! !

!classDefinition: #NetTransfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 00:36:29'!
Object subclass: #NetTransfer
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:36:15'!
test08NetTransferOfANewAccountIs0

	self assert: (NetTransfer of: ReceptiveAccount new) value equals: 0 ! !

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:36:31'!
ERROR!
!NetTransfer class methodsFor: 'instance creation' stamp: 'AlYac 5/31/2023 00:36:37'!
of: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aReceptiveAccount ! !
!NetTransfer class methodsFor: 'instance creation' stamp: 'AlYac 5/31/2023 00:36:47' prior: 50625976!
of: aReceptiveAccount 
	
	^self new initializeOf: aReceptiveAccount ! !
!NetTransfer class methodsFor: 'instance creation' stamp: 'AlYac 5/31/2023 00:36:55' prior: 50625985!
of: anAccount 
	
	^self new initializeOf: anAccount ! !

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:36:57'!
ERROR!
!NetTransfer methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 00:37:07'!
initializeOf: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!NetTransfer methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 00:37:14' prior: 50625999!
initializeOf: anAccount 
	
	account := anAccount.! !

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:37:40'!
FAILURE!
!NetTransfer methodsFor: 'nil' stamp: 'AlYac 5/31/2023 00:38:10' overrides: 16902254!
value

	^0! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:38:13'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:42:41'!
test09AnAccountWithATransferDepositHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: ReceptiveAccount new) value equals: 0 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:43:00'!
test09AnAccountWithATransferWithdrawHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: ReceptiveAccount new) value equals: 0 ! !

!methodRemoval: ReportsTest #test09AnAccountWithATransferDepositHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:43:00'!
test09AnAccountWithATransferDepositHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: ReceptiveAccount new) value equals: 0 !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:43:14' prior: 50626058!
test09AnAccountWithATransferWithdrawHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: accountOne) value equals: -100 ! !

!testRun: #ReportsTest #test09AnAccountWithATransferWithdrawHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:43:17'!
FAILURE!
!NetTransfer methodsFor: 'value' stamp: 'AlYac 5/31/2023 00:44:23' prior: 50626013 overrides: 16902254!
value

	^account balance! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferWithdrawHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:44:25'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:45:48'!
test09AnAccountWithATransferHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: accountOne) value equals: -100 ! !

!methodRemoval: ReportsTest #test09AnAccountWithATransferWithdrawHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:45:48'!
test09AnAccountWithATransferWithdrawHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: accountOne) value equals: -100 !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:46:27'!
test10AnAccountWithMultipleTransfersHasACorrectNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: accountOne) value equals: -100 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:48:31' prior: 50626162!
test10AnAccountWithMultipleTransfersHasACorrectNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Transfer register: 250 from: accountTwo to: accountOne.
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !

!testRun: #ReportsTest #test10AnAccountWithMultipleTransfersHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransfersHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:48:34'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 00:49:41'!
test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Transfer register: 250 from: accountTwo to: accountOne.
	Deposit register: 100 on: accountOne.
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !

!methodRemoval: ReportsTest #test10AnAccountWithMultipleTransfersHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:49:50'!
test10AnAccountWithMultipleTransfersHasACorrectNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Transfer register: 250 from: accountTwo to: accountOne.
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) value equals: 135 !

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:49:54'!
FAILURE!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:49:54'!
FAILURE!
!NetTransfer methodsFor: 'value' stamp: 'AlYac 5/31/2023 00:51:27' prior: 50626100 overrides: 16902254!
value

	^account fillNetTransfer: self! !
!NetTransfer methodsFor: 'value' stamp: 'AlYac 5/31/2023 00:51:45' prior: 50626279 overrides: 16902254!
value

	account fillNetTransfer: self! !

Object subclass: #NetTransfer
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NetTransfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 00:52:12'!
Object subclass: #NetTransfer
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!NetTransfer methodsFor: 'value' stamp: 'AlYac 5/31/2023 00:52:50' prior: 50626284 overrides: 16902254!
value

	netValue := 0.
	account fillNetTransfer: self.
	^netValue ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:52:53'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:52:53'!
ERROR!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:52:53'!
ERROR!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:52:53'!
ERROR!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 00:53:02'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 00:53:02'!
ERROR!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 00:53:02'!
ERROR!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 00:53:02'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:54:13'!
fillNetTransfer: aNetTransfer

	transactions do: [:transaction| transaction affectNetTransfer: aNetTransfer].
! !
!Deposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:55:32'!
affectNetTransfer: aNetTransfer
! !
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:55:50'!
affectNetTransfer: aNetTransfer
! !
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:56:49'!
affectNetTransfer: aNetTransfer

	aNetTransfer withdraw: self value! !
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 00:57:54'!
affectNetTransfer: aNetTransfer

	aNetTransfer deposit: self value! !
!NetTransfer methodsFor: 'value' stamp: 'AlYac 5/31/2023 01:01:00'!
withdraw: anAmount
	
	netValue := netValue - anAmount ! !
!NetTransfer methodsFor: 'value' stamp: 'AlYac 5/31/2023 01:01:13'!
deposit: anAmount
	
	netValue := netValue + anAmount ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:01:14'!
PASSED!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:04:06'!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Transfer register: 250 from: accountTwo to: accountOne.
	Deposit register: 100 on: accountOne.
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:05:36' prior: 50626454!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo accountFout accountThree |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	accountThree := ReceptiveAccount new.
	accountFout := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Deposit register: 100 on: accountOne.
	Transfer register: 250 from: accountTwo to: accountOne.
	
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:05:46' prior: 50626473!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo accountFour accountThree |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	accountThree := ReceptiveAccount new.
	accountFour := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Deposit register: 100 on: accountOne.
	Transfer register: 250 from: accountTwo to: accountOne.
	
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:06:48' prior: 50626495!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo accountFour accountThree |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	accountThree := ReceptiveAccount new.
	accountFour := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Deposit register: 100 on: accountOne.
	Transfer register: 250 from: accountTwo to: accountOne.
	
	Transfer register: 30 from: accountThree to: accountFour.
	Deposit register: 100 on: accountThree.
	Transfer register: 15 from: accountFour to: accountThree.

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:07:29' prior: 50626517!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo accountFour accountThree aPortfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	accountThree := ReceptiveAccount new.
	accountFour := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Deposit register: 100 on: accountOne.
	Transfer register: 250 from: accountTwo to: accountOne.
	
	Transfer register: 30 from: accountThree to: accountFour.
	Deposit register: 100 on: accountThree.
	Transfer register: 15 from: accountFour to: accountThree.
	

	self assert: (NetTransfer of: accountOne) value equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:08:34' prior: 50626540!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo accountFour accountThree aPortfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	accountThree := ReceptiveAccount new.
	accountFour := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: accountOne.
	aPortfolio add: accountThree.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Deposit register: 100 on: accountOne.
	Transfer register: 250 from: accountTwo to: accountOne.
	
	Transfer register: 30 from: accountThree to: accountFour.
	Deposit register: 100 on: accountThree.
	Transfer register: 15 from: accountFour to: accountThree.
	

	self assert: (NetTransfer of: aPortfolio) value equals: 135 ! !

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:08:37'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:08:47'!
fillNetTransfer: aNetTransfer 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:09:36' prior: 50626595!
fillNetTransfer: aNetTransfer 
	
	accounts do: [:anAccount| anAccount fillNetTransfer: aNetTransfer]! !

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:09:39'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Report category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 01:10:17'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #NetTransfer
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NetTransfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 01:10:27'!
Report subclass: #NetTransfer
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 01:10:35'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 01:10:44'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NetTransfer category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 01:10:56'!
Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Report category: 'Portfolio-Ejercicio' stamp: 'AlYac 5/31/2023 01:11:13'!
Object subclass: #Report
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:11:33' prior: 50626302 overrides: 16902254!
value

	report := 0.
	account fillNetTransfer: self.
	^report ! !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:11:51'!
report

	report := 0.
	account fillNetTransfer: self.
	^report ! !

!methodRemoval: NetTransfer #value stamp: 'AlYac 5/31/2023 01:11:51'!
value

	report := 0.
	account fillNetTransfer: self.
	^report !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:12:12' prior: 50625821 overrides: 16902957!
print
	
	report := OrderedCollection new.
	account fillAccountSummary: self.
	self printBalanceOf: account balance.
	^report 
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:12:35'!
report
	
	report := OrderedCollection new.
	account fillAccountSummary: self.
	self printBalanceOf: account balance.
	^report 
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625509!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Depósito por 100.' with:'Balance = 100'.

	self assert: (AccountSummary of: anAccount) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625403!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Salida por transferencia de 50.'.
	expectedSummary add: 'Entrada por transferencia de 30.'.
	expectedSummary add: 'Balance = 70'.

	self assert: (AccountSummary of: accountOne) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625496!
test03AccountWithOneWithdrawHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100.' with: 'Balance = -100'.

	self assert: (AccountSummary of: anAccount) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625478!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Entrada por transferencia de 100.' with: 'Balance = 100'.

	self assert: (AccountSummary of: transfereeAccount ) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625903!
test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne aPorfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 50 on: accountOne.
	Deposit register: 70 on: accountTwo.
	Withdraw register: 10 on: accountTwo.
	
	aPorfolio := Portfolio new.
	aPorfolio add: accountOne.
	aPorfolio add: accountTwo.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100.'.
	expectedSummary add: 'Extracción por 50.'.
	expectedSummary add: 'Depósito por 70.'.
	expectedSummary add: 'Extracción por 10.'.
	expectedSummary add: 'Balance = 110'.

	self assert: (AccountSummary of: aPorfolio) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625522!
test01AccountSummaryOfANewAccountIsEmpty

	self assert: (AccountSummary of: ReceptiveAccount new) report equals: (OrderedCollection with: 'Balance = 0')! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:12:35' prior: 50625433!
test05AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100.' with: 'Balance = -100'.

	self assert: (AccountSummary of: transfererAccount ) report equals: expectedSummary ! !

!methodRemoval: AccountSummary #print stamp: 'AlYac 5/31/2023 01:12:35'!
print
	
	report := OrderedCollection new.
	account fillAccountSummary: self.
	self printBalanceOf: account balance.
	^report 
!
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:12:55' prior: 50626565!
test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo accountFour accountThree aPortfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	accountThree := ReceptiveAccount new.
	accountFour := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: accountOne.
	aPortfolio add: accountThree.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Deposit register: 100 on: accountOne.
	Transfer register: 250 from: accountTwo to: accountOne.
	
	Transfer register: 30 from: accountThree to: accountFour.
	Deposit register: 100 on: accountThree.
	Transfer register: 15 from: accountFour to: accountThree.
	

	self assert: (NetTransfer of: aPortfolio) report equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:12:59' prior: 50626233!
test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo. 
	Transfer register: 250 from: accountTwo to: accountOne.
	Deposit register: 100 on: accountOne.
	Transfer register: 30 from: accountOne to: accountTwo.
	Transfer register: 15 from: accountTwo to: accountOne .

	self assert: (NetTransfer of: accountOne) report equals: 135 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:13:05' prior: 50626138!
test09AnAccountWithATransferHasItInItsNetTransfer

	| accountOne accountTwo |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	
	Transfer register: 100 from: accountOne to: accountTwo . 

	self assert: (NetTransfer of: accountOne) report equals: -100 ! !
!ReportsTest methodsFor: 'test' stamp: 'AlYac 5/31/2023 01:13:11' prior: 50625966!
test08NetTransferOfANewAccountIs0

	self assert: (NetTransfer of: ReceptiveAccount new) report equals: 0 ! !

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:13:17'!
ERROR!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:13:17'!
ERROR!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:13:45' prior: 50625180!
printBalanceOf: anAmount
	
	^report add: 'Balance = ', anAmount asString
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:13:53' prior: 50625163!
printDepositOf: anAmount
	
	^report add: 'Depósito por ', anAmount asString , '.'
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:13:57' prior: 50625168!
printTransferDepositOf: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount asString , '.'
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:14:00' prior: 50625174!
printTransferWithdrawOf: anAmount
	
	^report add: 'Salida por transferencia de ', anAmount asString , '.'
! !
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:14:03' prior: 50625157!
printWithdrawOf: anAmount
	
	^report add: 'Extracción por ', anAmount asString , '.'
! !
!Report methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 01:14:28'!
initializeOf: anAccount

	account := anAccount.
! !

!methodRemoval: AccountSummary #initializeOf: stamp: 'AlYac 5/31/2023 01:14:29'!
initializeOf: anAccount

	account := anAccount.
!
!Report methodsFor: 'initialization' stamp: 'AlYac 5/31/2023 01:14:45' prior: 50626994!
initializeOf: anAccount 
	
	account := anAccount.! !

!methodRemoval: NetTransfer #initializeOf: stamp: 'AlYac 5/31/2023 01:14:45'!
initializeOf: anAccount 
	
	account := anAccount.!
!Report class methodsFor: 'instance creation' stamp: 'AlYac 5/31/2023 01:14:58'!
of: anAccount 
	
	^self new initializeOf: anAccount ! !

!methodRemoval: NetTransfer class #of: stamp: 'AlYac 5/31/2023 01:14:58'!
of: anAccount 
	
	^self new initializeOf: anAccount !

!methodRemoval: AccountSummary class #of: stamp: 'AlYac 5/31/2023 01:15:06'!
of: anAccount
	
	^self new initializeOf: anAccount !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:15:21' prior: 50626411!
deposit: anAmount
	
	report := report + anAmount ! !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:15:27' prior: 50626407!
withdraw: anAmount
	
	report := report - anAmount ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:15:43'!
PASSED!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:16:36'!
addToReportDepositOf: anAmount
	
	^report add: 'Depósito por ', anAmount asString , '.'
! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:16:36' prior: 50625080 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary addToReportDepositOf: self value! !

!methodRemoval: AccountSummary #printDepositOf: stamp: 'AlYac 5/31/2023 01:16:36'!
printDepositOf: anAmount
	
	^report add: 'Depósito por ', anAmount asString , '.'
!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:16:40'!
PASSED!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:17:11'!
addToReportTransferDepositOf: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount asString , '.'
! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:17:11' prior: 50625106 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary addToReportTransferDepositOf: self value! !

!methodRemoval: AccountSummary #printTransferDepositOf: stamp: 'AlYac 5/31/2023 01:17:11'!
printTransferDepositOf: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount asString , '.'
!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:17:12'!
PASSED!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:17:31'!
addToReportTransferWithdrawOf: anAmount
	
	^report add: 'Salida por transferencia de ', anAmount asString , '.'
! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:17:31' prior: 50625099 overrides: 50624807!
printOnSummary: anAccountSummary
	
	anAccountSummary addToReportTransferWithdrawOf: self value! !

!methodRemoval: AccountSummary #printTransferWithdrawOf: stamp: 'AlYac 5/31/2023 01:17:31'!
printTransferWithdrawOf: anAmount
	
	^report add: 'Salida por transferencia de ', anAmount asString , '.'
!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:17:49'!
addToReportWithdrawOf: anAmount
	
	^report add: 'Extracción por ', anAmount asString , '.'
! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:17:49' prior: 50625092 overrides: 50624807!
printOnSummary: anAccountSummary

	anAccountSummary addToReportWithdrawOf: self value! !

!methodRemoval: AccountSummary #printWithdrawOf: stamp: 'AlYac 5/31/2023 01:17:49'!
printWithdrawOf: anAmount
	
	^report add: 'Extracción por ', anAmount asString , '.'
!
!AccountSummary methodsFor: 'print' stamp: 'AlYac 5/31/2023 01:18:11'!
addToReportBalanceOf: anAmount
	
	^report add: 'Balance = ', anAmount asString
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:18:11' prior: 50626748!
report
	
	report := OrderedCollection new.
	account fillAccountSummary: self.
	self addToReportBalanceOf: account balance.
	^report 
! !

!methodRemoval: AccountSummary #printBalanceOf: stamp: 'AlYac 5/31/2023 01:18:11'!
printBalanceOf: anAmount
	
	^report add: 'Balance = ', anAmount asString
!
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:18:52'!
addToReportWithdrawOf: anAmount
	
	report := report - anAmount ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:18:52' prior: 50626397!
affectNetTransfer: aNetTransfer

	aNetTransfer addToReportWithdrawOf: self value! !

!methodRemoval: NetTransfer #withdraw: stamp: 'AlYac 5/31/2023 01:18:52'!
withdraw: anAmount
	
	report := report - anAmount !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:18:53'!
PASSED!
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:19:22'!
addToReportDepositOf: anAmount
	
	report := report + anAmount ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:19:22' prior: 50626402!
affectNetTransfer: aNetTransfer

	aNetTransfer addToReportDepositOf: self value! !

!methodRemoval: NetTransfer #deposit: stamp: 'AlYac 5/31/2023 01:19:22'!
deposit: anAmount
	
	report := report + anAmount !
!Report methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:20:15'!
report

	self subclassResponsibility ! !
!Report methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:20:16' prior: 50627328!
report

	self subclassResponsibility! !
!Report methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:20:38'!
addToReportDepositOf: anAmount

	self subclassResponsibility! !
!Report methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:20:51'!
addToReportTransferDepositOf: anAmount

	self subclassResponsibility! !
!Report methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:21:01'!
addToReportTransferWithdrawOf: anAmount

	self subclassResponsibility! !
!Report methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:21:04'!
addToReportWithdrawOf: anAmount

	self subclassResponsibility! !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:22:21' overrides: 50627340!
addToReportTransferDepositOf: anAmount
	
	report := report + anAmount ! !

!methodRemoval: NetTransfer #addToReportDepositOf: stamp: 'AlYac 5/31/2023 01:22:21'!
addToReportDepositOf: anAmount
	
	report := report + anAmount !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:22:38' overrides: 50627345!
addToReportTransferWithdrawOf: anAmount
	
	report := report - anAmount ! !

!methodRemoval: NetTransfer #addToReportWithdrawOf: stamp: 'AlYac 5/31/2023 01:22:38'!
addToReportWithdrawOf: anAmount
	
	report := report - anAmount !
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:23:41' prior: 50627319!
affectNetTransfer: aNetTransfer

	aNetTransfer addToReportTransferDepositOf: self value! !
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:23:52' prior: 50627261!
affectNetTransfer: aNetTransfer

	aNetTransfer addToReportTransferWithdrawOf: self value! !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:25:37' overrides: 50627350!
addToReportWithdrawOf: anAmount
 ! !
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:25:47' overrides: 50627336!
addToReportDepositOf: anAmount
! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:27:13' prior: 50625814 overrides: 50625954!
fillAccountSummary: aReport

	transactions do: [:transaction| transaction printOnSummary: aReport].
! !
!Account methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:27:32'!
fillReport: anAccountSummary

	self subclassResponsibility! !
!Portfolio methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:27:32' overrides: 50627402!
fillReport: anAccountSummary 
	
	accounts do: [:anAccount| anAccount fillAccountSummary: anAccountSummary].! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:27:32' overrides: 50627402!
fillReport: aReport

	transactions do: [:transaction| transaction printOnSummary: aReport].
! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:27:32' prior: 50627243 overrides: 50627332!
report
	
	report := OrderedCollection new.
	account fillReport: self.
	self addToReportBalanceOf: account balance.
	^report 
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:27:32' prior: 50625939 overrides: 50625954!
fillAccountSummary: anAccountSummary 
	
	accounts do: [:anAccount| anAccount fillReport: anAccountSummary].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AlYac 5/31/2023 01:27:32' prior: 50627407 overrides: 50627402!
fillReport: anAccountSummary 
	
	accounts do: [:anAccount| anAccount fillReport: anAccountSummary].! !

!methodRemoval: Account #fillAccountSummary: stamp: 'AlYac 5/31/2023 01:27:32'!
fillAccountSummary: anAccountSummary

	self subclassResponsibility!

!methodRemoval: Portfolio #fillAccountSummary: stamp: 'AlYac 5/31/2023 01:27:32'!
fillAccountSummary: anAccountSummary 
	
	accounts do: [:anAccount| anAccount fillReport: anAccountSummary].!

!methodRemoval: ReceptiveAccount #fillAccountSummary: stamp: 'AlYac 5/31/2023 01:27:32'!
fillAccountSummary: aReport

	transactions do: [:transaction| transaction printOnSummary: aReport].
!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:27:51' prior: 50627414 overrides: 50627402!
fillReport: aReport

	transactions do: [:transaction| transaction fillReport: aReport].
! !

!methodRemoval: ReceptiveAccount #fillNetTransfer: stamp: 'AlYac 5/31/2023 01:28:02'!
fillNetTransfer: aNetTransfer

	transactions do: [:transaction| transaction affectNetTransfer: aNetTransfer].
!
!Portfolio methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:28:17' prior: 50627437 overrides: 50627402!
fillReport: aReport 
	
	accounts do: [:anAccount| anAccount fillReport: aReport].! !

!methodRemoval: Portfolio #fillNetTransfer: stamp: 'AlYac 5/31/2023 01:28:24'!
fillNetTransfer: aNetTransfer 
	
	accounts do: [:anAccount| anAccount fillNetTransfer: aNetTransfer]!
!Deposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:29:28' prior: 50627084 overrides: 50624807!
printOnSummary: aReport

	aReport addToReportDepositOf: self value! !
!AccountTransaction methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:29:50'!
fillReport: anAccountSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:29:50' overrides: 50627491!
fillReport: aReport

	aReport addToReportDepositOf: self value! !
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:29:50' overrides: 50627491!
fillReport: anAccountSummary

	anAccountSummary addToReportTransferDepositOf: self value! !
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:29:50' overrides: 50627491!
fillReport: anAccountSummary
	
	anAccountSummary addToReportTransferWithdrawOf: self value! !
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:29:50' overrides: 50627491!
fillReport: anAccountSummary

	anAccountSummary addToReportWithdrawOf: self value! !

!methodRemoval: AccountTransaction #printOnSummary: stamp: 'AlYac 5/31/2023 01:29:50'!
printOnSummary: anAccountSummary

	self subclassResponsibility!

!methodRemoval: Deposit #printOnSummary: stamp: 'AlYac 5/31/2023 01:29:50'!
printOnSummary: aReport

	aReport addToReportDepositOf: self value!

!methodRemoval: TransferDeposit #printOnSummary: stamp: 'AlYac 5/31/2023 01:29:50'!
printOnSummary: anAccountSummary

	anAccountSummary addToReportTransferDepositOf: self value!

!methodRemoval: TransferWithdraw #printOnSummary: stamp: 'AlYac 5/31/2023 01:29:50'!
printOnSummary: anAccountSummary
	
	anAccountSummary addToReportTransferWithdrawOf: self value!

!methodRemoval: Withdraw #printOnSummary: stamp: 'AlYac 5/31/2023 01:29:50'!
printOnSummary: anAccountSummary

	anAccountSummary addToReportWithdrawOf: self value!

!methodRemoval: Deposit #affectNetTransfer: stamp: 'AlYac 5/31/2023 01:30:10'!
affectNetTransfer: aNetTransfer
!
!TransferDeposit methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:30:21' prior: 50627501 overrides: 50627491!
fillReport: aReport

	aReport addToReportTransferDepositOf: self value! !

!methodRemoval: TransferDeposit #affectNetTransfer: stamp: 'AlYac 5/31/2023 01:30:28'!
affectNetTransfer: aNetTransfer

	aNetTransfer addToReportTransferDepositOf: self value!
!TransferWithdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:30:39' prior: 50627507 overrides: 50627491!
fillReport: aReport
	
	aReport addToReportTransferWithdrawOf: self value! !

!methodRemoval: TransferWithdraw #affectNetTransfer: stamp: 'AlYac 5/31/2023 01:30:43'!
affectNetTransfer: aNetTransfer

	aNetTransfer addToReportTransferWithdrawOf: self value!
!Withdraw methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:30:58' prior: 50627513 overrides: 50627491!
fillReport: aReport

	aReport addToReportWithdrawOf: self value! !

!methodRemoval: Withdraw #affectNetTransfer: stamp: 'AlYac 5/31/2023 01:31:01'!
affectNetTransfer: aNetTransfer
!
!NetTransfer methodsFor: 'report' stamp: 'AlYac 5/31/2023 01:31:30' prior: 50626731 overrides: 50627332!
report

	report := 0.
	account fillReport: self.
	^report ! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:31:32'!
PASSED!
!Account methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:32:12' prior: 50627402!
fillReport: aReport

	self subclassResponsibility! !
!AccountTransaction methodsFor: 'reports' stamp: 'AlYac 5/31/2023 01:32:18' prior: 50627491!
fillReport: aReport

	self subclassResponsibility! !

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:34:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'AlYac 5/31/2023 01:34:43'!
PASSED!

----SNAPSHOT----(31 May 2023 01:34:49) CuisUniversity-5799.image priorSource: 9415145!

----SNAPSHOT----(31 May 2023 01:35:18) CuisUniversity-5799.image priorSource: 9477534!

----QUIT----(31 May 2023 01:35:20) CuisUniversity-5799.image priorSource: 9477622!

TestCase subclass: #TreeReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TreeReportsTest category: 'Portfolio-Ejercicio' stamp: 'LMR 5/31/2023 23:39:08'!
TestCase subclass: #TreeReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #XXX category: 'Portfolio-Ejercicio' stamp: 'LMR 5/31/2023 23:42:39'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TreeReportsTest methodsFor: 'nil' stamp: 'LMR 5/31/2023 23:42:35'!
test01NewPortfolioOnlyHasItsNameOnItsReport

	| aPortfolio expectedReport |
	aPortfolio := Portfolio named: 'Portfolio de la familia'.

	expectedReport := OrderedCollection with: 'Portfolio de la familia'.

	self assert: (XXX of: aPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:42:47'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:42:53'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:43:22' prior: 50622382!
named: aName
	
	^self new initializeNamed: aName.! !
!Account class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:43:45'!
named: aName
	
	^self new initializeNamed: aName.! !

!methodRemoval: Portfolio class #named: stamp: 'LMR 5/31/2023 23:43:45'!
named: aName
	
	^self new initializeNamed: aName.!

!methodRemoval: Account class #named: stamp: 'LMR 5/31/2023 23:44:07'!
named: aName
	
	^self new initializeNamed: aName.!
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:45:03'!
named: aName

	^self new initializeNamed: aName.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:45:14'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:45:14'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 5/31/2023 23:45:52'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:45:52'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:45:57' prior: 50622426!
initializeNamed: aName 
	
	name := aName.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:45:59'!
ERROR!
!XXX class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:46:05'!
of: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aPortfolio ! !
!XXX class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:46:09' prior: 50622439!
of: aPortfolio 
	
	^self new initializeOf: aPortfolio ! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:46:10'!
ERROR!

!classDefinition: #XXX category: 'Portfolio-Ejercicio' stamp: 'LMR 5/31/2023 23:46:36'!
Object subclass: #XXX
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!XXX methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:46:36'!
initializeOf: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!XXX methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:46:39' prior: 50622462!
initializeOf: aPortfolio 

	portfolio := aPortfolio.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:46:40'!
ERROR!
!XXX methodsFor: 'report' stamp: 'LMR 5/31/2023 23:46:50'!
report
	self shouldBeImplemented.! !
!XXX methodsFor: 'report' stamp: 'LMR 5/31/2023 23:46:58' prior: 50622476!
report
	
	^'Portfolio de la familia'! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:46:59'!
FAILURE!
!XXX methodsFor: 'report' stamp: 'LMR 5/31/2023 23:47:28' prior: 50622480!
report
	
	^OrderedCollection with: 'Portfolio de la familia'! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 5/31/2023 23:47:57'!
PASSED!
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 5/31/2023 23:54:30'!
test02PortfolioWithOneAccountHasBothNamesOnItsReport

	| aPortfolio myAccount expectedReport |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia'.

	self assert: (XXX of: aPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 5/31/2023 23:54:47' prior: 50622497!
test02PortfolioWithOneAccountHasBothNamesOnItsReport

	| aPortfolio myAccount expectedReport |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia'.

	self assert: (XXX of: aPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 5/31/2023 23:54:49'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:54:55'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:55:09' prior: 50622532!
named: aName
	
	^self new initializeNamed: aName! !

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 5/31/2023 23:55:10'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'LMR 5/31/2023 23:55:16'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:55:17'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:55:21' prior: 50622558!
initializeNamed: aName 

	name := aName.! !

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 5/31/2023 23:55:23'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:55:29'!
named: aString with: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:55:39' prior: 50622572!
named: aString with: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: anAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:55:45' prior: 50622582!
named: aName with: anAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aName with: anAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 5/31/2023 23:55:48' prior: 50622591!
named: aName with: anAccount 
	
	^self new initializeNamed: aName with: anAccount ! !

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 5/31/2023 23:55:49'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 5/31/2023 23:55:54'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:55:54'!
initializeNamed: aName with: anAccount 
	self shouldBeImplemented.
	name := aName.
	account := anAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'LMR 5/31/2023 23:56:15' prior: 50622617!
initializeNamed: aName with: anAccount

	name := aName.
	accounts := OrderedCollection with: anAccount.! !

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 5/31/2023 23:56:16'!
FAILURE!
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:02:08' prior: 50622488!
report
	
	
	portfolio accountsIsEmpty ifTrue: [^OrderedCollection with: portfolio name].
	^OrderedCollection with: 'Portfolio de la familia'! !
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:03:48' prior: 50622634!
report
	
	| report |
	report := OrderedCollection new.
	report add: portfolio name.
	report add: ''
	^report! !
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:06:59' prior: 50622641!
report
	
	| report |
	report := OrderedCollection new.
	portfolio fillXXXReport: report.
	^report! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:09:29'!
fillXXXReport: aXXXReport 
	
	accounts first fillReport: aXXXReport.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:09:50' prior: 50622653!
fillXXXReport: aXXXReport 
	
	accounts first fillXXXReport: aXXXReport.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:11:34' prior: 50622658!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: self.
	accounts first fillXXXReport: aXXXReport.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:11:40' prior: 50622663!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.
	accounts first fillXXXReport: aXXXReport.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:11:51'!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.! !
!XXX methodsFor: 'nil' stamp: 'LMR 6/1/2023 00:12:44'!
addNameToXXXReport: aName

	| a |
	a add: aName! !
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:13:21' prior: 50622647!
report
	
	| report2 |
	report2 := OrderedCollection new.
	portfolio fillXXXReport: report2.
	^report2! !

!classDefinition: #XXX category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:13:31'!
Object subclass: #XXX
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:13:30' prior: 50622684!
report
	
	report := OrderedCollection new.
	portfolio fillXXXReport: report.
	^report! !
!XXX methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:13:41' prior: 50622680!
addNameToXXXReport: aName

	report add: aName! !
!XXX methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:13:43' prior: 50622703!
addNameToXXXReport: aName

	report add: aName.! !

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:13:55'!
ERROR!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:13:55'!
ERROR!
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:14:09' prior: 50622697!
report
	
	report := OrderedCollection new.
	portfolio fillXXXReport: self.
	^report! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:14:13'!
ERROR!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:14:13'!
FAILURE!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:14:18'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:15:07' prior: 50622670!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.
	account isEmpty ifFalse: [accounts first fillXXXReport: aXXXReport.]! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:15:10'!
ERROR!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:15:10'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:15:34'!
ERROR!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:15:34'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:15:40'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'LMR 6/1/2023 00:16:13' prior: 50622431!
initializeNamed: aName 
	
	name := aName.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'initialization' stamp: 'LMR 6/1/2023 00:16:19' prior: 50622624!
initializeNamed: aName with: anAccount

	name := aName.
	accounts := OrderedCollection with: anAccount.
	parents := OrderedCollection new.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:16:26'!
ERROR!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:16:26'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:16:29'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:16:41'!
ERROR!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:16:41'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:16:43'!
ERROR!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:16:58'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:17:02' prior: 50622737!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.
	accounts isEmpty ifFalse: [accounts first fillXXXReport: aXXXReport.]! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:17:11'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:17:11'!
FAILURE!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:17:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:17:51' prior: 50622676!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: '   ' , name.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:17:55'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:17:55'!
PASSED!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:21:27' prior: 50622513!
test02PortfolioWithOneAccountHasBothNamesOnItsReport

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:22:00'!
test03aaaa

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 5/31/2023 23:54:47' prior: 50622844!
test02PortfolioWithOneAccountHasBothNamesOnItsReport

	| aPortfolio myAccount expectedReport |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia'.

	self assert: (XXX of: aPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:23:00'!
test04aaaa

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:24:12' prior: 50622874!
test03aaaa

	| familyPortfolio expectedReport childrenPortfolio |
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Portfolio de hijos'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:24:17'!
_test04aaaa

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !

!methodRemoval: TreeReportsTest #test04aaaa stamp: 'LMR 6/1/2023 00:24:17'!
test04aaaa

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:24:50'!
test03PortfolioWithOnePortfolioHasBothNamesOnItsReport

	| familyPortfolio expectedReport childrenPortfolio |
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Portfolio de hijos'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !

!methodRemoval: TreeReportsTest #test03aaaa stamp: 'LMR 6/1/2023 00:24:52'!
test03aaaa

	| familyPortfolio expectedReport childrenPortfolio |
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Portfolio de hijos'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. !

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:24:56'!
FAILURE!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:24:57'!
FAILURE!

Object subclass: #XXX
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #XXX category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:28:00'!
Object subclass: #XXX
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!XXX methodsFor: 'report' stamp: 'LMR 6/1/2023 00:28:13' prior: 50622720!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	portfolio fillXXXReport: self.
	^report! !
!XXX methodsFor: 'nil' stamp: 'LMR 6/1/2023 00:28:42'!
incrementIndentation

	indentationLevel := indentationLevel + 1.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:29:18' prior: 50622812!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.
	aXXXReport incrementIndentation.
	accounts isEmpty ifFalse: [accounts first fillXXXReport: aXXXReport.]! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:29:29' prior: 50622831!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.! !
!XXX methodsFor: 'add to report' stamp: 'LMR 6/1/2023 00:30:30' prior: 50622708!
addNameToXXXReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: aName.! !
!XXX methodsFor: 'add to report' stamp: 'LMR 6/1/2023 00:30:41' prior: 50623099!
addNameToXXXReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:30:46'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:30:46'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:30:46'!
PASSED!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:30:56' prior: 50622963!
_test04aaaa

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:33:09'!
test04PortfolioReportWorksRecursively

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !

!methodRemoval: TreeReportsTest #_test04aaaa stamp: 'LMR 6/1/2023 00:33:12'!
_test04aaaa

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. !

!testRun: #TreeReportsTest #test04PortfolioReportWorksRecursively stamp: 'LMR 6/1/2023 00:33:16'!
ERROR!

!testRun: #TreeReportsTest #test04PortfolioReportWorksRecursively stamp: 'LMR 6/1/2023 00:33:16'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 6/1/2023 00:33:21'!
named: aString with: aReceptiveAccount with: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount with: aReceptiveAccount3 ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:34:35'!
_test04PortfolioReportWorksRecursively

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !

!methodRemoval: TreeReportsTest #test04PortfolioReportWorksRecursively stamp: 'LMR 6/1/2023 00:34:35'!
test04PortfolioReportWorksRecursively

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:36:19'!
test04PortfolioWithManyAccountHasAllNamesOnItsReport

	| aPortfolio myAccount expectedReport johnsAccount |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia' with: '   Cuenta de Juan'.

	self assert: (XXX of: aPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:36:36' prior: 50623288!
test04PortfolioWithManyAccountHasAllNamesOnItsReport

	| aPortfolio myAccount expectedReport johnsAccount |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: johnsAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia' with: '   Cuenta de Juan'.

	self assert: (XXX of: aPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:36:37'!
ERROR!
!Portfolio class methodsFor: 'error handling' stamp: 'LMR 6/1/2023 00:36:45' overrides: 16902107!
error: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'instance creation' stamp: 'LMR 6/1/2023 00:37:29' prior: 50623219!
named: aName with: anAccount with: anotherAccount 
	
	^self new initializeNamed: aName with: anAccount with: anotherAccount ! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:37:37'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:37:37'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:37:37'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:37:37'!
ERROR!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:37:37'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:37:43'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:37:43'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name account anotherAccount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'LMR 6/1/2023 00:37:43'!
initializeNamed: aName with: anAccount with: anotherAccount 
	self shouldBeImplemented.
	name := aName.
	account := anAccount.
	anotherAccount_CHANGE_ME := anotherAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'LMR 6/1/2023 00:38:23' prior: 50623376!
initializeNamed: aName with: anAccount with: anotherAccount 
	
	name := aName.
	accounts := OrderedCollection with: anAccount with: anotherAccount.
	parents := OrderedCollection new.! !

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:38:24'!
FAILURE!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:40:52'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:41:09' prior: 50623085!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.
	aXXXReport incrementIndentation.
	accounts do: [:account | account fillXXXReport: aXXXReport.]! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:41:15'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:41:15'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:41:15'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:41:15'!
PASSED!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:42:18'!
test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !

!methodRemoval: TreeReportsTest #_test04PortfolioReportWorksRecursively stamp: 'LMR 6/1/2023 00:42:19'!
_test04PortfolioReportWorksRecursively

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:42:33'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:42:33'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:42:33'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:42:33'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 00:42:33'!
FAILURE!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 00:42:34'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:43:06' prior: 50623410!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToXXXReport: name.
	aXXXReport incrementIndentation.
	accounts do: [:account | account fillXXXReport: aXXXReport.].
	aXXXReport decrementIndentation.! !
!XXX methodsFor: 'indentation' stamp: 'LMR 6/1/2023 00:43:19'!
decrementIndentation

	indentationLevel := indentationLevel - 1.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:43:24'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:43:25'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:43:25'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:43:25'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 00:43:25'!
FAILURE!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 00:43:25'!
FAILURE!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 00:43:43' prior: 50623433!
test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (XXX of: familyPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 00:43:45'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 00:43:45'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:43:45'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 00:43:45'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 00:43:45'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 00:43:45'!
PASSED!

!classRenamed: #XXX as: #PortfolioStructure stamp: 'LMR 6/1/2023 00:44:40'!
Smalltalk renameClassNamed: #XXX as: #PortfolioStructure!
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:44:40' prior: 50623558!
test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '      Cuenta de Angeles'.

	self assert: (PortfolioStructure of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:44:40' prior: 50622903!
test02PortfolioWithOneAccountHasBothNamesOnItsReport

	| aPortfolio myAccount expectedReport |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia'.

	self assert: (PortfolioStructure of: aPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:44:40' prior: 50623020!
test03PortfolioWithOnePortfolioHasBothNamesOnItsReport

	| familyPortfolio expectedReport childrenPortfolio |
	childrenPortfolio := Portfolio named: 'Portfolio de hijos'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: childrenPortfolio.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Portfolio de hijos'.

	self assert: (PortfolioStructure of: familyPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:44:40' prior: 50623306!
test04PortfolioWithManyAccountHasAllNamesOnItsReport

	| aPortfolio myAccount expectedReport johnsAccount |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: johnsAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia' with: '   Cuenta de Juan'.

	self assert: (PortfolioStructure of: aPortfolio) report equals: expectedReport. ! !
!TreeReportsTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:44:40' prior: 50622367!
test01NewPortfolioOnlyHasItsNameOnItsReport

	| aPortfolio expectedReport |
	aPortfolio := Portfolio named: 'Portfolio de la familia'.

	expectedReport := OrderedCollection with: 'Portfolio de la familia'.

	self assert: (PortfolioStructure of: aPortfolio) report equals: expectedReport. ! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 00:46:32'!
addNameToReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:46:32' prior: 50623094!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToReport: name.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:46:32' prior: 50623519!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToReport: name.
	aXXXReport incrementIndentation.
	accounts do: [:account | account fillXXXReport: aXXXReport.].
	aXXXReport decrementIndentation.! !

!methodRemoval: PortfolioStructure #addNameToXXXReport: stamp: 'LMR 6/1/2023 00:46:32'!
addNameToXXXReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.!

Report subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:53:19'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:53:27'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'account report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:53:27' prior: 50623074!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	account fillXXXReport: self.
	^report! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:53:27' prior: 50622468!
initializeOf: aPortfolio 

	account := aPortfolio.! !

Report subclass: #PortfolioStructure
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:53:36'!
Report subclass: #PortfolioStructure
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #PortfolioStructure
	instanceVariableNames: 'account report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:55:26'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'account report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:55:32'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:55:32' prior: 50623783!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	portfolio fillXXXReport: self.
	^report! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:55:32' prior: 50623790!
initializeOf: aPortfolio 

	portfolio := aPortfolio.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:58:00' prior: 50623731!
fillXXXReport: aTreeReport 
	
	aTreeReport addNameToReport: name.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillXXXReport: aTreeReport.].
	aTreeReport decrementIndentation.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:58:10'!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameToReport: name.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillXXXReport: aTreeReport.].
	aTreeReport decrementIndentation.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 00:58:10'!
fillTreeReport: aXXXReport 
	
	aXXXReport addNameToReport: name.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:58:10' prior: 50623844!
fillXXXReport: aTreeReport 
	
	aTreeReport addNameToReport: name.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:58:10' prior: 50623832!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	portfolio fillTreeReport: self.
	^report! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 00:58:10' prior: 50623853!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameToReport: name.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.! !

!methodRemoval: Portfolio #fillXXXReport: stamp: 'LMR 6/1/2023 00:58:10'!
fillXXXReport: aTreeReport 
	
	aTreeReport addNameToReport: name.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.!

!methodRemoval: ReceptiveAccount #fillXXXReport: stamp: 'LMR 6/1/2023 00:58:11'!
fillXXXReport: aXXXReport 
	
	aXXXReport addNameToReport: name.!

Report subclass: #TreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:59:19'!
Report subclass: #TreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #TransactionsReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionsReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:59:37'!
Report subclass: #TransactionsReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TransactionsReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountSummary category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:59:48'!
TransactionsReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TransactionsReport subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #NetTransfer category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 00:59:52'!
TransactionsReport subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:00:15'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'account report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 01:00:15' prior: 50623878!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	account fillTreeReport: self.
	^report! !
!PortfolioStructure methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 01:00:15' prior: 50623839!
initializeOf: aPortfolio 

	account := aPortfolio.! !

Object subclass: #PortfolioStructure
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:00:29'!
Object subclass: #PortfolioStructure
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TreeReport subclass: #PortfolioStructure
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:00:48'!
TreeReport subclass: #PortfolioStructure
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:01:51' overrides: 50621947!
addToReportDepositOf: anAmount

	self subclassResponsibility! !
!TransactionsReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:01:52' overrides: 50621947!
addToReportDepositOf: anAmount

	self subclassResponsibility! !

!methodRemoval: Report #addToReportDepositOf: stamp: 'LMR 6/1/2023 01:01:52'!
addToReportDepositOf: anAmount

	self subclassResponsibility!

!methodRemoval: TreeReport #addToReportDepositOf: stamp: 'LMR 6/1/2023 01:02:06'!
addToReportDepositOf: anAmount

	self subclassResponsibility!
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:02:13' overrides: 50621925!
addToReportTransferDepositOf: anAmount

	self subclassResponsibility! !
!TransactionsReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:02:13' overrides: 50621925!
addToReportTransferDepositOf: anAmount

	self subclassResponsibility! !

!methodRemoval: Report #addToReportTransferDepositOf: stamp: 'LMR 6/1/2023 01:02:13'!
addToReportTransferDepositOf: anAmount

	self subclassResponsibility!
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:02:24' overrides: 50621936!
addToReportTransferWithdrawOf: anAmount

	self subclassResponsibility! !
!TransactionsReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:02:24' overrides: 50621936!
addToReportTransferWithdrawOf: anAmount

	self subclassResponsibility! !

!methodRemoval: Report #addToReportTransferWithdrawOf: stamp: 'LMR 6/1/2023 01:02:24'!
addToReportTransferWithdrawOf: anAmount

	self subclassResponsibility!
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:02:28' overrides: 50621942!
addToReportWithdrawOf: anAmount

	self subclassResponsibility! !
!TransactionsReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 01:02:29' overrides: 50621942!
addToReportWithdrawOf: anAmount

	self subclassResponsibility! !

!methodRemoval: Report #addToReportWithdrawOf: stamp: 'LMR 6/1/2023 01:02:29'!
addToReportWithdrawOf: anAmount

	self subclassResponsibility!

!methodRemoval: TreeReport #addToReportTransferDepositOf: stamp: 'LMR 6/1/2023 01:02:38'!
addToReportTransferDepositOf: anAmount

	self subclassResponsibility!

!methodRemoval: TreeReport #addToReportTransferWithdrawOf: stamp: 'LMR 6/1/2023 01:02:38'!
addToReportTransferWithdrawOf: anAmount

	self subclassResponsibility!

!methodRemoval: TreeReport #addToReportWithdrawOf: stamp: 'LMR 6/1/2023 01:02:39'!
addToReportWithdrawOf: anAmount

	self subclassResponsibility!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 01:02:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 01:02:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 01:02:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 01:02:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 01:02:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 01:02:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 01:02:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 01:02:48'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 01:02:49'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 01:02:50'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 01:03:17' prior: 50623862!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameToReport: name.! !
!Account methodsFor: 'reports' stamp: 'LMR 6/1/2023 01:03:27'!
fillTreeReport: aTreeReport

	self subclassResponsibility! !

----SNAPSHOT----(1 June 2023 01:05:51) CuisUniversity-5799.image priorSource: 9265631!

----QUIT----(1 June 2023 01:06:02) CuisUniversity-5799.image priorSource: 9363452!

----STARTUP---- (1 June 2023 01:16:21) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5799\windows64\CuisUniversity-5799.image!


!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:19:27'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 01:19:19'!
test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport

	| aPortfolio expectedReport |
	aPortfolio := Portfolio named: 'Portfolio de la familia'.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Balance = 0'.

	self assert: (TransactionTreeReport of: aPortfolio) report equals: expectedReport. ! !

TreeReport subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:19:42'!
TreeReport subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:19:55'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:20:03'!
ERROR!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:20:03'!
ERROR!
!TransactionTreeReport class methodsFor: 'instance creation' stamp: 'LMR 6/1/2023 01:20:08'!
of: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aPortfolio ! !
!TransactionTreeReport class methodsFor: 'instance creation' stamp: 'LMR 6/1/2023 01:20:13' prior: 50624323!
of: aPortfolio 
	
	^self new initializeOf: aPortfolio ! !

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:20:14'!
ERROR!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:20:26'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransactionTreeReport methodsFor: 'initialization' stamp: 'LMR 6/1/2023 01:20:26'!
initializeOf: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!TransactionTreeReport methodsFor: 'initialization' stamp: 'LMR 6/1/2023 01:20:30' prior: 50624349!
initializeOf: aPortfolio 

	portfolio := aPortfolio.! !

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:20:31'!
ERROR!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 01:20:41'!
report
	self shouldBeImplemented.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 01:21:29' prior: 50624363!
report
	
	^OrderedCollection with: portfolio name with: 'Balance = ' , portfolio balance.! !

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:21:31'!
ERROR!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 01:21:55' prior: 50624368!
report
	
	^OrderedCollection with: portfolio name with: 'Balance = ' , portfolio balance asString.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 01:22:00'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:22:01'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:22:01'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 01:22:01'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 01:22:01'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:22:01'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:22:01'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:23:20'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:23:20'!
FAILURE!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:26:02'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:26:06'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 01:26:10'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Account methodsFor: 'nil' stamp: 'LMR 6/1/2023 01:26:20' overrides: 16903442!
name

	^name! !

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:27:02'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:27:02'!
FAILURE!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 01:27:30' prior: 50624378!
report
	
	^OrderedCollection with: portfolio name with: '   Balance = ' , portfolio balance asString.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 01:27:32'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:27:32'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:27:32'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 01:27:32'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 01:27:33'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:27:33'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 01:27:37'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:27:37'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 01:27:37'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 01:27:37'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 01:27:38'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 01:27:38'!
PASSED!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 01:34:53'!
test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport

	| aPortfolio expectedReport myAccount |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 50 on: myAccount.
	aPortfolio := Portfolio named: 'Portfolio de la familia'.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia' with: '      Depósito por 100' with: '      Extracción por 50' with: '      Balance = 50' with: '   Balance = 0'.

	self assert: (TransactionTreeReport of: aPortfolio) report equals: expectedReport. ! !

----QUIT----(1 June 2023 01:35:09) CuisUniversity-5799.image priorSource: 9363540!

----STARTUP---- (1 June 2023 04:28:48) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5799\windows64\CuisUniversity-5799.image!


!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:28:57'!
FAILURE!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:30:45'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:30:46'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:30:48'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: 'portfolio report indentationLevel account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:30:42' prior: 50624468!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	account fillTreeReport: self.
	^report! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:31:07' prior: 50624581!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	portfolio fillTreeReport: self.
	^report! !

Object subclass: #TransactionTreeReport
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:31:35'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: 'portfolio report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:31:40'!
Object subclass: #TransactionTreeReport
	instanceVariableNames: 'account report indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransactionTreeReport methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 04:31:41' prior: 50624588!
report
	
	report := OrderedCollection new.
	indentationLevel := 0.
	account fillTreeReport: self.
	^report! !
!TransactionTreeReport methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 04:31:41' prior: 50624355!
initializeOf: aPortfolio 

	account := aPortfolio.! !

TreeReport subclass: #TransactionTreeReport
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:33:17'!
TreeReport subclass: #TransactionTreeReport
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TreeReport subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioStructure category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:33:29'!
TreeReport subclass: #PortfolioStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TreeReport subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransactionTreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:33:32'!
TreeReport subclass: #TransactionTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Report subclass: #TreeReport
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TreeReport category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 04:33:36'!
Report subclass: #TreeReport
	instanceVariableNames: 'indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TreeReport methodsFor: 'indentation' stamp: 'LMR 6/1/2023 04:33:44'!
decrementIndentation

	indentationLevel := indentationLevel - 1.! !

!methodRemoval: PortfolioStructure #decrementIndentation stamp: 'LMR 6/1/2023 04:33:44'!
decrementIndentation

	indentationLevel := indentationLevel - 1.!
!TreeReport methodsFor: 'indentation' stamp: 'LMR 6/1/2023 04:33:48'!
incrementIndentation

	indentationLevel := indentationLevel + 1.! !

!methodRemoval: PortfolioStructure #incrementIndentation stamp: 'LMR 6/1/2023 04:33:48'!
incrementIndentation

	indentationLevel := indentationLevel + 1.!
!TreeReport methodsFor: 'nil' stamp: 'LMR 6/1/2023 04:34:22'!
addNameToReport: aName

	self subclassResponsibility.! !
!TreeReport methodsFor: 'initialization' stamp: 'LMR 6/1/2023 04:35:07' overrides: 50621931!
initializeOf: aPortfolio 

	account := aPortfolio.! !

!methodRemoval: PortfolioStructure #initializeOf: stamp: 'LMR 6/1/2023 04:35:07'!
initializeOf: aPortfolio 

	account := aPortfolio.!

!methodRemoval: TransactionTreeReport #initializeOf: stamp: 'LMR 6/1/2023 04:35:17'!
initializeOf: aPortfolio 

	account := aPortfolio.!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:36:33' overrides: 50624701!
addNameToReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.! !

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:36:48'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:36:48'!
FAILURE!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 04:38:25' prior: 50624521!
test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport

	| aPortfolio expectedReport myAccount |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 50 on: myAccount.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia' with: '      Depósito por 100' with: '      Extracción por 50' with: '      Balance = 50' with: '   Balance = 0'.

	self assert: (TransactionTreeReport of: aPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:38:27'!
FAILURE!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:39:08'!
addToReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.! !

!methodRemoval: TransactionTreeReport #addNameToReport: stamp: 'LMR 6/1/2023 04:39:08'!
addNameToReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:39:31' prior: 50624764!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount.! !
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 04:40:24'!
addToReport: aName

	self subclassResponsibility.! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 04:40:25' overrides: 50624788!
addToReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 04:40:25' prior: 50624249 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addToReport: name.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 04:40:25' prior: 50623885 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addToReport: name.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.! !

!methodRemoval: TreeReport #addNameToReport: stamp: 'LMR 6/1/2023 04:40:25'!
addNameToReport: aName

	self subclassResponsibility.!

!methodRemoval: PortfolioStructure #addNameToReport: stamp: 'LMR 6/1/2023 04:40:25'!
addNameToReport: aName

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aName.!
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 04:40:32' prior: 50624793 overrides: 50624788!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount.! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 04:40:36' prior: 50624830 overrides: 50624788!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:40:46' prior: 50624780 overrides: 50624788!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 04:41:06' prior: 50624802 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addToReport: self.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 04:43:35' prior: 50624848 overrides: 50624788!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.
	report addAll: (AccountSummary of: anAccount) report.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:43:40'!
FAILURE!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 04:43:40'!
FAILURE!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 04:43:40'!
FAILURE!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 04:43:40'!
FAILURE!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 04:43:40'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 04:43:40'!
ERROR!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:43:40'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:43:49'!
FAILURE!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:44:42'!
FAILURE!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 04:44:42'!
FAILURE!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 04:44:42'!
FAILURE!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 04:44:42'!
FAILURE!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 04:44:42'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 04:44:42'!
ERROR!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:44:43'!
ERROR!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:44:44'!
FAILURE!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:45:11'!
FAILURE!

accounts do: [:account | account fillTreeReport: aTreeReport.]!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:49:15'!
FAILURE!

a PortfolioStructure!

a PortfolioStructure!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 04:52:48' prior: 50624808 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addToReport: self.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 04:52:56'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 04:52:56'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 04:52:57'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 04:52:57'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 04:52:57'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 04:52:57'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:52:57'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 04:53:01'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 04:53:12'!
FAILURE!
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:02:42'!
addNameOf: aName

	self subclassResponsibility.! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:02:42' overrides: 50624994!
addNameOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 05:02:42' overrides: 50624994!
addNameOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.
	report addAll: (AccountSummary of: anAccount) report.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 05:02:42' prior: 50624948 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 05:02:42' prior: 50624857 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.! !

!methodRemoval: TreeReport #addToReport: stamp: 'LMR 6/1/2023 05:02:42'!
addToReport: aName

	self subclassResponsibility.!

!methodRemoval: PortfolioStructure #addToReport: stamp: 'LMR 6/1/2023 05:02:42'!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.!

!methodRemoval: TransactionTreeReport #addToReport: stamp: 'LMR 6/1/2023 05:02:42'!
addToReport: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.
	report addAll: (AccountSummary of: anAccount) report.!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 05:03:10' prior: 50625008 overrides: 50624994!
addNameOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 05:09:13'!
addTransactionsOf: anAccount

	| indentation indentedSummary |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	indentedSummary := (AccountSummary of: anAccount) report collect: [:reportLine | indentation , reportLine].
	report addAll: indentedSummary.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:09:32'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:09:33'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:09:33'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:09:33'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:09:33'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:09:33'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:09:33'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:09:38'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:09:50'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:11:12' prior: 50625019 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport decrementIndentation.
	aTreeReport addBalanceOf: self.! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:11:44'!
addBalanceOf: anAccount

	! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 05:12:17'!
addBalanceOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount balance.! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:12:30'!
addTransactionsOf: anAccount! !
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:13:02'!
addBalanceOf: anAccount

	self subclassResponsibility ! !
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:13:19'!
addTransactionsOf: aName

	self subclassResponsibility.! !
!TreeReport methodsFor: 'nil' stamp: 'LMR 6/1/2023 05:13:42' overrides: 50621952!
report

	self subclassResponsibility.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 05:15:19' prior: 50625129 overrides: 50625142!
addBalanceOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , 'Balance = ' , anAccount balance asString.! !

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:17:31'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:17:31'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:18:05' prior: 50625115 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport addBalanceOf: self.
	aTreeReport decrementIndentation.! !

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:18:12'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:18:15'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:18:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:19:36' prior: 50625029 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport addTransactionsOf: self.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:19:41'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:19:41'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:19:41'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:19:41'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:19:41'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:19:41'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:19:41'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:19:41'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:20:23' prior: 50625199 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport incrementIndentation.
	aTreeReport addTransactionsOf: self.
	aTreeReport decrementIndentation.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:20:28'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:20:29'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:20:29'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:20:29'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:20:29'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:20:29'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:20:29'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:20:29'!
FAILURE!
!AccountSummary methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:24:43' prior: 50621262 overrides: 50624065!
addToReportWithdrawOf: anAmount
	
	^report add: 'Extracción por ', anAmount asString
! !
!AccountSummary methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:24:47' prior: 50621254 overrides: 50624048!
addToReportTransferWithdrawOf: anAmount
	
	^report add: 'Salida por transferencia de ', anAmount asString
! !
!AccountSummary methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:24:51' prior: 50621246 overrides: 50624031!
addToReportTransferDepositOf: anAmount
	
	^report add: 'Entrada por transferencia de ', anAmount asString
! !
!AccountSummary methodsFor: 'add to report' stamp: 'LMR 6/1/2023 05:24:55' prior: 50621269 overrides: 50624011!
addToReportDepositOf: anAmount
	
	^report add: 'Depósito por ', anAmount asString
! !
!ReportsTest methodsFor: 'test' stamp: 'LMR 6/1/2023 05:25:50' prior: 50622091!
test02AccountWithOneDepositHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Depósito por 100' with:'Balance = 100'.

	self assert: (AccountSummary of: anAccount) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'LMR 6/1/2023 05:25:56' prior: 50622113!
test03AccountWithOneWithdrawHasItInItsAccountSummary

	| anAccount expectedSummary |
	anAccount := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	expectedSummary := OrderedCollection with: 'Extracción por 100' with: 'Balance = -100'.

	self assert: (AccountSummary of: anAccount) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'LMR 6/1/2023 05:26:00' prior: 50621962!
test04AccountWithOneTransferDepositHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.

	self assert: (AccountSummary of: transfereeAccount ) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'LMR 6/1/2023 05:26:06' prior: 50622073!
test05AccountWithOneTransferWithdrawHasItInItsAccountSummary

	| expectedSummary transfereeAccount transfererAccount |
	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.
	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	expectedSummary := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.

	self assert: (AccountSummary of: transfererAccount ) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'LMR 6/1/2023 05:26:18' prior: 50621980!
test06AccountWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 10 on: accountOne.
	Transfer register: 50 from: accountOne to: accountTwo.
	Transfer register: 30 from: accountTwo to: accountOne.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100'.
	expectedSummary add: 'Extracción por 10'.
	expectedSummary add: 'Salida por transferencia de 50'.
	expectedSummary add: 'Entrada por transferencia de 30'.
	expectedSummary add: 'Balance = 70'.

	self assert: (AccountSummary of: accountOne) report equals: expectedSummary ! !
!ReportsTest methodsFor: 'test' stamp: 'LMR 6/1/2023 05:26:28' prior: 50622033!
test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary

	| expectedSummary accountTwo accountOne aPorfolio |
	accountOne := ReceptiveAccount new.
	accountTwo := ReceptiveAccount new.
	Deposit register: 100 on: accountOne.
	Withdraw register: 50 on: accountOne.
	Deposit register: 70 on: accountTwo.
	Withdraw register: 10 on: accountTwo.
	
	aPorfolio := Portfolio new.
	aPorfolio add: accountOne.
	aPorfolio add: accountTwo.
	
	expectedSummary := OrderedCollection new.
	expectedSummary add: 'Depósito por 100'.
	expectedSummary add: 'Extracción por 50'.
	expectedSummary add: 'Depósito por 70'.
	expectedSummary add: 'Extracción por 10'.
	expectedSummary add: 'Balance = 110'.

	self assert: (AccountSummary of: aPorfolio) report equals: expectedSummary ! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 05:26:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 05:26:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 05:26:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 05:26:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 05:26:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:26:40'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:26:41'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:26:42'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:26:42'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:26:42'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:26:42'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:26:42'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:26:42'!
FAILURE!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 05:27:32' prior: 50624737!
test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport

	| aPortfolio expectedReport myAccount |
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	Deposit register: 100 on: myAccount.
	Withdraw register: 50 on: myAccount.
	aPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount.

	expectedReport := OrderedCollection with: 'Portfolio de la familia' with: '   Cuenta Mia' with: '      Depósito por 100' with: '      Extracción por 50' with: '      Balance = 50' with: '   Balance = 50'.

	self assert: (TransactionTreeReport of: aPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:27:34'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:28:14' prior: 50625175 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport addBalanceOf: self.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:28:20'!
PASSED!
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 05:29:56'!
test08PortfolioTransactionTreeReportWorksRecursively

	! !
!TreeReportsTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 05:40:04' prior: 50625689!
test08PortfolioTransactionTreeReportWorksRecursively

	| familyPortfolio myAccount expectedReport angiesAccount childrenPortfolio johnsAccount anotherAccount |
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta Mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPortfolio.
	anotherAccount := ReceptiveAccount new.

	Deposit register: 100 on: myAccount.
	Withdraw register: 20 on: myAccount.
	Deposit register: 30 on: johnsAccount.
	Withdraw register: 15 on: johnsAccount.
	Transfer register: 10 from: angiesAccount to: anotherAccount.

	expectedReport := OrderedCollection new.
	expectedReport add: 'Portfolio de la familia'.
	expectedReport add: '   Cuenta Mia'.
	expectedReport add: '      Depósito por 100'.
	expectedReport add: '      Extracción por 20'.
	expectedReport add: '      Balance = 80'.
	expectedReport add: '   Portfolio de hijos'.
	expectedReport add: '      Cuenta de Juan'.
	expectedReport add: '         Depósito por 30'.
	expectedReport add: '         Extracción por 15'.
	expectedReport add: '         Balance = 15'.
	expectedReport add: '      Cuenta de Angeles'.
	expectedReport add: '         Salida por transferencia de 10'.
	expectedReport add: '         Balance = -10'.
	expectedReport add: '      Balance = 5'.
	expectedReport add: '   Balance = 85'.
	
	self assert: (TransactionTreeReport of: familyPortfolio) report equals: expectedReport. ! !

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 05:40:07'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:40:32' prior: 50625652 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport incrementIndentation.
	accounts do: [:account | account fillTreeReport: aTreeReport.].
	aTreeReport addBalanceOf: self.
	aTreeReport decrementIndentation.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 05:40:36'!
PASSED!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 05:42:14' prior: 50625065 overrides: 50625147!
addTransactionsOf: anAccount

	| indentation indentedSummary |
	indentation := ''.
	indentationLevel+1 timesRepeat: [indentation := indentation , '   '].
	indentedSummary := (AccountSummary of: anAccount) report collect: [:reportLine | indentation , reportLine].
	report addAll: indentedSummary.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:42:24' prior: 50625239 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addNameOf: self.
	aTreeReport addTransactionsOf: self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 05:42:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 05:42:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 05:42:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 05:42:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 05:42:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:42:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:42:37'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:42:38'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:42:39'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:42:39'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:42:39'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:42:39'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 05:42:39'!
PASSED!

----SNAPSHOT----(1 June 2023 05:42:43) CuisUniversity-5799.image priorSource: 9372535!
!Behavior method!
fillTreeReport: aTreeReport
	#_coverageTracker4445906_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4445906_
		cover: (33 to: 43)
		declaredAt: (17 to: 27)
		by: aTreeReport.
	#_coverageTracker4445906_
		coverAll:
			{45 to: 54}
		evaluating: [
			receiver1 addNameOf:
				(#_coverageTracker4445906_
					coverAll:
						{56 to: 59}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addNameOf:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4445906_
		cover: (63 to: 73)
		declaredAt: (17 to: 27)
		by: aTreeReport.
	#_coverageTracker4445906_
		coverAll:
			{75 to: 92}
		evaluating: [
			receiver2 addTransactionsOf:
				(#_coverageTracker4445906_
					coverAll:
						{94 to: 97}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addTransactionsOf:
		to: receiver2 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker4446267_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4446267_
		cover: (24 to: 30)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker4446267_
		coverAll:
			{32 to: 61}
		evaluating: [
			receiver2 addToReportTransferWithdrawOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker4446267_
					coverAll:
						{63 to: 66}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4446267_
					coverAll:
						{68 to: 72}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #addToReportTransferWithdrawOf:
		to: receiver2 ] value.! !
!Behavior method!
value
	#_coverageTracker4446328_ markAsExecuted.
	^ #_coverageTracker4446328_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: value.! !
!Behavior method!
report
	#_coverageTracker4446380_ markAsExecuted.
	#_coverageTracker4446380_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker4446380_
				coverAll:
					{21 to: 37}
				by: OrderedCollection.
			#_coverageTracker4446380_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker4446380_
		cover: (45 to: 60)
		declaredAt: (45 to: 60)
		by:
			(indentationLevel _ #_coverageTracker4446380_
				coverAll:
					{65 to: 65}
				byLiteralOrPseudoVariable: 0).
	[ | receiver2 |
	receiver2 _ #_coverageTracker4446380_
		cover: (69 to: 75)
		declaredAt: (69 to: 75)
		by: account.
	#_coverageTracker4446380_
		coverAll:
			{77 to: 91}
		evaluating: [
			receiver2 fillTreeReport:
				(#_coverageTracker4446380_
					coverAll:
						{93 to: 96}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillTreeReport:
		to: receiver2 ] value.
	^ #_coverageTracker4446380_
		cover: (101 to: 106)
		declaredAt: (11 to: 16)
		by: report.! !
!Behavior method!
with: anAccount
	#_coverageTracker4446429_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker4446429_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4446429_
		coverAll:
			{25 to: 27}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker4446429_
		coverAll:
			{32 to: 35}
		evaluating: [
			receiver2 add:
				(#_coverageTracker4446429_
					cover: (37 to: 45)
					declaredAt: (7 to: 15)
					by: anAccount) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker4446429_
		coverAll:
			{50 to: 57}
		evaluating: [ receiver3 yourself ]
		thatSends: #yourself
		to: receiver3 ] value ] value.! !
!Behavior method!
initializeOn: anAccount fromTransfer: aTransfer
	#_coverageTracker4446492_ markAsExecuted.
	#_coverageTracker4446492_
		cover: (51 to: 60)
		declaredAt: (51 to: 60)
		by:
			(myTransfer _ #_coverageTracker4446492_
				cover: (65 to: 73)
				declaredAt: (39 to: 47)
				by: aTransfer).
	[ | receiver1 |
	receiver1 _ #_coverageTracker4446492_
		cover: (77 to: 85)
		declaredAt: (15 to: 23)
		by: anAccount.
	#_coverageTracker4446492_
		coverAll:
			{87 to: 95}
		evaluating: [
			receiver1 register:
				(#_coverageTracker4446492_
					coverAll:
						{97 to: 100}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #register:
		to: receiver1 ] value.! !
!Behavior method!
initializeOf: anAccount
	#_coverageTracker4446526_ markAsExecuted.
	#_coverageTracker4446526_
		cover: (29 to: 35)
		declaredAt: (29 to: 35)
		by:
			(account _ #_coverageTracker4446526_
				cover: (40 to: 48)
				declaredAt: (15 to: 23)
				by: anAccount).! !
!Behavior method!
addBalanceOf: anAccount
	#_coverageTracker4446571_ markAsExecuted.! !
!Behavior method!
report
	#_coverageTracker4446614_ markAsExecuted.
	#_coverageTracker4446614_
		cover: (10 to: 15)
		declaredAt: (10 to: 15)
		by:
			(report _ #_coverageTracker4446614_
				coverAll:
					{20 to: 20}
				byLiteralOrPseudoVariable: 0).
	[ | receiver1 |
	receiver1 _ #_coverageTracker4446614_
		cover: (24 to: 30)
		declaredAt: (24 to: 30)
		by: account.
	#_coverageTracker4446614_
		coverAll:
			{32 to: 42}
		evaluating: [
			receiver1 fillReport:
				(#_coverageTracker4446614_
					coverAll:
						{44 to: 47}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillReport:
		to: receiver1 ] value.
	^ #_coverageTracker4446614_
		cover: (52 to: 57)
		declaredAt: (10 to: 15)
		by: report.! !
!Behavior method!
anyRootParentIsComposedBy: accountToAdd
	#_coverageTracker4446665_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4446665_
		coverAll:
			{44 to: 47}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4446665_
		coverAll:
			{49 to: 59}
		evaluating: [ receiver1 rootParents ]
		thatSends: #rootParents
		to: receiver1 ] value.
	#_coverageTracker4446665_
		coverAll:
			{61 to: 71}
		evaluating: [
			receiver3 anySatisfy: [ :aParent |
				[ | receiver2 |
				receiver2 _ #_coverageTracker4446665_
					cover: (86 to: 92)
					declaredAt: (76 to: 82)
					by: aParent.
				#_coverageTracker4446665_
					coverAll:
						{94 to: 106}
					evaluating: [
						receiver2 isComposedBy:
							(#_coverageTracker4446665_
								cover: (108 to: 119)
								declaredAt: (28 to: 39)
								by: accountToAdd) ]
					thatSends: #isComposedBy:
					to: receiver2 ] value ]]
		thatSends: #anySatisfy:
		to: receiver3 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker4446716_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4446716_
		cover: (23 to: 29)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker4446716_
		coverAll:
			{31 to: 52}
		evaluating: [
			receiver2 addToReportWithdrawOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker4446716_
					coverAll:
						{54 to: 57}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4446716_
					coverAll:
						{59 to: 63}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #addToReportWithdrawOf:
		to: receiver2 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker4446757_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4446757_
		cover: (25 to: 32)
		declaredAt: (25 to: 32)
		by: accounts.
	#_coverageTracker4446757_
		coverAll:
			{34 to: 36}
		evaluating: [
			receiver2 do: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker4446757_
					cover: (51 to: 59)
					declaredAt: (40 to: 48)
					by: anAccount.
				#_coverageTracker4446757_
					coverAll:
						{61 to: 71}
					evaluating: [
						receiver1 fillReport:
							(#_coverageTracker4446757_
								cover: (73 to: 79)
								declaredAt: (13 to: 19)
								by: aReport) ]
					thatSends: #fillReport:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
addToReportBalanceOf: anAmount
	#_coverageTracker4446805_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker4446805_
		cover: (36 to: 41)
		declaredAt: (36 to: 41)
		by: report.
	#_coverageTracker4446805_
		coverAll:
			{43 to: 46}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker4446805_
					coverAll:
						{48 to: 59}
					byLiteralOrPseudoVariable: 'Balance = '.
				#_coverageTracker4446805_
					coverAll:
						{60 to: 60}
					evaluating: [
						receiver2 ,
							[ | receiver1 |
							receiver1 _ #_coverageTracker4446805_
								cover: (62 to: 69)
								declaredAt: (23 to: 30)
								by: anAmount.
							#_coverageTracker4446805_
								coverAll:
									{71 to: 78}
								evaluating: [ receiver1 asString ]
								thatSends: #asString
								to: receiver1 ] value ]
					thatSends: #,
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker4446848_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4446848_
		cover: (23 to: 34)
		declaredAt: (23 to: 34)
		by: transactions.
	#_coverageTracker4446848_
		coverAll:
			{36 to: 38}
		evaluating: [
			receiver2 do: [ :transaction |
				[ | receiver1 |
				receiver1 _ #_coverageTracker4446848_
					cover: (55 to: 65)
					declaredAt: (42 to: 52)
					by: transaction.
				#_coverageTracker4446848_
					coverAll:
						{67 to: 77}
					evaluating: [
						receiver1 fillReport:
							(#_coverageTracker4446848_
								cover: (79 to: 85)
								declaredAt: (13 to: 19)
								by: aReport) ]
					thatSends: #fillReport:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
incrementIndentation
	#_coverageTracker4446900_ markAsExecuted.
	#_coverageTracker4446900_
		cover: (44 to: 59)
		declaredAt: (24 to: 39)
		by:
			(indentationLevel _ [ | receiver1 |
			receiver1 _ #_coverageTracker4446900_
				cover: (24 to: 39)
				declaredAt: (24 to: 39)
				by: indentationLevel.
			#_coverageTracker4446900_
				coverAll:
					{61 to: 61}
				evaluating: [
					receiver1 +
						(#_coverageTracker4446900_
							coverAll:
								{63 to: 63}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
initializeOn: anAccount fromTransfer: aTransfer
	#_coverageTracker4446948_ markAsExecuted.
	#_coverageTracker4446948_
		cover: (51 to: 60)
		declaredAt: (51 to: 60)
		by:
			(myTransfer _ #_coverageTracker4446948_
				cover: (65 to: 73)
				declaredAt: (39 to: 47)
				by: aTransfer).
	[ | receiver1 |
	receiver1 _ #_coverageTracker4446948_
		cover: (77 to: 85)
		declaredAt: (15 to: 23)
		by: anAccount.
	#_coverageTracker4446948_
		coverAll:
			{87 to: 95}
		evaluating: [
			receiver1 register:
				(#_coverageTracker4446948_
					coverAll:
						{97 to: 100}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #register:
		to: receiver1 ] value.! !
!Behavior method!
addToReportTransferWithdrawOf: anAmount
	#_coverageTracker4446989_ markAsExecuted.
	#_coverageTracker4446989_
		cover: (54 to: 59)
		declaredAt: (44 to: 49)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker4446989_
				cover: (44 to: 49)
				declaredAt: (44 to: 49)
				by: report.
			#_coverageTracker4446989_
				coverAll:
					{61 to: 61}
				evaluating: [
					receiver1 -
						(#_coverageTracker4446989_
							cover: (63 to: 70)
							declaredAt: (32 to: 39)
							by: anAmount) ]
				thatSends: #-
				to: receiver1 ] value).! !
!Behavior method!
isComposedBy: anAccount
	#_coverageTracker4447045_ markAsExecuted.
	^ [ | receiver6 |
	receiver6 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4447045_
		coverAll:
			{29 to: 32}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447045_
		coverAll:
			{34 to: 34}
		evaluating: [
			receiver1 =
				(#_coverageTracker4447045_
					cover: (36 to: 44)
					declaredAt: (15 to: 23)
					by: anAccount) ]
		thatSends: #=
		to: receiver1 ] value.
	#_coverageTracker4447045_
		coverAll:
			{46 to: 48}
		evaluating: [
			receiver6 or: [
				[ | receiver5 |
				receiver5 _ #_coverageTracker4447045_
					cover: (52 to: 59)
					declaredAt: (52 to: 59)
					by: accounts.
				#_coverageTracker4447045_
					coverAll:
						{61 to: 71}
					evaluating: [
						receiver5 anySatisfy: [ :composedAccount |
							[ | receiver4 |
							receiver4 _ [ | receiver2 |
							receiver2 _ #_coverageTracker4447045_
								cover: (95 to: 109)
								declaredAt: (76 to: 90)
								by: composedAccount.
							#_coverageTracker4447045_
								coverAll:
									{111 to: 123}
								evaluating: [
									receiver2 isComposedBy:
										(#_coverageTracker4447045_
											cover: (125 to: 133)
											declaredAt: (15 to: 23)
											by: anAccount) ]
								thatSends: #isComposedBy:
								to: receiver2 ] value.
							#_coverageTracker4447045_
								coverAll:
									{136 to: 138}
								evaluating: [
									receiver4 or: [
										[ | receiver3 |
										receiver3 _ #_coverageTracker4447045_
											cover: (142 to: 150)
											declaredAt: (15 to: 23)
											by: anAccount.
										#_coverageTracker4447045_
											coverAll:
												{152 to: 164}
											evaluating: [
												receiver3 isComposedBy:
													(#_coverageTracker4447045_
														cover: (166 to: 180)
														declaredAt: (76 to: 90)
														by: composedAccount) ]
											thatSends: #isComposedBy:
											to: receiver3 ] value ]]
								thatSends: #or:
								to: receiver4 ] value ]]
					thatSends: #anySatisfy:
					to: receiver5 ] value ]]
		thatSends: #or:
		to: receiver6 ] value.! !
!Behavior method!
initializeNamed: aName with: anAccount with: anotherAccount
	#_coverageTracker4447081_ markAsExecuted.
	#_coverageTracker4447081_
		cover: (65 to: 68)
		declaredAt: (65 to: 68)
		by:
			(name _ #_coverageTracker4447081_
				cover: (73 to: 77)
				declaredAt: (18 to: 22)
				by: aName).
	#_coverageTracker4447081_
		cover: (81 to: 88)
		declaredAt: (81 to: 88)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker4447081_
				coverAll:
					{93 to: 109}
				by: OrderedCollection.
			#_coverageTracker4447081_
				coverAll:
					{111 to: 115. 127 to: 131}
				evaluating: [
					receiver1
						with:
							(#_coverageTracker4447081_
								cover: (117 to: 125)
								declaredAt: (30 to: 38)
								by: anAccount)
						with:
							(#_coverageTracker4447081_
								cover: (133 to: 146)
								declaredAt: (46 to: 59)
								by: anotherAccount) ]
				thatSends: #with:with:
				to: receiver1 ] value).
	#_coverageTracker4447081_
		cover: (150 to: 156)
		declaredAt: (150 to: 156)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker4447081_
				coverAll:
					{161 to: 177}
				by: OrderedCollection.
			#_coverageTracker4447081_
				coverAll:
					{179 to: 181}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
initializeNamed: aName
	#_coverageTracker4447146_ markAsExecuted.
	#_coverageTracker4447146_
		cover: (28 to: 31)
		declaredAt: (28 to: 31)
		by:
			(name _ #_coverageTracker4447146_
				cover: (36 to: 40)
				declaredAt: (18 to: 22)
				by: aName).
	#_coverageTracker4447146_
		cover: (44 to: 51)
		declaredAt: (44 to: 51)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker4447146_
				coverAll:
					{56 to: 72}
				by: OrderedCollection.
			#_coverageTracker4447146_
				coverAll:
					{74 to: 76}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker4447146_
		cover: (80 to: 86)
		declaredAt: (80 to: 86)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker4447146_
				coverAll:
					{91 to: 107}
				by: OrderedCollection.
			#_coverageTracker4447146_
				coverAll:
					{109 to: 111}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
value
	#_coverageTracker4447189_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4447189_
		cover: (11 to: 20)
		declaredAt: (11 to: 20)
		by: myTransfer.
	#_coverageTracker4447189_
		coverAll:
			{22 to: 26}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !
!Behavior method!
withdraw
	#_coverageTracker4447224_ markAsExecuted.
	^ #_coverageTracker4447224_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: withdraw.! !
!Behavior method!
error: aRenameMe1
	#_coverageTracker4447265_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4447265_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447265_
		coverAll:
			{26 to: 44}
		evaluating: [ receiver1 shouldBeImplemented ]
		thatSends: #shouldBeImplemented
		to: receiver1 ] value.! !
!Behavior method!
initializeFor: aValue
	#_coverageTracker4447300_ markAsExecuted.
	#_coverageTracker4447300_
		cover: (25 to: 29)
		declaredAt: (25 to: 29)
		by:
			(value _ #_coverageTracker4447300_
				cover: (34 to: 39)
				declaredAt: (16 to: 21)
				by: aValue).! !
!Behavior method!
value
	#_coverageTracker4447343_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4447343_
		cover: (11 to: 20)
		declaredAt: (11 to: 20)
		by: myTransfer.
	#_coverageTracker4447343_
		coverAll:
			{22 to: 26}
		evaluating: [ receiver1 value ]
		thatSends: #value
		to: receiver1 ] value.! !
!Behavior method!
addNameOf: anAccount
	| indentation |
	#_coverageTracker4447380_ markAsExecuted.
	#_coverageTracker4447380_
		cover: (41 to: 51)
		declaredAt: (26 to: 36)
		by:
			(indentation _ #_coverageTracker4447380_
				coverAll:
					{56 to: 57}
				byLiteralOrPseudoVariable: '').
	[ | receiver2 |
	receiver2 _ #_coverageTracker4447380_
		cover: (61 to: 76)
		declaredAt: (61 to: 76)
		by: indentationLevel.
	#_coverageTracker4447380_
		coverAll:
			{78 to: 89}
		evaluating: [
			receiver2 timesRepeat: [
				#_coverageTracker4447380_
					cover: (107 to: 117)
					declaredAt: (26 to: 36)
					by:
						(indentation _ [ | receiver1 |
						receiver1 _ #_coverageTracker4447380_
							cover: (92 to: 102)
							declaredAt: (26 to: 36)
							by: indentation.
						#_coverageTracker4447380_
							coverAll:
								{119 to: 119}
							evaluating: [
								receiver1 ,
									(#_coverageTracker4447380_
										coverAll:
											{121 to: 125}
										byLiteralOrPseudoVariable: '   ') ]
							thatSends: #,
							to: receiver1 ] value) ]]
		thatSends: #timesRepeat:
		to: receiver2 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker4447380_
		cover: (130 to: 135)
		declaredAt: (130 to: 135)
		by: report.
	#_coverageTracker4447380_
		coverAll:
			{137 to: 140}
		evaluating: [
			receiver5 add:
				[ | receiver4 |
				receiver4 _ #_coverageTracker4447380_
					cover: (142 to: 152)
					declaredAt: (26 to: 36)
					by: indentation.
				#_coverageTracker4447380_
					coverAll:
						{154 to: 154}
					evaluating: [
						receiver4 ,
							[ | receiver3 |
							receiver3 _ #_coverageTracker4447380_
								cover: (156 to: 164)
								declaredAt: (12 to: 20)
								by: anAccount.
							#_coverageTracker4447380_
								coverAll:
									{166 to: 169}
								evaluating: [ receiver3 name ]
								thatSends: #name
								to: receiver3 ] value ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
transfer
	#_coverageTracker4447433_ markAsExecuted.
	^ #_coverageTracker4447433_
		cover: (13 to: 22)
		declaredAt: (13 to: 22)
		by: myTransfer.! !
!Behavior method!
registerOn: anAccount fromTransfer: aTransfer
	#_coverageTracker4447475_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4447475_
		coverAll:
			{51 to: 54}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447475_
		coverAll:
			{56 to: 58}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4447475_
		coverAll:
			{60 to: 72. 84 to: 96}
		evaluating: [
			receiver2
				initializeOn:
					(#_coverageTracker4447475_
						cover: (74 to: 82)
						declaredAt: (13 to: 21)
						by: anAccount)
				fromTransfer:
					(#_coverageTracker4447475_
						cover: (98 to: 106)
						declaredAt: (37 to: 45)
						by: aTransfer) ]
		thatSends: #initializeOn:fromTransfer:
		to: receiver2 ] value.! !
!Behavior method!
accountsIncludes: anAccount
	#_coverageTracker4447523_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4447523_
		cover: (32 to: 39)
		declaredAt: (32 to: 39)
		by: accounts.
	#_coverageTracker4447523_
		coverAll:
			{41 to: 49}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker4447523_
					cover: (51 to: 59)
					declaredAt: (19 to: 27)
					by: anAccount) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
addedTo: aPortfolio
	#_coverageTracker4447565_ markAsExecuted.! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	#_coverageTracker4447617_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4447617_
		cover: (48 to: 55)
		declaredAt: (48 to: 55)
		by: accounts.
	#_coverageTracker4447617_
		coverAll:
			{57 to: 59}
		evaluating: [
			receiver2 do: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker4447617_
					cover: (76 to: 84)
					declaredAt: (64 to: 72)
					by: anAccount.
				#_coverageTracker4447617_
					coverAll:
						{86 to: 103}
					evaluating: [
						receiver1 addTransactionsTo:
							(#_coverageTracker4447617_
								cover: (105 to: 129)
								declaredAt: (20 to: 44)
								by: aCollectionOfTransactions) ]
					thatSends: #addTransactionsTo:
					to: receiver1 ] value ]]
		thatSends: #do:
		to: receiver2 ] value.! !
!Behavior method!
named: aName
	#_coverageTracker4447667_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4447667_
		coverAll:
			{18 to: 21}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447667_
		coverAll:
			{23 to: 25}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4447667_
		coverAll:
			{27 to: 42}
		evaluating: [
			receiver2 initializeNamed:
				(#_coverageTracker4447667_
					cover: (44 to: 48)
					declaredAt: (8 to: 12)
					by: aName) ]
		thatSends: #initializeNamed:
		to: receiver2 ] value.! !
!Behavior method!
for: aValue
	#_coverageTracker4447709_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4447709_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447709_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4447709_
		coverAll:
			{26 to: 39}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker4447709_
					cover: (41 to: 46)
					declaredAt: (6 to: 11)
					by: aValue) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
signalCanNotAddAccount
	#_coverageTracker4447754_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ #_coverageTracker4447754_
		coverAll:
			{27 to: 30}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447754_
		coverAll:
			{32 to: 37}
		evaluating: [
			receiver3 error:
				[ | receiver2 |
				receiver2 _ [ | receiver1 |
				receiver1 _ #_coverageTracker4447754_
					coverAll:
						{39 to: 42}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4447754_
					coverAll:
						{44 to: 48}
					evaluating: [ receiver1 class ]
					thatSends: #class
					to: receiver1 ] value.
				#_coverageTracker4447754_
					coverAll:
						{50 to: 77}
					evaluating: [ receiver2 canNotAddAccountErrorMessage ]
					thatSends: #canNotAddAccountErrorMessage
					to: receiver2 ] value ]
		thatSends: #error:
		to: receiver3 ] value.! !
!Behavior method!
canNotAddAccountErrorMessage
	#_coverageTracker4447797_ markAsExecuted.
	^ #_coverageTracker4447797_
		coverAll:
			{34 to: 78}
		byLiteralOrPseudoVariable: 'Can not add repeated account to a portfolio'.! !
!Behavior method!
addToReportTransferWithdrawOf: anAmount
	#_coverageTracker4447839_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker4447839_
		cover: (45 to: 50)
		declaredAt: (45 to: 50)
		by: report.
	#_coverageTracker4447839_
		coverAll:
			{52 to: 55}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker4447839_
					coverAll:
						{57 to: 86}
					byLiteralOrPseudoVariable: 'Salida por transferencia de '.
				#_coverageTracker4447839_
					coverAll:
						{87 to: 87}
					evaluating: [
						receiver2 ,
							[ | receiver1 |
							receiver1 _ #_coverageTracker4447839_
								cover: (89 to: 96)
								declaredAt: (32 to: 39)
								by: anAmount.
							#_coverageTracker4447839_
								coverAll:
									{98 to: 105}
								evaluating: [ receiver1 asString ]
								thatSends: #asString
								to: receiver1 ] value ]
					thatSends: #,
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
isComposedBy: anAccount
	#_coverageTracker4447886_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4447886_
		coverAll:
			{28 to: 31}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4447886_
		coverAll:
			{33 to: 33}
		evaluating: [
			receiver1 =
				(#_coverageTracker4447886_
					cover: (35 to: 43)
					declaredAt: (15 to: 23)
					by: anAccount) ]
		thatSends: #=
		to: receiver1 ] value.! !
!Behavior method!
addToReportDepositOf: anAmount
	#_coverageTracker4447936_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker4447936_
		cover: (36 to: 41)
		declaredAt: (36 to: 41)
		by: report.
	#_coverageTracker4447936_
		coverAll:
			{43 to: 46}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker4447936_
					coverAll:
						{48 to: 62}
					byLiteralOrPseudoVariable: 'Depósito por '.
				#_coverageTracker4447936_
					coverAll:
						{63 to: 63}
					evaluating: [
						receiver2 ,
							[ | receiver1 |
							receiver1 _ #_coverageTracker4447936_
								cover: (65 to: 72)
								declaredAt: (23 to: 30)
								by: anAmount.
							#_coverageTracker4447936_
								coverAll:
									{74 to: 81}
								evaluating: [ receiver1 asString ]
								thatSends: #asString
								to: receiver1 ] value ]
					thatSends: #,
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
initialize
	#_coverageTracker4447987_ markAsExecuted.
	#_coverageTracker4447987_
		cover: (14 to: 21)
		declaredAt: (14 to: 21)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker4447987_
				coverAll:
					{26 to: 42}
				by: OrderedCollection.
			#_coverageTracker4447987_
				coverAll:
					{44 to: 46}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker4447987_
		cover: (50 to: 56)
		declaredAt: (50 to: 56)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker4447987_
				coverAll:
					{61 to: 77}
				by: OrderedCollection.
			#_coverageTracker4447987_
				coverAll:
					{79 to: 81}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !
!Behavior method!
addToReportTransferDepositOf: anAmount
	#_coverageTracker4448029_ markAsExecuted.
	#_coverageTracker4448029_
		cover: (53 to: 58)
		declaredAt: (43 to: 48)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker4448029_
				cover: (43 to: 48)
				declaredAt: (43 to: 48)
				by: report.
			#_coverageTracker4448029_
				coverAll:
					{60 to: 60}
				evaluating: [
					receiver1 +
						(#_coverageTracker4448029_
							cover: (62 to: 69)
							declaredAt: (31 to: 38)
							by: anAmount) ]
				thatSends: #+
				to: receiver1 ] value).! !
!Behavior method!
name
	#_coverageTracker4448064_ markAsExecuted.
	^ #_coverageTracker4448064_
		cover: (9 to: 12)
		declaredAt: (9 to: 12)
		by: name.! !
!Behavior method!
decrementIndentation
	#_coverageTracker4448105_ markAsExecuted.
	#_coverageTracker4448105_
		cover: (44 to: 59)
		declaredAt: (24 to: 39)
		by:
			(indentationLevel _ [ | receiver1 |
			receiver1 _ #_coverageTracker4448105_
				cover: (24 to: 39)
				declaredAt: (24 to: 39)
				by: indentationLevel.
			#_coverageTracker4448105_
				coverAll:
					{61 to: 61}
				evaluating: [
					receiver1 -
						(#_coverageTracker4448105_
							coverAll:
								{63 to: 63}
							byLiteralOrPseudoVariable: 1) ]
				thatSends: #-
				to: receiver1 ] value).! !
!Behavior method!
transactions
	| transactions |
	#_coverageTracker4448154_ markAsExecuted.
	#_coverageTracker4448154_
		cover: (37 to: 48)
		declaredAt: (19 to: 30)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker4448154_
				coverAll:
					{53 to: 69}
				by: OrderedCollection.
			#_coverageTracker4448154_
				coverAll:
					{71 to: 73}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver3 |
	receiver3 _ #_coverageTracker4448154_
		cover: (77 to: 84)
		declaredAt: (77 to: 84)
		by: accounts.
	#_coverageTracker4448154_
		coverAll:
			{86 to: 88}
		evaluating: [
			receiver3 do: [ :anAccount |
				[ | receiver2 |
				receiver2 _ #_coverageTracker4448154_
					cover: (105 to: 113)
					declaredAt: (93 to: 101)
					by: anAccount.
				#_coverageTracker4448154_
					coverAll:
						{115 to: 132}
					evaluating: [
						receiver2 addTransactionsTo:
							(#_coverageTracker4448154_
								cover: (134 to: 145)
								declaredAt: (19 to: 30)
								by: transactions) ]
					thatSends: #addTransactionsTo:
					to: receiver2 ] value ]]
		thatSends: #do:
		to: receiver3 ] value.
	^ #_coverageTracker4448154_
		cover: (154 to: 165)
		declaredAt: (19 to: 30)
		by: transactions.! !
!Behavior method!
addToReportWithdrawOf: anAmount
	#_coverageTracker4448209_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker4448209_
		cover: (37 to: 42)
		declaredAt: (37 to: 42)
		by: report.
	#_coverageTracker4448209_
		coverAll:
			{44 to: 47}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker4448209_
					coverAll:
						{49 to: 65}
					byLiteralOrPseudoVariable: 'Extracción por '.
				#_coverageTracker4448209_
					coverAll:
						{66 to: 66}
					evaluating: [
						receiver2 ,
							[ | receiver1 |
							receiver1 _ #_coverageTracker4448209_
								cover: (68 to: 75)
								declaredAt: (24 to: 31)
								by: anAmount.
							#_coverageTracker4448209_
								coverAll:
									{77 to: 84}
								evaluating: [ receiver1 asString ]
								thatSends: #asString
								to: receiver1 ] value ]
					thatSends: #,
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
initializeFor: aValue
	#_coverageTracker4448241_ markAsExecuted.
	#_coverageTracker4448241_
		cover: (25 to: 29)
		declaredAt: (25 to: 29)
		by:
			(value _ #_coverageTracker4448241_
				cover: (34 to: 39)
				declaredAt: (16 to: 21)
				by: aValue).! !
!Behavior method!
addToReportDepositOf: anAmount
	#_coverageTracker4448316_ markAsExecuted.! !
!Behavior method!
transfer
	#_coverageTracker4448340_ markAsExecuted.
	^ #_coverageTracker4448340_
		cover: (13 to: 22)
		declaredAt: (13 to: 22)
		by: myTransfer.! !
!Behavior method!
deposit
	#_coverageTracker4448381_ markAsExecuted.
	^ #_coverageTracker4448381_
		cover: (12 to: 18)
		declaredAt: (12 to: 18)
		by: deposit.! !
!Behavior method!
of: aPortfolio
	#_coverageTracker4448419_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4448419_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4448419_
		coverAll:
			{26 to: 28}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4448419_
		coverAll:
			{30 to: 42}
		evaluating: [
			receiver2 initializeOf:
				(#_coverageTracker4448419_
					cover: (44 to: 53)
					declaredAt: (5 to: 14)
					by: aPortfolio) ]
		thatSends: #initializeOf:
		to: receiver2 ] value.! !
!Behavior method!
named: aName with: anAccount with: anotherAccount
	#_coverageTracker4448471_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4448471_
		coverAll:
			{56 to: 59}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4448471_
		coverAll:
			{61 to: 63}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4448471_
		coverAll:
			{65 to: 80. 88 to: 92. 104 to: 108}
		evaluating: [
			receiver2
				initializeNamed:
					(#_coverageTracker4448471_
						cover: (82 to: 86)
						declaredAt: (8 to: 12)
						by: aName)
				with:
					(#_coverageTracker4448471_
						cover: (94 to: 102)
						declaredAt: (20 to: 28)
						by: anAccount)
				with:
					(#_coverageTracker4448471_
						cover: (110 to: 123)
						declaredAt: (36 to: 49)
						by: anotherAccount) ]
		thatSends: #initializeNamed:with:with:
		to: receiver2 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker4448540_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4448540_
		cover: (23 to: 29)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker4448540_
		coverAll:
			{31 to: 59}
		evaluating: [
			receiver2 addToReportTransferDepositOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker4448540_
					coverAll:
						{61 to: 64}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4448540_
					coverAll:
						{66 to: 70}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #addToReportTransferDepositOf:
		to: receiver2 ] value.! !
!Behavior method!
affectBalance: currentBalance
	#_coverageTracker4448580_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4448580_
		cover: (36 to: 49)
		declaredAt: (16 to: 29)
		by: currentBalance.
	#_coverageTracker4448580_
		coverAll:
			{51 to: 51}
		evaluating: [
			receiver2 +
				[ | receiver1 |
				receiver1 _ #_coverageTracker4448580_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4448580_
					coverAll:
						{58 to: 62}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #+
		to: receiver2 ] value.! !
!Behavior method!
register: anAmount from: aTransfererAccount to: aTransfereeAccount
	#_coverageTracker4448628_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4448628_
		coverAll:
			{72 to: 75}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4448628_
		coverAll:
			{77 to: 79}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4448628_
		coverAll:
			{81 to: 89. 100 to: 104. 125 to: 127}
		evaluating: [
			receiver2
				register:
					(#_coverageTracker4448628_
						cover: (91 to: 98)
						declaredAt: (11 to: 18)
						by: anAmount)
				from:
					(#_coverageTracker4448628_
						cover: (106 to: 123)
						declaredAt: (26 to: 43)
						by: aTransfererAccount)
				to:
					(#_coverageTracker4448628_
						cover: (129 to: 146)
						declaredAt: (49 to: 66)
						by: aTransfereeAccount) ]
		thatSends: #register:from:to:
		to: receiver2 ] value.! !
!Behavior method!
with: anAccount with: anotherAccount
	#_coverageTracker4448682_ markAsExecuted.
	^ [ | cascadeReceiver |
	cascadeReceiver _ [ | receiver1 |
	receiver1 _ #_coverageTracker4448682_
		coverAll:
			{41 to: 44}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4448682_
		coverAll:
			{46 to: 48}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ cascadeReceiver.
	#_coverageTracker4448682_
		coverAll:
			{53 to: 56}
		evaluating: [
			receiver2 add:
				(#_coverageTracker4448682_
					cover: (58 to: 66)
					declaredAt: (7 to: 15)
					by: anAccount) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ cascadeReceiver.
	#_coverageTracker4448682_
		coverAll:
			{71 to: 74}
		evaluating: [
			receiver3 add:
				(#_coverageTracker4448682_
					cover: (76 to: 89)
					declaredAt: (23 to: 36)
					by: anotherAccount) ]
		thatSends: #add:
		to: receiver3 ] value.
	[ | receiver4 |
	receiver4 _ cascadeReceiver.
	#_coverageTracker4448682_
		coverAll:
			{94 to: 101}
		evaluating: [ receiver4 yourself ]
		thatSends: #yourself
		to: receiver4 ] value ] value.! !
!Behavior method!
register: aValue on: account
	| transaction |
	#_coverageTracker4448719_ markAsExecuted.
	#_coverageTracker4448719_
		cover: (51 to: 61)
		declaredAt: (34 to: 44)
		by:
			(transaction _ [ | receiver1 |
			receiver1 _ #_coverageTracker4448719_
				coverAll:
					{66 to: 69}
				byLiteralOrPseudoVariable: self.
			#_coverageTracker4448719_
				coverAll:
					{71 to: 74}
				evaluating: [
					receiver1 for:
						(#_coverageTracker4448719_
							cover: (76 to: 81)
							declaredAt: (11 to: 16)
							by: aValue) ]
				thatSends: #for:
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker4448719_
		cover: (85 to: 91)
		declaredAt: (22 to: 28)
		by: account.
	#_coverageTracker4448719_
		coverAll:
			{93 to: 101}
		evaluating: [
			receiver2 register:
				(#_coverageTracker4448719_
					cover: (103 to: 113)
					declaredAt: (34 to: 44)
					by: transaction) ]
		thatSends: #register:
		to: receiver2 ] value.
	^ #_coverageTracker4448719_
		cover: (122 to: 132)
		declaredAt: (34 to: 44)
		by: transaction.! !
!Behavior method!
registerOn: anAccount fromTransfer: aTransfer
	#_coverageTracker4448773_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4448773_
		coverAll:
			{51 to: 54}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4448773_
		coverAll:
			{56 to: 58}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4448773_
		coverAll:
			{60 to: 72. 84 to: 96}
		evaluating: [
			receiver2
				initializeOn:
					(#_coverageTracker4448773_
						cover: (74 to: 82)
						declaredAt: (13 to: 21)
						by: anAccount)
				fromTransfer:
					(#_coverageTracker4448773_
						cover: (98 to: 106)
						declaredAt: (37 to: 45)
						by: aTransfer) ]
		thatSends: #initializeOn:fromTransfer:
		to: receiver2 ] value.! !
!Behavior method!
value
	#_coverageTracker4448814_ markAsExecuted.
	^ #_coverageTracker4448814_
		cover: (11 to: 15)
		declaredAt: (11 to: 15)
		by: value.! !
!Behavior method!
initialize
	#_coverageTracker4448851_ markAsExecuted.
	#_coverageTracker4448851_
		coverAll:
			{20 to: 29}
		evaluating: [ super initialize ]
		thatSends: #initialize
		to: super.
	#_coverageTracker4448851_
		cover: (33 to: 44)
		declaredAt: (33 to: 44)
		by:
			(transactions _ [ | receiver1 |
			receiver1 _ #_coverageTracker4448851_
				coverAll:
					{49 to: 65}
				by: OrderedCollection.
			#_coverageTracker4448851_
				coverAll:
					{67 to: 69}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).! !
!Behavior method!
addToReportWithdrawOf: anAmount
	#_coverageTracker4448903_ markAsExecuted.! !
!Behavior method!
addedTo: aPortfolio
	#_coverageTracker4448948_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4448948_
		cover: (25 to: 31)
		declaredAt: (25 to: 31)
		by: parents.
	#_coverageTracker4448948_
		coverAll:
			{33 to: 36}
		evaluating: [
			receiver1 add:
				(#_coverageTracker4448948_
					cover: (38 to: 47)
					declaredAt: (10 to: 19)
					by: aPortfolio) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
affectBalance: currentBalance
	#_coverageTracker4449001_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4449001_
		cover: (36 to: 49)
		declaredAt: (16 to: 29)
		by: currentBalance.
	#_coverageTracker4449001_
		coverAll:
			{51 to: 51}
		evaluating: [
			receiver2 -
				[ | receiver1 |
				receiver1 _ #_coverageTracker4449001_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4449001_
					coverAll:
						{58 to: 62}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #-
		to: receiver2 ] value.! !
!Behavior method!
report
	#_coverageTracker4449040_ markAsExecuted.
	#_coverageTracker4449040_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker4449040_
				coverAll:
					{21 to: 37}
				by: OrderedCollection.
			#_coverageTracker4449040_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker4449040_
		cover: (45 to: 51)
		declaredAt: (45 to: 51)
		by: account.
	#_coverageTracker4449040_
		coverAll:
			{53 to: 63}
		evaluating: [
			receiver2 fillReport:
				(#_coverageTracker4449040_
					coverAll:
						{65 to: 68}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillReport:
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker4449040_
		coverAll:
			{72 to: 75}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4449040_
		coverAll:
			{77 to: 97}
		evaluating: [
			receiver4 addToReportBalanceOf:
				[ | receiver3 |
				receiver3 _ #_coverageTracker4449040_
					cover: (99 to: 105)
					declaredAt: (45 to: 51)
					by: account.
				#_coverageTracker4449040_
					coverAll:
						{107 to: 113}
					evaluating: [ receiver3 balance ]
					thatSends: #balance
					to: receiver3 ] value ]
		thatSends: #addToReportBalanceOf:
		to: receiver4 ] value.
	^ #_coverageTracker4449040_
		cover: (118 to: 123)
		declaredAt: (11 to: 16)
		by: report.! !
!Behavior method!
hasRegistered: aTransaction
	#_coverageTracker4449094_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4449094_
		cover: (33 to: 44)
		declaredAt: (33 to: 44)
		by: transactions.
	#_coverageTracker4449094_
		coverAll:
			{46 to: 54}
		evaluating: [
			receiver1 includes:
				(#_coverageTracker4449094_
					cover: (56 to: 67)
					declaredAt: (16 to: 27)
					by: aTransaction) ]
		thatSends: #includes:
		to: receiver1 ] value.! !
!Behavior method!
rootParents
	| rootParents |
	#_coverageTracker4449136_ markAsExecuted.
	#_coverageTracker4449136_
		cover: (35 to: 45)
		declaredAt: (18 to: 28)
		by:
			(rootParents _ [ | receiver1 |
			receiver1 _ #_coverageTracker4449136_
				coverAll:
					{50 to: 52}
				by: Set.
			#_coverageTracker4449136_
				coverAll:
					{54 to: 56}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	[ | receiver2 |
	receiver2 _ #_coverageTracker4449136_
		coverAll:
			{60 to: 63}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4449136_
		coverAll:
			{65 to: 81}
		evaluating: [
			receiver2 addRootParentsTo:
				(#_coverageTracker4449136_
					cover: (83 to: 93)
					declaredAt: (18 to: 28)
					by: rootParents) ]
		thatSends: #addRootParentsTo:
		to: receiver2 ] value.
	^ #_coverageTracker4449136_
		cover: (101 to: 111)
		declaredAt: (18 to: 28)
		by: rootParents.! !
!Behavior method!
report
	#_coverageTracker4449181_ markAsExecuted.
	#_coverageTracker4449181_
		cover: (11 to: 16)
		declaredAt: (11 to: 16)
		by:
			(report _ [ | receiver1 |
			receiver1 _ #_coverageTracker4449181_
				coverAll:
					{21 to: 37}
				by: OrderedCollection.
			#_coverageTracker4449181_
				coverAll:
					{39 to: 41}
				evaluating: [ receiver1 new ]
				thatSends: #new
				to: receiver1 ] value).
	#_coverageTracker4449181_
		cover: (45 to: 60)
		declaredAt: (45 to: 60)
		by:
			(indentationLevel _ #_coverageTracker4449181_
				coverAll:
					{65 to: 65}
				byLiteralOrPseudoVariable: 0).
	[ | receiver2 |
	receiver2 _ #_coverageTracker4449181_
		cover: (69 to: 75)
		declaredAt: (69 to: 75)
		by: account.
	#_coverageTracker4449181_
		coverAll:
			{77 to: 91}
		evaluating: [
			receiver2 fillTreeReport:
				(#_coverageTracker4449181_
					coverAll:
						{93 to: 96}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #fillTreeReport:
		to: receiver2 ] value.
	^ #_coverageTracker4449181_
		cover: (101 to: 106)
		declaredAt: (11 to: 16)
		by: report.! !
!Behavior method!
transactions
	#_coverageTracker4449233_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4449233_
		cover: (19 to: 30)
		declaredAt: (19 to: 30)
		by: transactions.
	#_coverageTracker4449233_
		coverAll:
			{32 to: 35}
		evaluating: [ receiver1 copy ]
		thatSends: #copy
		to: receiver1 ] value.! !
!Behavior method!
balance
	#_coverageTracker4449277_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4449277_
		cover: (13 to: 20)
		declaredAt: (13 to: 20)
		by: accounts.
	#_coverageTracker4449277_
		coverAll:
			{22 to: 25. 62 to: 69}
		evaluating: [
			receiver2
				sum: [ :anAccount |
					[ | receiver1 |
					receiver1 _ #_coverageTracker4449277_
						cover: (42 to: 50)
						declaredAt: (30 to: 38)
						by: anAccount.
					#_coverageTracker4449277_
						coverAll:
							{52 to: 58}
						evaluating: [ receiver1 balance ]
						thatSends: #balance
						to: receiver1 ] value ]
				ifEmpty: [
					#_coverageTracker4449277_
						coverAll:
							{73 to: 73}
						byLiteralOrPseudoVariable: 0 ]]
		thatSends: #sum:ifEmpty:
		to: receiver2 ] value.! !
!Behavior method!
addToReportTransferDepositOf: anAmount
	#_coverageTracker4449325_ markAsExecuted.
	^ [ | receiver3 |
	receiver3 _ #_coverageTracker4449325_
		cover: (44 to: 49)
		declaredAt: (44 to: 49)
		by: report.
	#_coverageTracker4449325_
		coverAll:
			{51 to: 54}
		evaluating: [
			receiver3 add:
				[ | receiver2 |
				receiver2 _ #_coverageTracker4449325_
					coverAll:
						{56 to: 86}
					byLiteralOrPseudoVariable: 'Entrada por transferencia de '.
				#_coverageTracker4449325_
					coverAll:
						{87 to: 87}
					evaluating: [
						receiver2 ,
							[ | receiver1 |
							receiver1 _ #_coverageTracker4449325_
								cover: (89 to: 96)
								declaredAt: (31 to: 38)
								by: anAmount.
							#_coverageTracker4449325_
								coverAll:
									{98 to: 105}
								evaluating: [ receiver1 asString ]
								thatSends: #asString
								to: receiver1 ] value ]
					thatSends: #,
					to: receiver2 ] value ]
		thatSends: #add:
		to: receiver3 ] value.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker4449366_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4449366_
		cover: (28 to: 35)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker4449366_
		coverAll:
			{37 to: 37}
		evaluating: [
			receiver1 -
				(#_coverageTracker4449366_
					cover: (39 to: 43)
					declaredAt: (39 to: 43)
					by: value) ]
		thatSends: #-
		to: receiver1 ] value.! !
!Behavior method!
named: aName
	#_coverageTracker4449413_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4449413_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4449413_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4449413_
		coverAll:
			{26 to: 41}
		evaluating: [
			receiver2 initializeNamed:
				(#_coverageTracker4449413_
					cover: (43 to: 47)
					declaredAt: (8 to: 12)
					by: aName) ]
		thatSends: #initializeNamed:
		to: receiver2 ] value.! !
!Behavior method!
register: anAmount from: aTransfererAccount to: aTransfereeAccount
	#_coverageTracker4449457_ markAsExecuted.
	#_coverageTracker4449457_
		cover: (70 to: 76)
		declaredAt: (70 to: 76)
		by:
			(deposit _ [ | receiver1 |
			receiver1 _ #_coverageTracker4449457_
				coverAll:
					{81 to: 95}
				by: TransferDeposit.
			#_coverageTracker4449457_
				coverAll:
					{97 to: 107. 128 to: 140}
				evaluating: [
					receiver1
						registerOn:
							(#_coverageTracker4449457_
								cover: (109 to: 126)
								declaredAt: (49 to: 66)
								by: aTransfereeAccount)
						fromTransfer:
							(#_coverageTracker4449457_
								coverAll:
									{142 to: 145}
								byLiteralOrPseudoVariable: self) ]
				thatSends: #registerOn:fromTransfer:
				to: receiver1 ] value).
	#_coverageTracker4449457_
		cover: (149 to: 156)
		declaredAt: (149 to: 156)
		by:
			(withdraw _ [ | receiver2 |
			receiver2 _ #_coverageTracker4449457_
				coverAll:
					{161 to: 176}
				by: TransferWithdraw.
			#_coverageTracker4449457_
				coverAll:
					{178 to: 188. 209 to: 221}
				evaluating: [
					receiver2
						registerOn:
							(#_coverageTracker4449457_
								cover: (190 to: 207)
								declaredAt: (26 to: 43)
								by: aTransfererAccount)
						fromTransfer:
							(#_coverageTracker4449457_
								coverAll:
									{223 to: 226}
								byLiteralOrPseudoVariable: self) ]
				thatSends: #registerOn:fromTransfer:
				to: receiver2 ] value).
	#_coverageTracker4449457_
		cover: (230 to: 234)
		declaredAt: (230 to: 234)
		by:
			(value _ #_coverageTracker4449457_
				cover: (239 to: 246)
				declaredAt: (11 to: 18)
				by: anAmount).! !
!Behavior method!
addRootParentsTo: rootParents
	#_coverageTracker4449510_ markAsExecuted.
	[ | receiver4 |
	receiver4 _ #_coverageTracker4449510_
		cover: (33 to: 39)
		declaredAt: (33 to: 39)
		by: parents.
	#_coverageTracker4449510_
		coverAll:
			{44 to: 51. 82 to: 92}
		evaluating: [
			receiver4
				ifEmpty: [
					[ | receiver1 |
					receiver1 _ #_coverageTracker4449510_
						cover: (55 to: 65)
						declaredAt: (19 to: 29)
						by: rootParents.
					#_coverageTracker4449510_
						coverAll:
							{67 to: 70}
						evaluating: [
							receiver1 add:
								(#_coverageTracker4449510_
									coverAll:
										{72 to: 75}
									byLiteralOrPseudoVariable: self) ]
						thatSends: #add:
						to: receiver1 ] value ]
				ifNotEmpty: [
					[ | receiver3 |
					receiver3 _ #_coverageTracker4449510_
						cover: (96 to: 102)
						declaredAt: (33 to: 39)
						by: parents.
					#_coverageTracker4449510_
						coverAll:
							{104 to: 106}
						evaluating: [
							receiver3 do: [ :aParent |
								[ | receiver2 |
								receiver2 _ #_coverageTracker4449510_
									cover: (121 to: 127)
									declaredAt: (111 to: 117)
									by: aParent.
								#_coverageTracker4449510_
									coverAll:
										{129 to: 145}
									evaluating: [
										receiver2 addRootParentsTo:
											(#_coverageTracker4449510_
												cover: (147 to: 157)
												declaredAt: (19 to: 29)
												by: rootParents) ]
									thatSends: #addRootParentsTo:
									to: receiver2 ] value ]]
						thatSends: #do:
						to: receiver3 ] value ]]
		thatSends: #ifEmpty:ifNotEmpty:
		to: receiver4 ] value.! !
!Behavior method!
initializeNamed: aName
	#_coverageTracker4449557_ markAsExecuted.
	#_coverageTracker4449557_
		cover: (27 to: 30)
		declaredAt: (27 to: 30)
		by:
			(name _ #_coverageTracker4449557_
				cover: (35 to: 39)
				declaredAt: (18 to: 22)
				by: aName).! !
!Behavior method!
of: anAccount
	#_coverageTracker4449597_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4449597_
		coverAll:
			{20 to: 23}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4449597_
		coverAll:
			{25 to: 27}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4449597_
		coverAll:
			{29 to: 41}
		evaluating: [
			receiver2 initializeOf:
				(#_coverageTracker4449597_
					cover: (43 to: 51)
					declaredAt: (5 to: 13)
					by: anAccount) ]
		thatSends: #initializeOf:
		to: receiver2 ] value.! !
!Behavior method!
hasRegistered: aTransaction
	#_coverageTracker4449646_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4449646_
		cover: (32 to: 39)
		declaredAt: (32 to: 39)
		by: accounts.
	#_coverageTracker4449646_
		coverAll:
			{41 to: 51}
		evaluating: [
			receiver2 anySatisfy: [ :anAccount |
				[ | receiver1 |
				receiver1 _ #_coverageTracker4449646_
					cover: (68 to: 76)
					declaredAt: (56 to: 64)
					by: anAccount.
				#_coverageTracker4449646_
					coverAll:
						{78 to: 91}
					evaluating: [
						receiver1 hasRegistered:
							(#_coverageTracker4449646_
								cover: (93 to: 104)
								declaredAt: (16 to: 27)
								by: aTransaction) ]
					thatSends: #hasRegistered:
					to: receiver1 ] value ]]
		thatSends: #anySatisfy:
		to: receiver2 ] value.! !
!Behavior method!
affectBalance: aBalance
	#_coverageTracker4449686_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4449686_
		cover: (28 to: 35)
		declaredAt: (16 to: 23)
		by: aBalance.
	#_coverageTracker4449686_
		coverAll:
			{37 to: 37}
		evaluating: [
			receiver1 +
				(#_coverageTracker4449686_
					cover: (39 to: 43)
					declaredAt: (39 to: 43)
					by: value) ]
		thatSends: #+
		to: receiver1 ] value.! !
!Behavior method!
initializeOf: aPortfolio
	#_coverageTracker4449734_ markAsExecuted.
	#_coverageTracker4449734_
		cover: (29 to: 35)
		declaredAt: (29 to: 35)
		by:
			(account _ #_coverageTracker4449734_
				cover: (40 to: 49)
				declaredAt: (15 to: 24)
				by: aPortfolio).! !
!Behavior method!
accountsSize
	#_coverageTracker4449785_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4449785_
		cover: (18 to: 25)
		declaredAt: (18 to: 25)
		by: accounts.
	#_coverageTracker4449785_
		coverAll:
			{27 to: 30}
		evaluating: [ receiver1 size ]
		thatSends: #size
		to: receiver1 ] value.! !
!Behavior method!
of: aPortfolio
	#_coverageTracker4449823_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4449823_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4449823_
		coverAll:
			{26 to: 28}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4449823_
		coverAll:
			{30 to: 42}
		evaluating: [
			receiver2 initializeOf:
				(#_coverageTracker4449823_
					cover: (44 to: 53)
					declaredAt: (5 to: 14)
					by: aPortfolio) ]
		thatSends: #initializeOf:
		to: receiver2 ] value.! !
!Behavior method!
fillReport: aReport
	#_coverageTracker4449897_ markAsExecuted.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4449897_
		cover: (23 to: 29)
		declaredAt: (13 to: 19)
		by: aReport.
	#_coverageTracker4449897_
		coverAll:
			{31 to: 51}
		evaluating: [
			receiver2 addToReportDepositOf:
				[ | receiver1 |
				receiver1 _ #_coverageTracker4449897_
					coverAll:
						{53 to: 56}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4449897_
					coverAll:
						{58 to: 62}
					evaluating: [ receiver1 value ]
					thatSends: #value
					to: receiver1 ] value ]
		thatSends: #addToReportDepositOf:
		to: receiver2 ] value.! !
!Behavior method!
addTransactionsOf: anAccount
	| indentation indentedSummary |
	#_coverageTracker4449923_ markAsExecuted.
	#_coverageTracker4449923_
		cover: (65 to: 75)
		declaredAt: (34 to: 44)
		by:
			(indentation _ #_coverageTracker4449923_
				coverAll:
					{80 to: 81}
				byLiteralOrPseudoVariable: '').
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4449923_
		cover: (85 to: 100)
		declaredAt: (85 to: 100)
		by: indentationLevel.
	#_coverageTracker4449923_
		coverAll:
			{101 to: 101}
		evaluating: [
			receiver1 +
				(#_coverageTracker4449923_
					coverAll:
						{102 to: 102}
					byLiteralOrPseudoVariable: 1) ]
		thatSends: #+
		to: receiver1 ] value.
	#_coverageTracker4449923_
		coverAll:
			{104 to: 115}
		evaluating: [
			receiver3 timesRepeat: [
				#_coverageTracker4449923_
					cover: (133 to: 143)
					declaredAt: (34 to: 44)
					by:
						(indentation _ [ | receiver2 |
						receiver2 _ #_coverageTracker4449923_
							cover: (118 to: 128)
							declaredAt: (34 to: 44)
							by: indentation.
						#_coverageTracker4449923_
							coverAll:
								{145 to: 145}
							evaluating: [
								receiver2 ,
									(#_coverageTracker4449923_
										coverAll:
											{147 to: 151}
										byLiteralOrPseudoVariable: '   ') ]
							thatSends: #,
							to: receiver2 ] value) ]]
		thatSends: #timesRepeat:
		to: receiver3 ] value.
	#_coverageTracker4449923_
		cover: (156 to: 170)
		declaredAt: (46 to: 60)
		by:
			(indentedSummary _ [ | receiver7 |
			receiver7 _ [ | receiver5 |
			receiver5 _ [ | receiver4 |
			receiver4 _ #_coverageTracker4449923_
				coverAll:
					{176 to: 189}
				by: AccountSummary.
			#_coverageTracker4449923_
				coverAll:
					{191 to: 193}
				evaluating: [
					receiver4 of:
						(#_coverageTracker4449923_
							cover: (195 to: 203)
							declaredAt: (20 to: 28)
							by: anAccount) ]
				thatSends: #of:
				to: receiver4 ] value.
			#_coverageTracker4449923_
				coverAll:
					{206 to: 211}
				evaluating: [ receiver5 report ]
				thatSends: #report
				to: receiver5 ] value.
			#_coverageTracker4449923_
				coverAll:
					{213 to: 220}
				evaluating: [
					receiver7 collect: [ :reportLine |
						[ | receiver6 |
						receiver6 _ #_coverageTracker4449923_
							cover: (237 to: 247)
							declaredAt: (34 to: 44)
							by: indentation.
						#_coverageTracker4449923_
							coverAll:
								{249 to: 249}
							evaluating: [
								receiver6 ,
									(#_coverageTracker4449923_
										cover: (251 to: 260)
										declaredAt: (224 to: 233)
										by: reportLine) ]
							thatSends: #,
							to: receiver6 ] value ]]
				thatSends: #collect:
				to: receiver7 ] value).
	[ | receiver8 |
	receiver8 _ #_coverageTracker4449923_
		cover: (265 to: 270)
		declaredAt: (265 to: 270)
		by: report.
	#_coverageTracker4449923_
		coverAll:
			{272 to: 278}
		evaluating: [
			receiver8 addAll:
				(#_coverageTracker4449923_
					cover: (280 to: 294)
					declaredAt: (46 to: 60)
					by: indentedSummary) ]
		thatSends: #addAll:
		to: receiver8 ] value.! !
!Behavior method!
addTransactionsOf: anAccount
	#_coverageTracker4449987_ markAsExecuted.! !
!Behavior method!
for: aValue
	#_coverageTracker4450029_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4450029_
		coverAll:
			{17 to: 20}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4450029_
		coverAll:
			{22 to: 24}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4450029_
		coverAll:
			{26 to: 39}
		evaluating: [
			receiver2 initializeFor:
				(#_coverageTracker4450029_
					cover: (41 to: 46)
					declaredAt: (6 to: 11)
					by: aValue) ]
		thatSends: #initializeFor:
		to: receiver2 ] value.! !
!Behavior method!
named: aName with: anAccount
	#_coverageTracker4450077_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4450077_
		coverAll:
			{35 to: 38}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4450077_
		coverAll:
			{40 to: 42}
		evaluating: [ receiver1 new ]
		thatSends: #new
		to: receiver1 ] value.
	#_coverageTracker4450077_
		coverAll:
			{44 to: 59. 67 to: 71}
		evaluating: [
			receiver2
				initializeNamed:
					(#_coverageTracker4450077_
						cover: (61 to: 65)
						declaredAt: (8 to: 12)
						by: aName)
				with:
					(#_coverageTracker4450077_
						cover: (73 to: 81)
						declaredAt: (20 to: 28)
						by: anAccount) ]
		thatSends: #initializeNamed:with:
		to: receiver2 ] value.! !
!Behavior method!
assertCanAdd: accountToAdd
	#_coverageTracker4450131_ markAsExecuted.
	[ | receiver3 |
	receiver3 _ [ | receiver1 |
	receiver1 _ #_coverageTracker4450131_
		coverAll:
			{31 to: 34}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4450131_
		coverAll:
			{36 to: 61}
		evaluating: [
			receiver1 anyRootParentIsComposedBy:
				(#_coverageTracker4450131_
					cover: (63 to: 74)
					declaredAt: (15 to: 26)
					by: accountToAdd) ]
		thatSends: #anyRootParentIsComposedBy:
		to: receiver1 ] value.
	#_coverageTracker4450131_
		coverAll:
			{77 to: 83}
		evaluating: [
			receiver3 ifTrue: [
				[ | receiver2 |
				receiver2 _ #_coverageTracker4450131_
					coverAll:
						{87 to: 90}
					byLiteralOrPseudoVariable: self.
				#_coverageTracker4450131_
					coverAll:
						{92 to: 113}
					evaluating: [ receiver2 signalCanNotAddAccount ]
					thatSends: #signalCanNotAddAccount
					to: receiver2 ] value ]]
		thatSends: #ifTrue:
		to: receiver3 ] value.! !
!Behavior method!
addNameOf: anAccount
	| indentation |
	#_coverageTracker4450178_ markAsExecuted.
	#_coverageTracker4450178_
		cover: (41 to: 51)
		declaredAt: (26 to: 36)
		by:
			(indentation _ #_coverageTracker4450178_
				coverAll:
					{56 to: 57}
				byLiteralOrPseudoVariable: '').
	[ | receiver2 |
	receiver2 _ #_coverageTracker4450178_
		cover: (61 to: 76)
		declaredAt: (61 to: 76)
		by: indentationLevel.
	#_coverageTracker4450178_
		coverAll:
			{78 to: 89}
		evaluating: [
			receiver2 timesRepeat: [
				#_coverageTracker4450178_
					cover: (107 to: 117)
					declaredAt: (26 to: 36)
					by:
						(indentation _ [ | receiver1 |
						receiver1 _ #_coverageTracker4450178_
							cover: (92 to: 102)
							declaredAt: (26 to: 36)
							by: indentation.
						#_coverageTracker4450178_
							coverAll:
								{119 to: 119}
							evaluating: [
								receiver1 ,
									(#_coverageTracker4450178_
										coverAll:
											{121 to: 125}
										byLiteralOrPseudoVariable: '   ') ]
							thatSends: #,
							to: receiver1 ] value) ]]
		thatSends: #timesRepeat:
		to: receiver2 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker4450178_
		cover: (130 to: 135)
		declaredAt: (130 to: 135)
		by: report.
	#_coverageTracker4450178_
		coverAll:
			{137 to: 140}
		evaluating: [
			receiver5 add:
				[ | receiver4 |
				receiver4 _ #_coverageTracker4450178_
					cover: (142 to: 152)
					declaredAt: (26 to: 36)
					by: indentation.
				#_coverageTracker4450178_
					coverAll:
						{154 to: 154}
					evaluating: [
						receiver4 ,
							[ | receiver3 |
							receiver3 _ #_coverageTracker4450178_
								cover: (156 to: 164)
								declaredAt: (12 to: 20)
								by: anAccount.
							#_coverageTracker4450178_
								coverAll:
									{166 to: 169}
								evaluating: [ receiver3 name ]
								thatSends: #name
								to: receiver3 ] value ]
					thatSends: #,
					to: receiver4 ] value ]
		thatSends: #add:
		to: receiver5 ] value.! !
!Behavior method!
value
	#_coverageTracker4450231_ markAsExecuted.
	^ #_coverageTracker4450231_
		cover: (10 to: 14)
		declaredAt: (10 to: 14)
		by: value.! !
!Behavior method!
register: aTransaction
	#_coverageTracker4450271_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4450271_
		cover: (26 to: 37)
		declaredAt: (26 to: 37)
		by: transactions.
	#_coverageTracker4450271_
		coverAll:
			{39 to: 42}
		evaluating: [
			receiver1 add:
				(#_coverageTracker4450271_
					cover: (44 to: 55)
					declaredAt: (11 to: 22)
					by: aTransaction) ]
		thatSends: #add:
		to: receiver1 ] value.! !
!Behavior method!
addBalanceOf: anAccount
	| indentation |
	#_coverageTracker4450309_ markAsExecuted.
	#_coverageTracker4450309_
		cover: (44 to: 54)
		declaredAt: (29 to: 39)
		by:
			(indentation _ #_coverageTracker4450309_
				coverAll:
					{59 to: 60}
				byLiteralOrPseudoVariable: '').
	[ | receiver2 |
	receiver2 _ #_coverageTracker4450309_
		cover: (64 to: 79)
		declaredAt: (64 to: 79)
		by: indentationLevel.
	#_coverageTracker4450309_
		coverAll:
			{81 to: 92}
		evaluating: [
			receiver2 timesRepeat: [
				#_coverageTracker4450309_
					cover: (110 to: 120)
					declaredAt: (29 to: 39)
					by:
						(indentation _ [ | receiver1 |
						receiver1 _ #_coverageTracker4450309_
							cover: (95 to: 105)
							declaredAt: (29 to: 39)
							by: indentation.
						#_coverageTracker4450309_
							coverAll:
								{122 to: 122}
							evaluating: [
								receiver1 ,
									(#_coverageTracker4450309_
										coverAll:
											{124 to: 128}
										byLiteralOrPseudoVariable: '   ') ]
							thatSends: #,
							to: receiver1 ] value) ]]
		thatSends: #timesRepeat:
		to: receiver2 ] value.
	[ | receiver7 |
	receiver7 _ #_coverageTracker4450309_
		cover: (133 to: 138)
		declaredAt: (133 to: 138)
		by: report.
	#_coverageTracker4450309_
		coverAll:
			{140 to: 143}
		evaluating: [
			receiver7 add:
				[ | receiver6 |
				receiver6 _ [ | receiver3 |
				receiver3 _ #_coverageTracker4450309_
					cover: (145 to: 155)
					declaredAt: (29 to: 39)
					by: indentation.
				#_coverageTracker4450309_
					coverAll:
						{157 to: 157}
					evaluating: [
						receiver3 ,
							(#_coverageTracker4450309_
								coverAll:
									{159 to: 170}
								byLiteralOrPseudoVariable: 'Balance = ') ]
					thatSends: #,
					to: receiver3 ] value.
				#_coverageTracker4450309_
					coverAll:
						{172 to: 172}
					evaluating: [
						receiver6 ,
							[ | receiver5 |
							receiver5 _ [ | receiver4 |
							receiver4 _ #_coverageTracker4450309_
								cover: (174 to: 182)
								declaredAt: (15 to: 23)
								by: anAccount.
							#_coverageTracker4450309_
								coverAll:
									{184 to: 190}
								evaluating: [ receiver4 balance ]
								thatSends: #balance
								to: receiver4 ] value.
							#_coverageTracker4450309_
								coverAll:
									{192 to: 199}
								evaluating: [ receiver5 asString ]
								thatSends: #asString
								to: receiver5 ] value ]
					thatSends: #,
					to: receiver6 ] value ]
		thatSends: #add:
		to: receiver7 ] value.! !
!Behavior method!
accountsIsEmpty
	#_coverageTracker4450362_ markAsExecuted.
	^ [ | receiver1 |
	receiver1 _ #_coverageTracker4450362_
		cover: (21 to: 28)
		declaredAt: (21 to: 28)
		by: accounts.
	#_coverageTracker4450362_
		coverAll:
			{30 to: 36}
		evaluating: [ receiver1 isEmpty ]
		thatSends: #isEmpty
		to: receiver1 ] value.! !
!Behavior method!
balance
	#_coverageTracker4450417_ markAsExecuted.
	^ [ | receiver2 |
	receiver2 _ #_coverageTracker4450417_
		cover: (12 to: 23)
		declaredAt: (12 to: 23)
		by: transactions.
	#_coverageTracker4450417_
		coverAll:
			{28 to: 34. 40 to: 44}
		evaluating: [
			receiver2
				inject:
					(#_coverageTracker4450417_
						coverAll:
							{36 to: 36}
						byLiteralOrPseudoVariable: 0)
				into: [ :currentBalance :transaction |
					[ | receiver1 |
					receiver1 _ #_coverageTracker4450417_
						cover: (79 to: 89)
						declaredAt: (65 to: 75)
						by: transaction.
					#_coverageTracker4450417_
						coverAll:
							{91 to: 104}
						evaluating: [
							receiver1 affectBalance:
								(#_coverageTracker4450417_
									cover: (106 to: 119)
									declaredAt: (49 to: 62)
									by: currentBalance) ]
						thatSends: #affectBalance:
						to: receiver1 ] value ]]
		thatSends: #inject:into:
		to: receiver2 ] value.! !
!Behavior method!
addTransactionsTo: aCollectionOfTransactions
	#_coverageTracker4450463_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4450463_
		cover: (48 to: 72)
		declaredAt: (20 to: 44)
		by: aCollectionOfTransactions.
	#_coverageTracker4450463_
		coverAll:
			{74 to: 80}
		evaluating: [
			receiver1 addAll:
				(#_coverageTracker4450463_
					cover: (82 to: 93)
					declaredAt: (82 to: 93)
					by: transactions) ]
		thatSends: #addAll:
		to: receiver1 ] value.! !
!Behavior method!
fillTreeReport: aTreeReport
	#_coverageTracker4450517_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4450517_
		cover: (33 to: 43)
		declaredAt: (17 to: 27)
		by: aTreeReport.
	#_coverageTracker4450517_
		coverAll:
			{45 to: 54}
		evaluating: [
			receiver1 addNameOf:
				(#_coverageTracker4450517_
					coverAll:
						{56 to: 59}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addNameOf:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4450517_
		cover: (63 to: 73)
		declaredAt: (17 to: 27)
		by: aTreeReport.
	#_coverageTracker4450517_
		coverAll:
			{75 to: 94}
		evaluating: [ receiver2 incrementIndentation ]
		thatSends: #incrementIndentation
		to: receiver2 ] value.
	[ | receiver4 |
	receiver4 _ #_coverageTracker4450517_
		cover: (98 to: 105)
		declaredAt: (98 to: 105)
		by: accounts.
	#_coverageTracker4450517_
		coverAll:
			{107 to: 109}
		evaluating: [
			receiver4 do: [ :account |
				[ | receiver3 |
				receiver3 _ #_coverageTracker4450517_
					cover: (123 to: 129)
					declaredAt: (113 to: 119)
					by: account.
				#_coverageTracker4450517_
					coverAll:
						{131 to: 145}
					evaluating: [
						receiver3 fillTreeReport:
							(#_coverageTracker4450517_
								cover: (147 to: 157)
								declaredAt: (17 to: 27)
								by: aTreeReport) ]
					thatSends: #fillTreeReport:
					to: receiver3 ] value ]]
		thatSends: #do:
		to: receiver4 ] value.
	[ | receiver5 |
	receiver5 _ #_coverageTracker4450517_
		cover: (163 to: 173)
		declaredAt: (17 to: 27)
		by: aTreeReport.
	#_coverageTracker4450517_
		coverAll:
			{175 to: 187}
		evaluating: [
			receiver5 addBalanceOf:
				(#_coverageTracker4450517_
					coverAll:
						{189 to: 192}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addBalanceOf:
		to: receiver5 ] value.
	[ | receiver6 |
	receiver6 _ #_coverageTracker4450517_
		cover: (196 to: 206)
		declaredAt: (17 to: 27)
		by: aTreeReport.
	#_coverageTracker4450517_
		coverAll:
			{208 to: 227}
		evaluating: [ receiver6 decrementIndentation ]
		thatSends: #decrementIndentation
		to: receiver6 ] value.! !
!Behavior method!
add: accountToAdd
	#_coverageTracker4450570_ markAsExecuted.
	[ | receiver1 |
	receiver1 _ #_coverageTracker4450570_
		coverAll:
			{21 to: 24}
		byLiteralOrPseudoVariable: self.
	#_coverageTracker4450570_
		coverAll:
			{26 to: 38}
		evaluating: [
			receiver1 assertCanAdd:
				(#_coverageTracker4450570_
					cover: (40 to: 51)
					declaredAt: (6 to: 17)
					by: accountToAdd) ]
		thatSends: #assertCanAdd:
		to: receiver1 ] value.
	[ | receiver2 |
	receiver2 _ #_coverageTracker4450570_
		cover: (58 to: 65)
		declaredAt: (58 to: 65)
		by: accounts.
	#_coverageTracker4450570_
		coverAll:
			{67 to: 70}
		evaluating: [
			receiver2 add:
				(#_coverageTracker4450570_
					cover: (72 to: 83)
					declaredAt: (6 to: 17)
					by: accountToAdd) ]
		thatSends: #add:
		to: receiver2 ] value.
	[ | receiver3 |
	receiver3 _ #_coverageTracker4450570_
		cover: (87 to: 98)
		declaredAt: (6 to: 17)
		by: accountToAdd.
	#_coverageTracker4450570_
		coverAll:
			{100 to: 107}
		evaluating: [
			receiver3 addedTo:
				(#_coverageTracker4450570_
					coverAll:
						{109 to: 112}
					byLiteralOrPseudoVariable: self) ]
		thatSends: #addedTo:
		to: receiver3 ] value.! !
!Behavior method!
initializeNamed: aName with: anAccount
	#_coverageTracker4450608_ markAsExecuted.
	#_coverageTracker4450608_
		cover: (42 to: 45)
		declaredAt: (42 to: 45)
		by:
			(name _ #_coverageTracker4450608_
				cover: (50 to: 54)
				declaredAt: (18 to: 22)
				by: aName).
	#_coverageTracker4450608_
		cover: (58 to: 65)
		declaredAt: (58 to: 65)
		by:
			(accounts _ [ | receiver1 |
			receiver1 _ #_coverageTracker4450608_
				coverAll:
					{70 to: 86}
				by: OrderedCollection.
			#_coverageTracker4450608_
				coverAll:
					{88 to: 92}
				evaluating: [
					receiver1 with:
						(#_coverageTracker4450608_
							cover: (94 to: 102)
							declaredAt: (30 to: 38)
							by: anAccount) ]
				thatSends: #with:
				to: receiver1 ] value).
	#_coverageTracker4450608_
		cover: (106 to: 112)
		declaredAt: (106 to: 112)
		by:
			(parents _ [ | receiver2 |
			receiver2 _ #_coverageTracker4450608_
				coverAll:
					{117 to: 133}
				by: OrderedCollection.
			#_coverageTracker4450608_
				coverAll:
					{135 to: 137}
				evaluating: [ receiver2 new ]
				thatSends: #new
				to: receiver2 ] value).! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 05:42:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 05:43:00'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 05:43:01'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:43:02'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:43:03'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:43:03'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 05:43:03'!
PASSED!

AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferLegs category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 05:47:46'!
AccountTransaction subclass: #TransferLegs
	instanceVariableNames: 'myTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 05:47:53'!
AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 05:47:56'!
AccountTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TransferLegs subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferDeposit category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 05:48:10'!
TransferLegs subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TransferLegs subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 05:48:20'!
TransferLegs subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferLegs methodsFor: 'initialization' stamp: 'LMR 6/1/2023 05:48:41'!
initializeOn: anAccount fromTransfer: aTransfer

	myTransfer := aTransfer.
	anAccount register: self
! !

!methodRemoval: TransferDeposit #initializeOn:fromTransfer: stamp: 'LMR 6/1/2023 05:48:41'!
initializeOn: anAccount fromTransfer: aTransfer

	myTransfer := aTransfer.
	anAccount register: self
!
!TransferLegs methodsFor: 'transfer' stamp: 'LMR 6/1/2023 05:48:46'!
transfer

	^myTransfer ! !

!methodRemoval: TransferDeposit #transfer stamp: 'LMR 6/1/2023 05:48:46'!
transfer

	^myTransfer !
!TransferLegs methodsFor: 'value' stamp: 'LMR 6/1/2023 05:49:04' overrides: 50621296!
value
	
	^myTransfer value ! !

!methodRemoval: TransferDeposit #value stamp: 'LMR 6/1/2023 05:49:04'!
value
	
	^myTransfer value !
!TransferLegs methodsFor: 'reports' stamp: 'LMR 6/1/2023 05:49:45' overrides: 50621290!
fillReport: aReport

	self subclassResponsibility.! !
!TransferLegs methodsFor: 'balance' stamp: 'LMR 6/1/2023 05:50:08' overrides: 50621301!
affectBalance: currentBalance 

	self subclassResponsibility.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 05:50:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 05:50:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 05:50:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 05:50:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 05:50:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 05:50:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:50:45'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:50:46'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 05:50:47'!
PASSED!

----SNAPSHOT----(1 June 2023 05:53:57) CuisUniversity-5799.image priorSource: 9418740!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 05:54:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 05:54:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 05:54:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 05:54:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 05:54:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 05:54:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 05:54:11'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 05:54:12'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 05:54:13'!
PASSED!

----QUIT----(1 June 2023 05:54:17) CuisUniversity-5799.image priorSource: 9505647!

----STARTUP---- (1 June 2023 15:15:07) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5799\windows64\CuisUniversity-5799.image!

!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 15:29:40' prior: 50625753 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addPortfolio: self.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 15:38:17'!
addPortfolio: aPortfolio

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aPortfolio name.
	self incrementIndentation.
	aPortfolio addSubaccountsTo: self.
	report add: indentation , aPortfolio balance.
	self decrementIndentation.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'LMR 6/1/2023 15:39:20' prior: 50625809 overrides: 50624254!
fillTreeReport: aTreeReport 
	
	aTreeReport addAccount: self.! !
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 15:40:59'!
addAccount: anAccount

	| indentation indentedSummary |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.
	indentation := indentation , '   '.
	indentedSummary := (AccountSummary of: anAccount) report collect: [:reportLine | indentation , reportLine].
	report addAll: indentedSummary.! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 15:44:34'!
addSubaccountsTo: aTreeReport 
	
	accounts do: [:anAccount| anAccount fillTreeReport: aTreeReport].! !
!Portfolio methodsFor: 'reports' stamp: 'LMR 6/1/2023 15:44:57' prior: 50628922!
addSubaccountsTo: aTreeReport 
	
	accounts do: [:anAccount| anAccount fillTreeReport: aTreeReport].! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 15:46:10'!
addAccount: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.! !
!PortfolioStructure methodsFor: 'add to report' stamp: 'LMR 6/1/2023 15:46:52'!
addPortfolio: aPortfolio

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aPortfolio name.
	self incrementIndentation.
	aPortfolio addSubaccountsTo: self.
	self decrementIndentation.! !

!methodRemoval: PortfolioStructure #addBalanceOf: stamp: 'LMR 6/1/2023 15:47:07'!
addBalanceOf: anAccount

	!

!methodRemoval: PortfolioStructure #addNameOf: stamp: 'LMR 6/1/2023 15:47:08'!
addNameOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.!

!methodRemoval: PortfolioStructure #addTransactionsOf: stamp: 'LMR 6/1/2023 15:47:11'!
addTransactionsOf: anAccount!

!methodRemoval: TransactionTreeReport #addBalanceOf: stamp: 'LMR 6/1/2023 15:47:24'!
addBalanceOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , 'Balance = ' , anAccount balance asString.!

!methodRemoval: TransactionTreeReport #addNameOf: stamp: 'LMR 6/1/2023 15:47:25'!
addNameOf: anAccount

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , anAccount name.!

!methodRemoval: TransactionTreeReport #addTransactionsOf: stamp: 'LMR 6/1/2023 15:47:26'!
addTransactionsOf: anAccount

	| indentation indentedSummary |
	indentation := ''.
	indentationLevel+1 timesRepeat: [indentation := indentation , '   '].
	indentedSummary := (AccountSummary of: anAccount) report collect: [:reportLine | indentation , reportLine].
	report addAll: indentedSummary.!
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 15:47:53'!
addAccount: anAccount

	self subclassResponsibility ! !
!TreeReport methodsFor: 'add to report' stamp: 'LMR 6/1/2023 15:48:07'!
addPortfolio: aPortfolio

	self subclassResponsibility ! !

!methodRemoval: TreeReport #addBalanceOf: stamp: 'LMR 6/1/2023 15:48:11'!
addBalanceOf: anAccount

	self subclassResponsibility !

!methodRemoval: TreeReport #addNameOf: stamp: 'LMR 6/1/2023 15:48:12'!
addNameOf: aName

	self subclassResponsibility.!

!methodRemoval: TreeReport #addTransactionsOf: stamp: 'LMR 6/1/2023 15:48:14'!
addTransactionsOf: aName

	self subclassResponsibility.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 15:49:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 15:49:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 15:49:29'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 15:49:30'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 15:49:31'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 15:49:32'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 15:49:32'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:49:32'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:49:32'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 15:49:32'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 15:49:32'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:49:32'!
ERROR!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 15:49:32'!
ERROR!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 15:49:32'!
ERROR!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:49:37'!
ERROR!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 15:50:04' prior: 50628889 overrides: 50629001!
addPortfolio: aPortfolio

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aPortfolio name.
	self incrementIndentation.
	aPortfolio addSubaccountsTo: self.
	report add: indentation , aPortfolio balance asString.
	self decrementIndentation.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 15:50:10'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:50:10'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:50:10'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 15:50:10'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 15:50:11'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:50:11'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 15:50:11'!
FAILURE!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 15:50:11'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:50:14'!
FAILURE!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 15:50:50' prior: 50629194 overrides: 50629001!
addPortfolio: aPortfolio

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aPortfolio name.
	self incrementIndentation.
	aPortfolio addSubaccountsTo: self.
	report add: indentation , 'Balance = ' , aPortfolio balance asString.
	self decrementIndentation.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 15:50:57'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:50:57'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:50:57'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 15:50:57'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 15:50:57'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:50:57'!
FAILURE!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 15:50:57'!
FAILURE!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 15:50:57'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:50:59'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:52:09'!
FAILURE!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:52:10'!
FAILURE!
!TransactionTreeReport methodsFor: 'report' stamp: 'LMR 6/1/2023 15:53:15' prior: 50629244 overrides: 50629001!
addPortfolio: aPortfolio

	| indentation |
	indentation := ''.
	indentationLevel timesRepeat: [indentation := indentation , '   '].
	report add: indentation , aPortfolio name.
	self incrementIndentation.
	aPortfolio addSubaccountsTo: self.
	report add: indentation , '   Balance = ' , aPortfolio balance asString.
	self decrementIndentation.! !

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 15:53:18'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:53:18'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 15:53:18'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 15:53:19'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 15:53:19'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 15:53:19'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 15:53:19'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 15:53:19'!
PASSED!

!classDefinition: #TransferTest category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 15:55:00'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'transfererAccount2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #TransferTest category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 15:55:01'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'transfererAccount2 transfereeAccount2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/1/2023 15:54:59'!
setup

	transfererAccount2 := ReceptiveAccount new.
	transfereeAccount2 := ReceptiveAccount new.! !
!TransferTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 15:55:19' prior: 50622242!
test01TransferBetweenTwoAccountsAffectsTheirBalance

	Transfer register: 100 from: transfererAccount2 to: transfereeAccount2.
	
	self assert: transfererAccount2 balance equals: -100.
	self assert: transfereeAccount2 balance equals: 100! !
!TransferTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 15:55:34' prior: 50622225!
test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount2 to: transfereeAccount2.
	
	self assert: (transfererAccount2 hasRegistered: aTransfer withdraw).
	self assert: (transfereeAccount2 hasRegistered: aTransfer deposit).! !
!TransferTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 15:55:49' prior: 50622257!
test03DepositOfATransferKnowsItsTransfer

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount2 to: transfereeAccount2.

	self assert: aTransfer deposit transfer equals: aTransfer .! !
!TransferTest methodsFor: 'tests' stamp: 'LMR 6/1/2023 15:56:04' prior: 50622271!
test04WithdrawOfATransferKnowsItsTransfer

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount2 to: transfereeAccount2.

	self assert: aTransfer withdraw transfer equals: aTransfer .! !

!classDefinition: #TransferTest category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 15:56:19'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'transfererAccount transfereeAccount2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:19' prior: 50629381!
test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount2.
	
	self assert: (transfererAccount hasRegistered: aTransfer withdraw).
	self assert: (transfereeAccount2 hasRegistered: aTransfer deposit).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:19' prior: 50629364!
setup

	transfererAccount := ReceptiveAccount new.
	transfereeAccount2 := ReceptiveAccount new.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:19' prior: 50629394!
test03DepositOfATransferKnowsItsTransfer

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount2.

	self assert: aTransfer deposit transfer equals: aTransfer .! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:19' prior: 50629370!
test01TransferBetweenTwoAccountsAffectsTheirBalance

	Transfer register: 100 from: transfererAccount to: transfereeAccount2.
	
	self assert: transfererAccount balance equals: -100.
	self assert: transfereeAccount2 balance equals: 100! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:19' prior: 50629404!
test04WithdrawOfATransferKnowsItsTransfer

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount2.

	self assert: aTransfer withdraw transfer equals: aTransfer .! !

!classDefinition: #TransferTest category: 'Portfolio-Ejercicio' stamp: 'LMR 6/1/2023 15:56:22'!
TestCase subclass: #TransferTest
	instanceVariableNames: 'transfererAccount transfereeAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:22' prior: 50629423!
test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: (transfererAccount hasRegistered: aTransfer withdraw).
	self assert: (transfereeAccount hasRegistered: aTransfer deposit).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:22' prior: 50629436!
setup

	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:22' prior: 50629443!
test03DepositOfATransferKnowsItsTransfer

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.

	self assert: aTransfer deposit transfer equals: aTransfer .! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:22' prior: 50629453!
test01TransferBetweenTwoAccountsAffectsTheirBalance

	Transfer register: 100 from: transfererAccount to: transfereeAccount.
	
	self assert: transfererAccount balance equals: -100.
	self assert: transfereeAccount balance equals: 100! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/1/2023 15:56:22' prior: 50629464!
test04WithdrawOfATransferKnowsItsTransfer

	| aTransfer |
	aTransfer := Transfer register: 100 from: transfererAccount to: transfereeAccount.

	self assert: aTransfer withdraw transfer equals: aTransfer .! !

----SNAPSHOT----(1 June 2023 15:59:18) CuisUniversity-5799.image priorSource: 9511222!

----QUIT----(1 June 2023 15:59:42) CuisUniversity-5799.image priorSource: 9532239!

----STARTUP---- (1 June 2023 16:03:41) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5799\windows64\CuisUniversity-5799.image!

!TransferTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/1/2023 16:03:55' overrides: 16961394!
setUp

	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.! !

!methodRemoval: TransferTest #setup stamp: 'LMR 6/1/2023 16:03:56'!
setup

	transfererAccount := ReceptiveAccount new.
	transfereeAccount := ReceptiveAccount new.!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'LMR 6/1/2023 16:03:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'LMR 6/1/2023 16:04:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'LMR 6/1/2023 16:04:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test01AccountSummaryOfANewAccountIsEmpty stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test02AccountWithOneDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test03AccountWithOneWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test04AccountWithOneTransferDepositHasItInItsAccountSummary stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test05AccountWithOneTransferWithdrawHasItInItsAccountSummary stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test06AccountWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test07PortfolioWithMultipleTransactionsHasThemInItsAccountSummary stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test08NetTransferOfANewAccountIs0 stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test09AnAccountWithATransferHasItInItsNetTransfer stamp: 'LMR 6/1/2023 16:04:02'!
PASSED!

!testRun: #ReportsTest #test10AnAccountWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #ReportsTest #test11APortfolioWithMultipleTransactionsHasACorrectNetTransfer stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TransferTest #test01TransferBetweenTwoAccountsAffectsTheirBalance stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TransferTest #test02TransferBetweenTwoAccountsKnowItsTransactionsAndIsRegisteredInBoth stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TransferTest #test03DepositOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TransferTest #test04WithdrawOfATransferKnowsItsTransfer stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TreeReportsTest #test01NewPortfolioOnlyHasItsNameOnItsReport stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TreeReportsTest #test02PortfolioWithOneAccountHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TreeReportsTest #test03PortfolioWithOnePortfolioHasBothNamesOnItsReport stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TreeReportsTest #test04PortfolioWithManyAccountHasAllNamesOnItsReport stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TreeReportsTest #test05PortfolioWithManyAccountAndPortfoliosHasAllNamesOnItsReportCorrectlyIndented stamp: 'LMR 6/1/2023 16:04:03'!
PASSED!

!testRun: #TreeReportsTest #test06NewPortfolioOnlyHasItsNameAnd0BalanceOnItsReport stamp: 'LMR 6/1/2023 16:04:04'!
PASSED!

!testRun: #TreeReportsTest #test07PortfolioWithOneAccountHasTheAccountsTransactionsAndBalanceOnReport stamp: 'LMR 6/1/2023 16:04:04'!
PASSED!

!testRun: #TreeReportsTest #test08PortfolioTransactionTreeReportWorksRecursively stamp: 'LMR 6/1/2023 16:04:04'!
PASSED!

----SNAPSHOT----(1 June 2023 16:04:09) CuisUniversity-5799.image priorSource: 9532327!

----QUIT----(1 June 2023 16:04:27) CuisUniversity-5799.image priorSource: 9538389!