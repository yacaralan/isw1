

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!


----STARTUP---- (26 June 2023 19:06:06) as /home/clinux01/Escritorio/linux64/CuisUniversity-5832.image!


----SNAPSHOT----(26 June 2023 19:06:28) CuisUniversity-5832.image priorSource: 9509134!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:08:15'!
lineIsCustomer: line

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:08:15' prior: 50628661 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:08:29'!
lineIsAddress: line

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:08:29' prior: 50628826 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self lineIsAddress: line) ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:09:50'!
addAddressFromLine: line toCustomer: newCustomer

	| addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:09:50' prior: 50628863 overrides: 16902254!
value

	"
	self importCustomers
	"
	| newCustomer line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:10:49' prior: 50628895!
addAddressFromLine: line toCustomer: newCustomer

	| addressData newAddress |
	addressData := line findTokens: $,.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:12:46' prior: 50628912 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ | customerData newCustomer |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		"(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ]."

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:12:59'!
addCustomerFromLine: line

	| customerData newCustomer |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:12:59' prior: 50628952 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ self addCustomerFromLine: line ].

		"(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ]."

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:13:21' prior: 50628990 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].

		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:13:53' prior: 50628974!
addCustomerFromLine: line

	| customerData newCustomer |
	customerData := line findTokens: $,.
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	session persist: newCustomer.
	^newCustomer.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:13:57'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:16:23' prior: 50629004 overrides: 16902254!
value

	"
	self importCustomers
	"
	"| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: "[| line newCustomer |
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:16:49' prior: 50629036 overrides: 16902254!
value

	"
	self importCustomers
	"
	"| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: "[| line newCustomer |
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].

		" line := readStream nextLine. " ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:17:45'!
importDataFromLine

	| line newCustomer |
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:17:45' prior: 50629051 overrides: 16902254!
value

	"
	self importCustomers
	"
	"| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: "[self importDataFromLine.

		" line := readStream nextLine. " ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:18:21' prior: 50629065!
importDataFromLine

	| line newCustomer |
	(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
	(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:19:24'!
importDataFromLine: aLine

	| line newCustomer |
	(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
	(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 19:19:24' prior: 50629076 overrides: 16902254!
value

	"
	self importCustomers
	"
	"| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: "[self importDataFromLine: line.

		" line := readStream nextLine. " ].

	! !

!methodRemoval: CustomerImporter #importDataFromLine stamp: 'LMR 6/26/2023 19:19:24'!
importDataFromLine

	| line newCustomer |
	(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
	(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:19:37' prior: 50629095!
importDataFromLine: aLine

	| newCustomer |
	(self lineIsCustomer: aLine) ifTrue: [ newCustomer := self addCustomerFromLine: aLine ].
	(self lineIsAddress: aLine) ifTrue: [ self addAddressFromLine: aLine toCustomer: newCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:19:55' prior: 50629107 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [self importDataFromLine: line.
		 line := readStream nextLine.  ].

	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:19:57'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:19:57'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:16:49' prior: 50629137 overrides: 16902254!
value

	"
	self importCustomers
	"
	"| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: "[| line newCustomer |
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].

		" line := readStream nextLine. " ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:22:10' prior: 50629151 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].

		 line := readStream nextLine.  ].

	! !

!methodRemoval: CustomerImporter #importDataFromLine: stamp: 'LMR 6/26/2023 19:22:22'!
importDataFromLine: aLine

	| newCustomer |
	(self lineIsCustomer: aLine) ifTrue: [ newCustomer := self addCustomerFromLine: aLine ].
	(self lineIsAddress: aLine) ifTrue: [ self addAddressFromLine: aLine toCustomer: newCustomer ]!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:22:28'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:22:37'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:24:30' prior: 50629167 overrides: 16902254!
value

	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].
		 line := readStream nextLine.  ].

	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:24:35'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:30:15' prior: 50629018!
addCustomerFromLine: line

	| customerData newCustomer |
	customerData := line findTokens: $,.
	newCustomer := Customer fromData: customerData.
	session persist: newCustomer.
	^newCustomer.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:30:19'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:30:19'!
ERROR!
!Customer class methodsFor: 'instance creation' stamp: 'LMR 6/26/2023 19:30:25'!
fromData: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFromData: anOrderedCollection ! !
!Customer class methodsFor: 'instance creation' stamp: 'LMR 6/26/2023 19:30:40' prior: 50629227!
fromData: anOrderedCollection 
	
	^self new initializeFromData: anOrderedCollection ! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:30:40'!
ERROR!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LMR 6/26/2023 19:30:44'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:30:44'!
initializeFromData: anOrderedCollection 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.! !
!Customer methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:31:44' prior: 50629254!
initializeFromData: customerData 
	
	self firstName: customerData second.
	self lastName: customerData third.
	self identificationType: customerData fourth.
	self identificationNumber: customerData fifth.! !
!Customer methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:32:07' prior: 50629261!
initializeFromData: customerData 
	
	firstName := customerData second.
	self lastName: customerData third.
	self identificationType: customerData fourth.
	self identificationNumber: customerData fifth.! !
!Customer methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:32:51' prior: 50629271!
initializeFromData: customerData 
	
	firstName := customerData second.
	lastName := customerData third.
	identificationType := customerData fourth.
	identificationNumber := customerData fifth.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:32:54'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:33:02'!
PASSED!

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'LMR 6/26/2023 19:33:31'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer class methodsFor: 'instance creation' stamp: 'LMR 6/26/2023 19:33:42' prior: 50629236!
fromData: customerData 
	
	^self new initializeFromData: customerData ! !
!Customer methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:34:24' prior: 50629281!
initializeFromData: customerData 
	
	firstName := customerData second.
	lastName := customerData third.
	identificationType := customerData fourth.
	identificationNumber := customerData fifth.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:35:03' prior: 50629317!
initializeFromData: customerData 
	
	super initialize.
	firstName := customerData second.
	lastName := customerData third.
	identificationType := customerData fourth.
	identificationNumber := customerData fifth.
	addresses := OrderedCollection new.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:35:07'!
PASSED!

!methodRemoval: Customer #initialize stamp: 'LMR 6/26/2023 19:35:12'!
initialize

	super initialize.
	addresses := OrderedCollection new.!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:38:34' prior: 50629197 overrides: 16902254!
value

	| linex newCustomer |

	linex := readStream nextLine.
	[ linex notNil ] whileTrue: [
		(self lineIsCustomer: linex) ifTrue: [ newCustomer := self addCustomerFromLine: linex ].
		(self lineIsAddress: linex) ifTrue: [ self addAddressFromLine: linex toCustomer: newCustomer ].
		 linex := readStream nextLine.  ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:38:38' prior: 50629347 overrides: 16902254!
value

	| linex newCustomerx |

	linex := readStream nextLine.
	[ linex notNil ] whileTrue: [
		(self lineIsCustomer: linex) ifTrue: [ newCustomerx := self addCustomerFromLine: linex ].
		(self lineIsAddress: linex) ifTrue: [ self addAddressFromLine: linex toCustomer: newCustomerx ].
		 linex := readStream nextLine.  ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:38:47' prior: 50628820!
lineIsCustomer: x

	^ x beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:38:53' prior: 50629375!
lineIsCustomer: linex

	^ linex beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:39:00' prior: 50628858!
lineIsAddress: linex

	^ linex beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:39:05' prior: 50629213!
addCustomerFromLine: linex

	| customerData newCustomer |
	customerData := linex findTokens: $,.
	newCustomer := Customer fromData: customerData.
	session persist: newCustomer.
	^newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:39:20' prior: 50629390!
addCustomerFromLine: linex

	| customerData newCustomerx |
	customerData := linex findTokens: $,.
	newCustomerx := Customer fromData: customerData.
	session persist: newCustomerx.
	^newCustomerx.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:39:31' prior: 50628935!
addAddressFromLine: linex toCustomer: newCustomer

	| addressData newAddress |
	addressData := linex findTokens: $,.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:39:35' prior: 50629409!
addAddressFromLine: linex toCustomer: newCustomerx

	| addressData newAddress |
	addressData := linex findTokens: $,.
	newAddress := Address new.
	newCustomerx addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:39:59' prior: 50629361 overrides: 16902254!
value

	| line newCustomerx |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomerx := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomerx ].
		 line := readStream nextLine.  ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:40:02' prior: 50629442 overrides: 16902254!
value

	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].
		 line := readStream nextLine.  ].

	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 19:40:05' prior: 50629456 overrides: 16902254!
value

	|  newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].
		 line := readStream nextLine.  ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LMR 6/26/2023 19:40:05'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 19:40:09' prior: 50629470 overrides: 16902254!
value

	 

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].
		 line := readStream nextLine.  ].

	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LMR 6/26/2023 19:40:09'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:40:13' prior: 50629492 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer: line) ifTrue: [ newCustomer := self addCustomerFromLine: line ].
		(self lineIsAddress: line) ifTrue: [ self addAddressFromLine: line toCustomer: newCustomer ].
		 line := readStream nextLine.  ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:40:31'!
lineIsCustomer

	^line beginsWith: 'C'! !

!methodRemoval: CustomerImporter #lineIsCustomer: stamp: 'LMR 6/26/2023 19:40:34'!
lineIsCustomer: linex

	^ linex beginsWith: 'C'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:40:46'!
lineIsAddress

	^line beginsWith: 'A'! !

!methodRemoval: CustomerImporter #lineIsAddress: stamp: 'LMR 6/26/2023 19:40:49'!
lineIsAddress: linex

	^ linex beginsWith: 'A'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:41:02'!
addCustomerFromLine

	| customerData |
	customerData := line findTokens: $,.
	newCustomer := Customer fromData: customerData.
	session persist: newCustomer.
	^newCustomer.! !

!methodRemoval: CustomerImporter #addCustomerFromLine: stamp: 'LMR 6/26/2023 19:41:13'!
addCustomerFromLine: linex

	| customerData newCustomerx |
	customerData := linex findTokens: $,.
	newCustomerx := Customer fromData: customerData.
	session persist: newCustomerx.
	^newCustomerx.!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:41:31'!
addAddressFromLineToCustomer

	| addressData newAddress |
	addressData := line findTokens: $,.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth! !

!methodRemoval: CustomerImporter #addAddressFromLine:toCustomer: stamp: 'LMR 6/26/2023 19:41:33'!
addAddressFromLine: linex toCustomer: newCustomerx

	| addressData newAddress |
	addressData := linex findTokens: $,.
	newAddress := Address new.
	newCustomerx addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:41:54' prior: 50629514 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(self lineIsCustomer) ifTrue: [ newCustomer := self addCustomerFromLine ].
		(self lineIsAddress) ifTrue: [ self addAddressFromLineToCustomer ].
		 line := readStream nextLine.  ].

	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:41:56'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:43:47'!
importDataFromCurrentLine

	(self lineIsCustomer) ifTrue: [ newCustomer := self addCustomerFromLine ].
		(self lineIsAddress) ifTrue: [ self addAddressFromLineToCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:43:47' prior: 50629591 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self importDataFromCurrentLine.
		 line := readStream nextLine.  ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:44:02' prior: 50629613 overrides: 16902254!
value

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		self importDataFromCurrentLine.
		line := readStream nextLine.  ].

	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:44:04'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:45:06' prior: 50629559!
addAddressFromLineToCustomer

	| addressData newAddress |
	addressData := line findTokens: $,.
	newAddress := Address fromData: addressData.
	newCustomer addAddress: newAddress.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:45:29'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:45:29'!
ERROR!
!Address class methodsFor: 'instance creation' stamp: 'LMR 6/26/2023 19:45:32'!
fromData: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFromData: anOrderedCollection ! !
!Address class methodsFor: 'instance creation' stamp: 'LMR 6/26/2023 19:45:50' prior: 50629644!
fromData: addressData 
	
	^self new initializeFromData: addressData ! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:45:51'!
ERROR!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LMR 6/26/2023 19:46:00'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province addressData_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Address methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:46:00'!
initializeFromData: addressData 
	self shouldBeImplemented.
	addressData_CHANGE_ME := addressData.! !
!Address methodsFor: 'initialization' stamp: 'LMR 6/26/2023 19:46:37' prior: 50629669!
initializeFromData: addressData 
	
	streetName := addressData second.
	streetNumber := addressData third asNumber .
	town := addressData fourth.
	zipCode := addressData fifth asNumber .
	province := addressData sixth.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:46:44'!
PASSED!

Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Address category: 'CustomerImporter' stamp: 'LMR 6/26/2023 19:47:22'!
Object subclass: #Address
	instanceVariableNames: 'id streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:47:36'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:48:10' prior: 50629631!
addAddressFromLineToCustomer

	| addressData |
	addressData := line findTokens: $,.
	newCustomer addAddress: Address fromData: addressData.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:48:45' prior: 50629704!
addAddressFromLineToCustomer

	| addressData |
	addressData := line findTokens: $,.
	newCustomer addAddress: (Address fromData: addressData).! !

----SNAPSHOT----(26 June 2023 19:49:44) CuisUniversity-5832.image priorSource: 9509325!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:50:19' prior: 50629542!
addCustomerFromLine

	| customerData |
	customerData := line findTokens: $,.
	newCustomer := Customer fromData: customerData.
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:50:33' prior: 50629604!
importDataFromCurrentLine

	(self lineIsCustomer) ifTrue: [ self addCustomerFromLine ].
		(self lineIsAddress) ifTrue: [ self addAddressFromLineToCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 19:50:40' prior: 50629731!
importDataFromCurrentLine

	(self lineIsCustomer) ifTrue: [ self addCustomerFromLine ].
	(self lineIsAddress) ifTrue: [ self addAddressFromLineToCustomer ].! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 19:50:44'!
PASSED!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'LMR 6/26/2023 20:01:18'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream line newCustomer lineFields'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:01:16' prior: 50629739!
importDataFromCurrentLine

	lineFields := line findTokens: $,.
	(self lineIsCustomer) ifTrue: [ self addCustomerFromLine ].
	(self lineIsAddress) ifTrue: [ self addAddressFromLineToCustomer ].! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:01:30' prior: 50629723!
addCustomerFromLine

	| customerData |
	customerData := lineFields.
	newCustomer := Customer fromData: customerData.
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:01:38' prior: 50629712!
addAddressFromLineToCustomer

	| addressData |
	addressData := lineFields.
	newCustomer addAddress: (Address fromData: addressData).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:01:41'!
PASSED!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:08:34' prior: 50629769!
addCustomerFromLine

	newCustomer := Customer fromData: lineFields.
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:08:41' prior: 50629777!
addAddressFromLineToCustomer

	newCustomer addAddress: (Address fromData: lineFields).! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:12:41'!
isCustomerRecord

	^line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 20:12:41' prior: 50629759!
importDataFromCurrentLine

	lineFields := line findTokens: $,.
	(self isCustomerRecord) ifTrue: [ self addCustomerFromLine ].
	(self lineIsAddress) ifTrue: [ self addAddressFromLineToCustomer ].! !

!methodRemoval: CustomerImporter #lineIsCustomer stamp: 'LMR 6/26/2023 20:12:41'!
lineIsCustomer

	^line beginsWith: 'C'!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:14:04' prior: 50629800!
isCustomerRecord

	^lineFields first = 'C'! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:14:47'!
isAddressRecord

	^line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 20:14:47' prior: 50629805!
importDataFromCurrentLine

	lineFields := line findTokens: $,.
	(self isCustomerRecord) ifTrue: [ self addCustomerFromLine ].
	(self isAddressRecord) ifTrue: [ self addAddressFromLineToCustomer ].! !

!methodRemoval: CustomerImporter #lineIsAddress stamp: 'LMR 6/26/2023 20:14:47'!
lineIsAddress

	^line beginsWith: 'A'!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:14:51' prior: 50629822!
isAddressRecord

	^lineFields first = 'A'! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:15:22'!
separateLineIntoFields

	^ lineFields := line findTokens: $,! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:15:22' prior: 50629827!
importDataFromCurrentLine

	self separateLineIntoFields.
	(self isCustomerRecord) ifTrue: [ self addCustomerFromLine ].
	(self isAddressRecord) ifTrue: [ self addAddressFromLineToCustomer ].! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:15:30' prior: 50629844!
separateLineIntoFields

	lineFields := line findTokens: $,! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:15:45' prior: 50629849!
importDataFromCurrentLine

	self separateLineIntoFields.
	self isCustomerRecord ifTrue: [ self addCustomerFromLine ].
	self isAddressRecord ifTrue: [ self addAddressFromLineToCustomer ].! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:15:54'!
PASSED!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:16:35'!
importAddress

	newCustomer addAddress: (Address fromData: lineFields).! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 20:16:35' prior: 50629864!
importDataFromCurrentLine

	self separateLineIntoFields.
	self isCustomerRecord ifTrue: [ self addCustomerFromLine ].
	self isAddressRecord ifTrue: [ self importAddress ].! !

!methodRemoval: CustomerImporter #addAddressFromLineToCustomer stamp: 'LMR 6/26/2023 20:16:35'!
addAddressFromLineToCustomer

	newCustomer addAddress: (Address fromData: lineFields).!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:16:46'!
importCustomer

	newCustomer := Customer fromData: lineFields.
	session persist: newCustomer.! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 20:16:46' prior: 50629881!
importDataFromCurrentLine

	self separateLineIntoFields.
	self isCustomerRecord ifTrue: [ self importCustomer ].
	self isAddressRecord ifTrue: [ self importAddress ].! !

!methodRemoval: CustomerImporter #addCustomerFromLine stamp: 'LMR 6/26/2023 20:16:46'!
addCustomerFromLine

	newCustomer := Customer fromData: lineFields.
	session persist: newCustomer.!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:19:26'!
extractFields

	lineFields := line findTokens: $,! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 20:19:26' prior: 50629902!
importDataFromCurrentLine

	self extractFields.
	self isCustomerRecord ifTrue: [ self importCustomer ].
	self isAddressRecord ifTrue: [ self importAddress ].! !

!methodRemoval: CustomerImporter #separateLineIntoFields stamp: 'LMR 6/26/2023 20:19:26'!
separateLineIntoFields

	lineFields := line findTokens: $,!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 20:20:35' prior: 50629621 overrides: 16902254!
value

	[ line := readStream nextLine.
	line notNil ] whileTrue: [ self importDataFromCurrentLine ].

	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:20:39'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 20:21:13'!
hasNextLine

	line := readStream nextLine.
	line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 20:21:13' prior: 50629935 overrides: 16902254!
value

	[ self hasNextLine ] whileTrue: [ self importDataFromCurrentLine ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'LMR 6/26/2023 20:21:27' prior: 50629950 overrides: 16902254!
value

	[ self hasNextLine ] whileTrue: [ self importDataFromCurrentLine ].! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:21:28'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:21:28'!
ERROR!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:21:40' prior: 50629944!
hasNextLine

	line := readStream nextLine.
	^line notNil! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:22:17'!
PASSED!

----SNAPSHOT----(26 June 2023 20:27:57) CuisUniversity-5832.image priorSource: 9538192!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 20:43:38'!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withMessageText: [:messageText | self assert: CustomerImporter inputStreamCanNotBeEmptyErrorDescription equals: messageText].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 20:44:21' prior: 50629978!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withMessageText: [:messageText | self assert: CustomerImporter nilInputErrorDescription equals: messageText].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 20:44:30' prior: 50629989!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withMessageText: [:messageText | self assert: CustomerImporter nilInputErrorDescription equals: messageText].! !
!CustomerImporter class methodsFor: 'nil' stamp: 'LMR 6/26/2023 20:45:01'!
nilInputErrorDescription

	^'Input stream is nil'! !
!CustomerImporter class methodsFor: 'instance creation' stamp: 'LMR 6/26/2023 20:46:22' prior: 50628702!
from: aReadStream into: aSession
	
	aReadStream ifNil: [self error: self nilInputErrorDescription].
	^self new initializeFrom: aReadStream into: aSession! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:46:35'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 20:46:35'!
ERROR!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 20:46:35'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 20:47:56' prior: 50629999!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText].! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:48:06'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 20:48:06'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 20:49:37' prior: 50628410!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 20:52:13'!
test03Import

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter canNotAddAddressBeforeCustomerErrorDescription equals: anError messageText].! !
!CustomerImporter class methodsFor: 'error description' stamp: 'LMR 6/26/2023 20:52:55'!
canNotAddAddressBeforeCustomerErrorDescription

	^'Can not add address before customer'! !
!CustomerImporter class methodsFor: 'error description' stamp: 'LMR 6/26/2023 20:53:50'!
firstLineAddressErrorDescription

	^'Can not add address before customer'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 20:53:50' prior: 50630053!
test03Import

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText].! !

!methodRemoval: CustomerImporter class #canNotAddAddressBeforeCustomerErrorDescription stamp: 'LMR 6/26/2023 20:53:50'!
canNotAddAddressBeforeCustomerErrorDescription

	^'Can not add address before customer'!
!CustomerImporter class methodsFor: 'error description' stamp: 'LMR 6/26/2023 20:54:25' prior: 50630075!
firstLineAddressErrorDescription

	^'First line can not be an address'! !

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 20:54:34'!
ERROR!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 20:56:46' prior: 50629875!
importAddress

	newCustomer ifNil: [self error: self class firstLineAddressErrorDescription].
	newCustomer addAddress: (Address fromData: lineFields).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 20:56:48'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 20:56:49'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 20:56:49'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:01:52'!
test04Import

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText].! !

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:02:00'!
FAILURE!
!CustomerImporter class methodsFor: 'error description' stamp: 'LMR 6/26/2023 21:02:38'!
InvalidAmountOfFieldsErrorDescription

	^'Invalid amount of fields'! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 21:04:47' prior: 50629895!
importCustomer

	lineFields size = 5 ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription].
	newCustomer := Customer fromData: lineFields.
	session persist: newCustomer.! !

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:04:53'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:04:54'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:04:54'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:04:54'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:04:54'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:05:46'!
test05Import

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText].! !

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:05:48'!
FAILURE!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 21:06:19' prior: 50630112!
importAddress

	lineFields size = 6 ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription].
	newCustomer ifNil: [self error: self class firstLineAddressErrorDescription].
	newCustomer addAddress: (Address fromData: lineFields).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:06:21'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:06:21'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:06:21'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:06:21'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:06:21'!
PASSED!

record := 'A,San Martin,3322,Olivos,1636,BsAs'.
comas := record count: $,.!

record := 'A,San Martin,3322,Olivos,1636,BsAs'.!

comas := record count: $,!

comas := record count: $,.!

comas := record count: [$,].!

comas := record count: [:aChar | aChar = $,].!

comas := record count: [:aChar | aChar = $,].!

comas := record occurrencesOf: $,.!

record := 'A,San Martin,3322,Olivos,1636,BsAs'.
comas := record occurrencesOf: $,.

record size - 1 = comas.!

line := 'A,San Martin,3322,Olivos,1636,BsAs'.
record := line findTokens: $,.
comas := record occurrencesOf: $,.

record size - 1 = comas. false !

record := line findTokens: $,.!

comas := record occurrencesOf: $,.!

line := 'A,San Martin,3322,Olivos,1636,BsAs'.
record := line findTokens: $,.
comas := line occurrencesOf: $,.

record size - 1 = comas.!

line := 'A,San Martin,,3322,Olivos,1636,BsAs'.
record := line findTokens: $,.
comas := line occurrencesOf: $,.

record size - 1 = comas.!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:23:03'!
test06Import

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText].! !
!CustomerImporter class methodsFor: 'error description' stamp: 'LMR 6/26/2023 21:23:45'!
emptyFieldErrorDescription

	^'Empty field'! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:25:22'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:25:22'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:25:22'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:25:22'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:25:22'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:25:23'!
FAILURE!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:25:23'!
FAILURE!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 21:25:48' prior: 50629916!
extractFields

	lineFields := line findTokens: $,.
	(lineFields size - 1 = line occurrencesOf: $,) ifFalse: [self error: self class emptyFieldErrorDescription].! !

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:25:52'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:25:59'!
ERROR!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:25:59'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:25:59'!
ERROR!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:25:59'!
ERROR!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:25:59'!
ERROR!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:25:59'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:26:10'!
ERROR!
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 21:26:48' prior: 50630274!
extractFields

	lineFields := line findTokens: $,.
	lineFields size - 1 = (line occurrencesOf: $,) ifFalse: [self error: self class emptyFieldErrorDescription].! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:26:49'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:26:50'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:26:50'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:26:50'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:26:50'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:26:50'!
PASSED!

----SNAPSHOT----(26 June 2023 21:27:06) CuisUniversity-5832.image priorSource: 9546377!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:35:14'!
test07Import

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText].! !

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:35:31'!
FAILURE!
!CustomerImporter class methodsFor: 'error description' stamp: 'LMR 6/26/2023 21:37:08'!
invalidRecordErrorDescrition

	^'Invalid record'! !
!CustomerImporter methodsFor: 'category-name' stamp: 'LMR 6/26/2023 21:38:10' prior: 50629921!
importDataFromCurrentLine

	self extractFields.
	self isCustomerRecord ifTrue: [ self importCustomer. ^self ].
	self isAddressRecord ifTrue: [ self importAddress. ^self].
	self error: self class invalidRecordErrorDescrition.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:38:13'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:39:20'!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:41:53' prior: 50630375!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assert: (session selectAllOfType: Customer) size.
	self assert: (session selectAllOfType: Address) size.! !

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:41:59'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:42:15' prior: 50630382!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assert: ((session selectAllOfType: Customer) size).
	self assert: ((session selectAllOfType: Address) size).! !

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:42:16'!
ERROR!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:43:07'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:43:29' prior: 50630395!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assert: (session selectAllOfType: Customer) isEmpty.
	self assert: (session selectAllOfType: Address) isEmpty.! !

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:43:30'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:43:31'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:43:45'!
test09Import

	| inputStream |
	inputStream := ReadStream on: '
'.
	CustomerImporter valueFrom: inputStream into: session.
	self assert: (session selectAllOfType: Customer) isEmpty.
	self assert: (session selectAllOfType: Address) isEmpty.! !

!testRun: #ImportTest #test09Import stamp: 'LMR 6/26/2023 21:43:47'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:46:30' prior: 50630442!
test09Import

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:47:06' prior: 50630455!
test09Import

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText].! !

!testRun: #ImportTest #test09Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:47:07'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:47:08'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/26/2023 21:47:08'!
PASSED!
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:50:04' prior: 50630302!
extractFields

	lineFields := line findTokens: $,.
	lineFields size - 1 ~= (line occurrencesOf: $,) ifTrue: [self error: self class emptyFieldErrorDescription].! !
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:50:17'!
hasEmptyFields

	^ lineFields size - 1 ~= (line occurrencesOf: $,)! !
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:50:17' prior: 50630500!
extractFields

	lineFields := line findTokens: $,.
	self hasEmptyFields ifTrue: [self error: self class emptyFieldErrorDescription].! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:50:25'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:50:25'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:50:25'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:50:25'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:50:26'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:50:26'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:50:26'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:50:26'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/26/2023 21:50:26'!
PASSED!
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:53:32'!
assertAddressHasCorrectAmountOfFields

	^ lineFields size = 6 ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription]! !
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:53:32' prior: 50630187!
importAddress

	self assertAddressHasCorrectAmountOfFields.
	newCustomer ifNil: [self error: self class firstLineAddressErrorDescription].
	newCustomer addAddress: (Address fromData: lineFields).! !
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:54:55'!
assertAddressHasCorrectAmountOfFields: aFieldAmount

	^ lineFields size = 6 ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 21:54:55' prior: 50630549!
importAddress

	self assertAddressHasCorrectAmountOfFields: 6.
	newCustomer ifNil: [self error: self class firstLineAddressErrorDescription].
	newCustomer addAddress: (Address fromData: lineFields).! !

!methodRemoval: CustomerImporter #assertAddressHasCorrectAmountOfFields stamp: 'LMR 6/26/2023 21:54:55'!
assertAddressHasCorrectAmountOfFields

	^ lineFields size = 6 ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription]!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 21:54:55' prior: 50630558!
assertAddressHasCorrectAmountOfFields: aFieldAmount

	^ lineFields size = aFieldAmount ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription]! !
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:56:31'!
assertThatRecordHasFieldAmountEqualTo: aFieldAmount

	^ lineFields size = aFieldAmount ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'LMR 6/26/2023 21:56:31' prior: 50630566!
importAddress

	self assertThatRecordHasFieldAmountEqualTo: 6.
	newCustomer ifNil: [self error: self class firstLineAddressErrorDescription].
	newCustomer addAddress: (Address fromData: lineFields).! !

!methodRemoval: CustomerImporter #assertAddressHasCorrectAmountOfFields: stamp: 'LMR 6/26/2023 21:56:31'!
assertAddressHasCorrectAmountOfFields: aFieldAmount

	^ lineFields size = aFieldAmount ifFalse: [self error: self class InvalidAmountOfFieldsErrorDescription]!
!CustomerImporter methodsFor: 'aux' stamp: 'LMR 6/26/2023 21:56:51' prior: 50630149!
importCustomer

	self assertThatRecordHasFieldAmountEqualTo: 5.
	newCustomer := Customer fromData: lineFields.
	session persist: newCustomer.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:56:52'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:56:53'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/26/2023 21:56:53'!
PASSED!

----SNAPSHOT----(26 June 2023 21:57:48) CuisUniversity-5832.image priorSource: 9557559!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/26/2023 21:59:00'!
test10Import

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText].! !

!testRun: #ImportTest #test10Import stamp: 'LMR 6/26/2023 21:59:05'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/26/2023 21:59:05'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/26/2023 21:59:05'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/26/2023 21:59:05'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/26/2023 21:59:05'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/26/2023 21:59:06'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/26/2023 21:59:06'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/26/2023 21:59:06'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/26/2023 21:59:06'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/26/2023 21:59:06'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/26/2023 21:59:06'!
PASSED!

----SNAPSHOT----(26 June 2023 21:59:35) CuisUniversity-5832.image priorSource: 9567886!

----QUIT----(26 June 2023 21:59:46) CuisUniversity-5832.image priorSource: 9569244!

----STARTUP---- (27 June 2023 18:47:57) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5832\windows64\CuisUniversity-5832.image!

!CustomerImporter methodsFor: 'initialization' stamp: 'LMR 6/27/2023 18:48:17' prior: 50721088!
initializeFrom: aReadStream into: aSession
	
	session := aSession.
	readStream := aReadStream.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/27/2023 18:48:38'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/27/2023 18:48:39'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/27/2023 18:48:39'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/27/2023 18:48:40'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/27/2023 18:48:41'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 18:48:41'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 18:48:41'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 18:48:41'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 18:48:42'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 18:48:42'!
PASSED!

input := ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'.

mySession := DataBaseSession for: (Array with: Address with: Customer).
mySession beginTransaction.

CustomerImporter valueFrom: input into: mySession.!

mySession selectAllOfType: Address!

mySession selectAllOfType: Customer!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:56:16' prior: 50721496!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assert: (session selectAllOfType: Customer) isEmpty.
		self assert: (session selectAllOfType: Address) isEmpty].! !

!testRun: #ImportTest #test02Import stamp: 'LMR 6/27/2023 18:56:19'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/27/2023 18:56:19'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 18:56:20'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 18:56:21'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:56:49'!
assertThatThereAreNoCustomers

	^ self assert: (session selectAllOfType: Customer) isEmpty! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:56:49' prior: 50721424!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomers.
	self assert: (session selectAllOfType: Address) isEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:56:49' prior: 50721572!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomers.
		self assert: (session selectAllOfType: Address) isEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:57:08'!
assertThatThereAreNoAddresses

	^ self assert: (session selectAllOfType: Address) isEmpty! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:57:08' prior: 50721618!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomers.
	self assertThatThereAreNoAddresses.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:57:08' prior: 50721628!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomers.
		self assertThatThereAreNoAddresses].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:57:17'!
assertThatThereAreNoAddressesonSession

	^ self assert: (session selectAllOfType: Address) isEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 18:57:17' prior: 50721656!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomers.
		self assertThatThereAreNoAddressesonSession].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 18:57:18' prior: 50721647!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomers.
	self assertThatThereAreNoAddressesonSession.! !

!methodRemoval: ImportTest #assertThatThereAreNoAddresses stamp: 'LMR 6/27/2023 18:57:18'!
assertThatThereAreNoAddresses

	^ self assert: (session selectAllOfType: Address) isEmpty!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:57:24'!
assertThatThereAreNoCustomersOnSession

	^ self assert: (session selectAllOfType: Customer) isEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 18:57:24' prior: 50721688!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomersOnSession.
	self assertThatThereAreNoAddressesonSession.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 18:57:24' prior: 50721675!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].! !

!methodRemoval: ImportTest #assertThatThereAreNoCustomers stamp: 'LMR 6/27/2023 18:57:24'!
assertThatThereAreNoCustomers

	^ self assert: (session selectAllOfType: Customer) isEmpty!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:58:16'!
test02CanNotImportNilInput

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].! !

!methodRemoval: ImportTest #test02Import stamp: 'LMR 6/27/2023 18:58:16'!
test02Import

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:58:38'!
test01ValidImport

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'LMR 6/27/2023 18:58:38'!
test01Import

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 18:59:07' prior: 50721507!
test03Import

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].! !

!testRun: #ImportTest #test03Import stamp: 'LMR 6/27/2023 18:59:09'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 18:59:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 18:59:10'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'LMR 6/27/2023 18:59:10'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/27/2023 18:59:10'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/27/2023 18:59:10'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 18:59:11'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 18:59:11'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 18:59:11'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 18:59:11'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 18:59:11'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:01:40' prior: 50721782!
test03Import

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		
		self customerWithIdentificationType: 'D' number: '22333444'].! !

!testRun: #ImportTest #test03Import stamp: 'LMR 6/27/2023 19:01:41'!
ERROR!

(session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer)!
!ImportTest methodsFor: 'customer' stamp: 'LMR 6/27/2023 19:03:17' prior: 50721435!
customerWithIdentificationType: anIdType number: anIdNumber

	^(session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer) anyOne! !
!ImportTest methodsFor: 'customer' stamp: 'LMR 6/27/2023 19:03:30' prior: 50721853!
customerWithIdentificationType: anIdType number: anIdNumber

	| selection |
	selection := session
		select: [ :aCustomer | aCustomer identificationType = anIdType and: [ aCustomer identificationNumber = anIdNumber ]]
		ofType: Customer.
	^(selection) anyOne! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:07:55' prior: 50721828!
test03Import

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:08:40'!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].! !

!methodRemoval: ImportTest #test03Import stamp: 'LMR 6/27/2023 19:08:40'!
test03Import

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:10:17' prior: 50721397!
test04Import

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:15:59' prior: 50721929!
test04Import

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].! !

!testRun: #ImportTest #test04Import stamp: 'LMR 6/27/2023 19:16:01'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:16:01'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:16:02'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:16:02'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!

!testRun: #ImportTest #test05Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:16:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:17:49'!
test04CanNotImportCustomerWithIncorrectAmountOfFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].! !

!methodRemoval: ImportTest #test04Import stamp: 'LMR 6/27/2023 19:17:50'!
test04Import

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:18:16'!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText].! !

!methodRemoval: ImportTest #test05Import stamp: 'LMR 6/27/2023 19:18:16'!
test05Import

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:29:29' prior: 50722025!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assert: ((pepe addressAt: 'San Ma' ifNone: [^true]) isKindOf: Boolean).
		].! !

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:29:31'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:29:32'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:29:33'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:29:33'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:29:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:29:33'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 19:29:33'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 19:29:34'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:29:34'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:29:34'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:29:34'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:30:15' prior: 50722054!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assert: ((pepe addressAt: 'San Ma' ifNone: [^true]) isKindOf: Boolean).
		self fail.
		].! !

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:30:16'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:30:17'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:30:17'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:30:18'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:30:18'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:30:18'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 19:30:18'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 19:30:18'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:30:19'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:30:19'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:30:19'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:31:58' prior: 50722108!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe bool |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		bool := false.
		(pepe addressAt: 'San Ma' ifNone: [bool := true]).
		self assert: bool.
		].! !

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:31:59'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:31:59'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:32:00'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:32:00'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:32:00'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:32:01'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 19:32:01'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 19:32:01'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:32:01'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:32:01'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:32:01'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:32:57' prior: 50722162!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		[|bool|
			bool := false.
			(pepe addressAt: 'San Ma' ifNone: [bool := true]).
			self assert: bool.] value
		].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:33:11'!
assertThatCustomer: pepe

	|bool|
			bool := false.
			(pepe addressAt: 'San Ma' ifNone: [bool := true]).
			self assert: bool! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:33:11' prior: 50722217!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		[self assertThatCustomer: pepe.] value
		].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:33:21' prior: 50722240!
assertThatCustomer: aCustomer

	|bool|
			bool := false.
			(aCustomer addressAt: 'San Ma' ifNone: [bool := true]).
			self assert: bool! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:33:35' prior: 50722268!
assertThatCustomer: aCustomer

	|bool|
	bool := false.
	(aCustomer addressAt: 'San Ma' ifNone: [bool := true]).
	self assert: bool! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:34:18'!
assertThatCustomer: aCustomer hasNoAddressesAtStreetNamed: streetName 

	|bool|
	bool := false.
	(aCustomer addressAt: 'San Ma' ifNone: [bool := true]).
	self assert: bool! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 19:34:18' prior: 50722247!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		[self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.] value
		].! !

!methodRemoval: ImportTest #assertThatCustomer: stamp: 'LMR 6/27/2023 19:34:18'!
assertThatCustomer: aCustomer

	|bool|
	bool := false.
	(aCustomer addressAt: 'San Ma' ifNone: [bool := true]).
	self assert: bool!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 19:34:19' prior: 50722282!
assertThatCustomer: aCustomer hasNoAddressesAtStreetNamed: streetName 

	|bool|
	bool := false.
	(aCustomer addressAt: streetName ifNone: [bool := true]).
	self assert: bool! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:34:45' prior: 50722291!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.
		].! !

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:34:49'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:34:50'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:34:50'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:34:51'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:34:51'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:34:51'!
PASSED!

!testRun: #ImportTest #test06Import stamp: 'LMR 6/27/2023 19:34:51'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 19:34:51'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:34:52'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:34:52'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:34:52'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:35:53'!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText].! !

!methodRemoval: ImportTest #test06Import stamp: 'LMR 6/27/2023 19:35:53'!
test06Import

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:36:19' prior: 50722382!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesonSession ].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:36:25'!
assertThatThereAreNoAddressesOnSession

	^ self assert: (session selectAllOfType: Address) isEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 19:36:25' prior: 50722408!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession ].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 19:36:25' prior: 50721892!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 19:36:25' prior: 50721738!
test02CanNotImportNilInput

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 19:36:25' prior: 50721710!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomersOnSession.
	self assertThatThereAreNoAddressesOnSession.! !

!methodRemoval: ImportTest #assertThatThereAreNoAddressesonSession stamp: 'LMR 6/27/2023 19:36:25'!
assertThatThereAreNoAddressesonSession

	^ self assert: (session selectAllOfType: Address) isEmpty!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 19:36:28'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:36:30'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:36:30'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:36:30'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:36:31'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:36:31'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 19:36:31'!
PASSED!

!testRun: #ImportTest #test07Import stamp: 'LMR 6/27/2023 19:36:31'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:36:32'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:36:32'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:36:32'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:37:21' prior: 50721411!
test07Import

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession ].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:37:40'!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession ].! !

!methodRemoval: ImportTest #test07Import stamp: 'LMR 6/27/2023 19:37:40'!
test07Import

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession ].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:39:37'!
test11

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:40:01'!
test12

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.
		].! !

!testRun: #ImportTest #test12 stamp: 'LMR 6/27/2023 19:40:03'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:40:04'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:40:04'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:40:05'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:40:05'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:40:05'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 19:40:05'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 19:40:06'!
PASSED!

!testRun: #ImportTest #test08Import stamp: 'LMR 6/27/2023 19:40:06'!
PASSED!

!testRun: #ImportTest #test09Import stamp: 'LMR 6/27/2023 19:40:06'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:40:06'!
PASSED!

!testRun: #ImportTest #test11 stamp: 'LMR 6/27/2023 19:40:06'!
PASSED!

!testRun: #ImportTest #test12 stamp: 'LMR 6/27/2023 19:40:07'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:42:37'!
test08ImportingEmptyStreamResultsInEmptySession

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomersOnSession.
	self assertThatThereAreNoAddressesOnSession.! !

!methodRemoval: ImportTest #test08Import stamp: 'LMR 6/27/2023 19:42:37'!
test08Import

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatThereAreNoCustomersOnSession.
	self assertThatThereAreNoAddressesOnSession.!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:49:18' prior: 50721445!
test09Import

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:50:51'!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !

!methodRemoval: ImportTest #test09Import stamp: 'LMR 6/27/2023 19:50:51'!
test09Import

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:51:38' prior: 50722684!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/27/2023 19:51:39'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 19:51:40'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 19:51:40'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 19:51:41'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:51:41'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:51:41'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 19:51:41'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 19:51:42'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/27/2023 19:51:42'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/27/2023 19:51:42'!
PASSED!

!testRun: #ImportTest #test10Import stamp: 'LMR 6/27/2023 19:51:42'!
PASSED!

!testRun: #ImportTest #test11 stamp: 'LMR 6/27/2023 19:51:43'!
PASSED!

!testRun: #ImportTest #test12 stamp: 'LMR 6/27/2023 19:51:43'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:52:42' prior: 50721338!
test10Import

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:55:15'!
test10CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].! !

!methodRemoval: ImportTest #test10Import stamp: 'LMR 6/27/2023 19:55:15'!
test10Import

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:55:45'!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].! !

!methodRemoval: ImportTest #test04CanNotImportCustomerWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:55:45'!
test04CanNotImportCustomerWithIncorrectAmountOfFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:55:52'!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.
		].! !

!methodRemoval: ImportTest #test05CanNotImportAddressWithIncorrectAmountOfFields stamp: 'LMR 6/27/2023 19:55:52'!
test05CanNotImportAddressWithIncorrectAmountOfFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.
		].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:56:28'!
test11CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].! !

!methodRemoval: ImportTest #test11 stamp: 'LMR 6/27/2023 19:56:28'!
test11

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'
		].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:56:42'!
test12CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.
		].! !

!methodRemoval: ImportTest #test12 stamp: 'LMR 6/27/2023 19:56:42'!
test12

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.
		].!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:10'!
assertThatSessionIsEmpty

	self assertThatThereAreNoCustomersOnSession.
		self assertThatThereAreNoAddressesOnSession! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:10' prior: 50722468!
test02CanNotImportNilInput

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.
		self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:10' prior: 50722431!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatSessionIsEmpty ].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:10' prior: 50722448!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter firstLineAddressErrorDescription equals: anError messageText.
		self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:11' prior: 50722545!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatSessionIsEmpty ].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:11' prior: 50722785!
test10CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter invalidRecordErrorDescrition equals: anError messageText.
		self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:58:11' prior: 50722714!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError |
		self assert: CustomerImporter emptyFieldErrorDescription equals: anError messageText.
		self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 19:59:39' prior: 50722649!
test08ImportingEmptyStreamResultsInEmptySession

	| inputStream |
	inputStream := ReadStream on: ''.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:01:40' prior: 50722932!
test12CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter InvalidAmountOfFieldsErrorDescription equals: anError messageText.
		
		].
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
		self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.! !

!testRun: #ImportTest #test12CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:01:41'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 20:01:41'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 20:01:42'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 20:01:42'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/27/2023 20:01:42'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/27/2023 20:01:43'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 20:01:43'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:01:43'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/27/2023 20:01:44'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/27/2023 20:01:44'!
PASSED!

!testRun: #ImportTest #test10CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:01:44'!
PASSED!

!testRun: #ImportTest #test11CanNotImportCustomerWithMissingFields stamp: 'LMR 6/27/2023 20:01:44'!
PASSED!

!testRun: #ImportTest #test12CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:01:45'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:04:11' prior: 50722979!
test02CanNotImportNilInput

	self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.].
		self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:04:24'!
assertThatImporting

	^ self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:04:24' prior: 50723139!
test02CanNotImportNilInput

	self assertThatImporting.
		self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:04:32' prior: 50723160!
test02CanNotImportNilInput

	self assertThatImporting.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:04:52'!
assertThatImporting: inputStream

	^ self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:04:52' prior: 50723166!
test02CanNotImportNilInput

	self assertThatImporting: nil.
	self assertThatSessionIsEmpty.! !

!methodRemoval: ImportTest #assertThatImporting stamp: 'LMR 6/27/2023 20:04:52'!
assertThatImporting

	^ self should: [CustomerImporter valueFrom: nil into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.]!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:04:52' prior: 50723171!
assertThatImporting: inputStream

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:05:45'!
assertThatImporting: inputStream raisesErrorWithDescription: expectedErrorDesciption 

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:05:45' prior: 50723182!
test02CanNotImportNilInput

	self assertThatImporting: nil raisesErrorWithDescription: CustomerImporter nilInputErrorDescription.
	self assertThatSessionIsEmpty.! !

!methodRemoval: ImportTest #assertThatImporting: stamp: 'LMR 6/27/2023 20:05:45'!
assertThatImporting: inputStream

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: CustomerImporter nilInputErrorDescription equals: anError messageText.]!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:05:45' prior: 50723209!
assertThatImporting: inputStream raisesErrorWithDescription: expectedErrorDesciption 

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText.]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:07:11' prior: 50723006!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:07:39' prior: 50722817!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:08:18' prior: 50722855!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:08:51' prior: 50722991!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:09:32' prior: 50723023!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:10:05' prior: 50723053!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:10:26' prior: 50723038!
test10CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:10:44' prior: 50722898!
test11CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:11:12' prior: 50723076!
test12CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self assertThatImporting: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'! !

!testRun: #ImportTest #test12CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:12:14'!
PASSED!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 20:12:20'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 20:12:21'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 20:12:21'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/27/2023 20:12:22'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/27/2023 20:12:22'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 20:12:22'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:12:22'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/27/2023 20:12:23'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/27/2023 20:12:23'!
PASSED!

!testRun: #ImportTest #test10CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:12:23'!
PASSED!

!testRun: #ImportTest #test11CanNotImportCustomerWithMissingFields stamp: 'LMR 6/27/2023 20:12:24'!
PASSED!

!testRun: #ImportTest #test12CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:12:24'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'LMR 6/27/2023 20:12:36' prior: 50722972!
assertThatSessionIsEmpty

	self assertThatThereAreNoCustomersOnSession.
	self assertThatThereAreNoAddressesOnSession! !
!ImportTest methodsFor: 'assertions' stamp: 'LMR 6/27/2023 20:12:47'!
assertThatImportingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption 

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText.]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723267!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723322!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723332!
test10CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723253!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723311!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723300!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723343!
test11CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723358!
test12CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723282!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/27/2023 20:12:47' prior: 50723222!
test02CanNotImportNilInput

	self assertThatImportingFrom: nil raisesErrorWithDescription: CustomerImporter nilInputErrorDescription.
	self assertThatSessionIsEmpty.! !

!methodRemoval: ImportTest #assertThatImporting:raisesErrorWithDescription: stamp: 'LMR 6/27/2023 20:12:47'!
assertThatImporting: inputStream raisesErrorWithDescription: expectedErrorDesciption 

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText.]!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:13:53' prior: 50723490!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:14:38' prior: 50723586!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty.
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty! !

!methodRemoval: ImportTest #test10CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:14:44'!
test10CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition.
	self assertThatSessionIsEmpty!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:14:51'!
test10CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !

!methodRemoval: ImportTest #test11CanNotImportCustomerWithMissingFields stamp: 'LMR 6/27/2023 20:14:51'!
test11CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/27/2023 20:14:56'!
test11CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'! !

!methodRemoval: ImportTest #test12CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:14:56'!
test12CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription.
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'!

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 20:15:04'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 20:15:05'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 20:15:05'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/27/2023 20:15:05'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/27/2023 20:15:06'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 20:15:06'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:15:06'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/27/2023 20:15:07'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/27/2023 20:15:07'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/27/2023 20:15:07'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:15:08'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'LMR 6/27/2023 20:15:33' prior: 50722320!
assertThatCustomer: aCustomer hasNoAddressesAtStreetNamed: streetName 

	|bool|
	bool := false.
	aCustomer addressAt: streetName ifNone: [bool := true].
	self assert: bool! !

!testRun: #ImportTest #test01ValidImport stamp: 'LMR 6/27/2023 20:15:35'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/27/2023 20:15:36'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/27/2023 20:15:36'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/27/2023 20:15:37'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/27/2023 20:15:37'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/27/2023 20:15:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/27/2023 20:15:38'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/27/2023 20:15:38'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/27/2023 20:15:38'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/27/2023 20:15:38'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/27/2023 20:15:39'!
PASSED!

----SNAPSHOT----(27 June 2023 20:15:50) CuisUniversity-5832.image priorSource: 12475882!

----QUIT----(27 June 2023 20:15:52) CuisUniversity-5832.image priorSource: 12547826!

----STARTUP---- (29 June 2023 03:28:38) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5832\windows64\CuisUniversity-5832.image!

!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:29:24'!
test01ValidInputStreamIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01ValidImport stamp: 'LMR 6/29/2023 03:29:24'!
test01ValidImport

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'assertions' stamp: 'LMR 6/29/2023 03:32:28' prior: 50723424!
assertThatImportingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption 

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText. [] value]! !
!ImportTest methodsFor: 'assertions' stamp: 'LMR 6/29/2023 03:32:59'!
assertThatImportingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption andAssert: anAssertionBlock  

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText. [] value]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723656!
test11CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723437!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723565!
test02CanNotImportNilInput

	self assertThatImportingFrom: nil raisesErrorWithDescription: CustomerImporter nilInputErrorDescription andAssert: [].
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723626!
test10CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723547!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723502!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription andAssert: [].
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723597!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition andAssert: [].
	self assertThatSessionIsEmpty.
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition andAssert: [].
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723476!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription andAssert: [].
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723453!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self assertThatImportingFrom: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription andAssert: [].
	self assertThatSessionIsEmpty.! !

!methodRemoval: ImportTest #assertThatImportingFrom:raisesErrorWithDescription: stamp: 'LMR 6/29/2023 03:33:00'!
assertThatImportingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption 

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText. [] value]!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:00' prior: 50723812!
assertThatImportingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption andAssert: anAssertionBlock  

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText. anAssertionBlock value]! !
!ImportTest methodsFor: 'assertions' stamp: 'LMR 6/29/2023 03:33:13'!
importingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption andAssert: anAssertionBlock  

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText. anAssertionBlock value]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723826!
test11CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723937!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription andAssert: [].
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723845!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723886!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723905!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription andAssert: [].
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723917!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition andAssert: [].
	self assertThatSessionIsEmpty.
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition andAssert: [].
	self assertThatSessionIsEmpty! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723952!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription andAssert: [].
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723870!
test10CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [].
	self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 03:33:14' prior: 50723861!
test02CanNotImportNilInput

	self importingFrom: nil raisesErrorWithDescription: CustomerImporter nilInputErrorDescription andAssert: [].
	self assertThatSessionIsEmpty.! !

!methodRemoval: ImportTest #assertThatImportingFrom:raisesErrorWithDescription:andAssert: stamp: 'LMR 6/29/2023 03:33:14'!
assertThatImportingFrom: inputStream raisesErrorWithDescription: expectedErrorDesciption andAssert: anAssertionBlock  

	^ self should: [CustomerImporter valueFrom: inputStream into: session] raise: Error - MessageNotUnderstood withExceptionDo: [:anError | self assert: expectedErrorDesciption equals: anError messageText. anAssertionBlock value]!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:33:36' prior: 50724128!
test02CanNotImportNilInput

	self importingFrom: nil raisesErrorWithDescription: CustomerImporter nilInputErrorDescription andAssert: [self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:33:48' prior: 50724022!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription andAssert: [self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:34:00' prior: 50724036!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self importingFrom: inputStream raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:34:17' prior: 50724173!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez'].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:34:36' prior: 50724159!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription
		andAssert: [self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:34:48' prior: 50724151!
test02CanNotImportNilInput

	self
		importingFrom: nil
		raisesErrorWithDescription: CustomerImporter
		nilInputErrorDescription andAssert: [self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:35:36' prior: 50724052!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:35:40' prior: 50724188!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez']! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:35:43' prior: 50724203!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:35:46' prior: 50724217!
test02CanNotImportNilInput

	self
		importingFrom: nil
		raisesErrorWithDescription: CustomerImporter
		nilInputErrorDescription andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:36:10' prior: 50724070!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := ReadStream on: 'C,Pepe,,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:36:42' prior: 50724082!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter
		invalidRecordErrorDescrition andAssert: [self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:37:14' prior: 50724101!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := ReadStream on: '
'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:37:36' prior: 50724112!
test10CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez']
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:38:03' prior: 50724004!
test11CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]
	! !

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 03:38:05'!
PASSED!

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 03:38:05'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 03:38:06'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 03:38:06'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 03:38:07'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 03:38:07'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 03:38:07'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 03:38:08'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 03:38:08'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 03:38:08'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 03:38:09'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 03:38:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:39:12'!
emptyLineStream

	^ ReadStream on: '
'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:39:12' prior: 50724312!
test09CanNotImportEmptyLine

	| inputStream |
	inputStream := self emptyLineStream.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:39:27' prior: 50724398!
test09CanNotImportEmptyLine

	self
		importingFrom: self emptyLineStream
		raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:39:55'!
nilInputStream

	^ nil! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:39:55' prior: 50724273!
test02CanNotImportNilInput

	self
		importingFrom: self nilInputStream
		raisesErrorWithDescription: CustomerImporter
		nilInputErrorDescription andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:40:39'!
streamWithAnAddressBeforeCustomers

	^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs
C,Pepe,Sanchez,D,22333444
A,Maipu,888,Florida,1122,Buenos Aires'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:40:39' prior: 50724259!
test03CanNotImportAddressBeforeCustomer

	| inputStream |
	inputStream := self streamWithAnAddressBeforeCustomers.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:40:46' prior: 50724438!
test03CanNotImportAddressBeforeCustomer

	self
		importingFrom: self streamWithAnAddressBeforeCustomers
		raisesErrorWithDescription: CustomerImporter firstLineAddressErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:41:16'!
streamWithExtraCustomerFields

	^ ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,San,chez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:41:16' prior: 50724244!
test04CanNotImportCustomerWithExtraFields

	| inputStream |
	inputStream := self streamWithExtraCustomerFields.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez']! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:41:19' prior: 50724466!
test04CanNotImportCustomerWithExtraFields

	self
		importingFrom: self streamWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez']! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:41:40'!
streamWithExtraAddressFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Ma,rtin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:41:40' prior: 50724226!
test05CanNotImportAddressWithExtraFields

	| inputStream pepe |
	inputStream := self streamWithExtraAddressFields.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:41:44' prior: 50724499!
test05CanNotImportAddressWithExtraFields

	| pepe |
	self
		importingFrom: self streamWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:42:02' prior: 50724516!
test05CanNotImportAddressWithExtraFields

	self
		importingFrom: self streamWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [| pepe |
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:42:36'!
streamWithAnEmptyField

	^ ReadStream on: 'C,Pepe,,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:42:37' prior: 50724281!
test06CanNotImportLineWithEmptyFields

	| inputStream |
	inputStream := self streamWithAnEmptyField.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:42:39' prior: 50724552!
test06CanNotImportLineWithEmptyFields

	self
		importingFrom: self streamWithAnEmptyField
		raisesErrorWithDescription: CustomerImporter emptyFieldErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:43:05'!
emptyStream

	^ ReadStream on: ''! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:43:05' prior: 50723067!
test08ImportingEmptyStreamResultsInEmptySession

	| inputStream |
	inputStream := self emptyStream.
	CustomerImporter valueFrom: inputStream into: session.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:43:07' prior: 50724576!
test08ImportingEmptyStreamResultsInEmptySession

	CustomerImporter valueFrom: self emptyStream into: session.
	self assertThatSessionIsEmpty.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:43:40'!
streamWithMissingCustomerFields

	^ ReadStream on: 'C,Juan,Perez,C,23-25666777-9
C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:43:40' prior: 50724322!
test10CanNotImportCustomerWithMissingFields

	| inputStream |
	inputStream := self streamWithMissingCustomerFields.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez']
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:43:42' prior: 50724598!
test10CanNotImportCustomerWithMissingFields

	self
		importingFrom: self streamWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'C' number: '23-25666777-9' hasFirstName: 'Juan' lastName: 'Perez']
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:44:01'!
streamWithMissingAddressFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:44:01' prior: 50724337!
test11CanNotImportAddressWithMissingFields

	| inputStream pepe |
	inputStream := self streamWithMissingAddressFields.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:44:03' prior: 50724631!
test11CanNotImportAddressWithMissingFields

	| pepe |
	self
		importingFrom: self streamWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:44:22' prior: 50724648!
test11CanNotImportAddressWithMissingFields

	self
		importingFrom: self streamWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [| pepe |
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assertThatCustomer: pepe hasNoAddressesAtStreetNamed: 'San Ma'
		]
	! !
!ImportTest methodsFor: 'test data' stamp: 'LMR 6/29/2023 03:52:03' prior: 50724592!
streamWithMissingCustomerFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
C,Juan,Perez,C,'! !
!ImportTest methodsFor: 'test data' stamp: 'LMR 6/29/2023 03:54:39' prior: 50724460!
streamWithExtraCustomerFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
C,Juan,Pe,rez,C,23-25666777-9'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:55:21' prior: 50724612!
test10CanNotImportCustomerWithMissingFields

	self
		importingFrom: self streamWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez']
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 03:56:30' prior: 50724480!
test04CanNotImportCustomerWithExtraFields

	self
		importingFrom: self streamWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez']! !

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 03:56:33'!
PASSED!

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 03:56:34'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 03:56:35'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 03:56:35'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 03:56:35'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 03:56:35'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 03:56:36'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 03:56:36'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 03:56:36'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 03:56:37'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 03:56:37'!
FAILURE!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 03:56:37'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 03:56:37'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'LMR 6/29/2023 03:57:15' prior: 50724680!
streamWithMissingCustomerFields

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
C,Juan,Perez,C'! !

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 03:57:19'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 03:57:22'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 03:57:23'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 03:57:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 03:57:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 03:57:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 03:57:24'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 03:57:24'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 03:57:25'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 03:57:25'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 03:57:25'!
PASSED!
!Customer methodsFor: 'addresses' stamp: 'LMR 6/29/2023 04:01:35'!
hasNoAddresses

	^ addresses size = 0! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:03:14' prior: 50724664!
test11CanNotImportAddressWithMissingFields

	self
		importingFrom: self streamWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [| pepe |
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assert: pepe hasNoAddresses
		]
	! !

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 04:03:15'!
PASSED!

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:03:16'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 04:03:16'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 04:03:17'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 04:03:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 04:03:17'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 04:03:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 04:03:18'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 04:03:18'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 04:03:19'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 04:03:19'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 04:03:19'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:03:55'!
importedOneCustomerWithNoAddresses

	| pepe |
			pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
			self assert: pepe hasNoAddresses! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:03:55' prior: 50724805!
test11CanNotImportAddressWithMissingFields

	self
		importingFrom: self streamWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self importedOneCustomerWithNoAddresses
		]
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:04:00' prior: 50724867!
test11CanNotImportAddressWithMissingFields

	self
		importingFrom: self streamWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self importedOneCustomerWithNoAddresses]
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:04:26' prior: 50724858!
importedOneCustomerWithNoAddresses

	| pepe |
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: pepe hasNoAddresses! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:04:53'!
assertThatOneCustomerWithNoAddressesWasImportedCorrectly

	| pepe |
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: pepe hasNoAddresses! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/29/2023 04:04:53' prior: 50724878!
test11CanNotImportAddressWithMissingFields

	self
		importingFrom: self streamWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly]
	! !

!methodRemoval: ImportTest #importedOneCustomerWithNoAddresses stamp: 'LMR 6/29/2023 04:04:53'!
importedOneCustomerWithNoAddresses

	| pepe |
	pepe := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert: pepe hasNoAddresses!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:05:06' prior: 50724692!
test10CanNotImportCustomerWithMissingFields

	self
		importingFrom: self streamWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly]
	! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:05:17' prior: 50724532!
test05CanNotImportAddressWithExtraFields

	self
		importingFrom: self streamWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:05:22' prior: 50724705!
test04CanNotImportCustomerWithExtraFields

	self
		importingFrom: self streamWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly]! !

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:05:31'!
PASSED!

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:05:32'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 04:05:32'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 04:05:32'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 04:05:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 04:05:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 04:05:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 04:05:34'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 04:05:34'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 04:05:34'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 04:05:35'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 04:05:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:06:57' prior: 50724293!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:09:07' prior: 50725003!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := ReadStream on: 'J,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
Alem,San Martin,3322,Olivos,1636,BsAs'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 04:09:09'!
PASSED!

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:09:09'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 04:09:10'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 04:09:10'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 04:09:10'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 04:09:11'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 04:09:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 04:09:12'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 04:09:12'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 04:09:12'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 04:09:13'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 04:09:13'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:09:28'!
streamWithInvalidRecordType

	^ ReadStream on: 'J,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:09:28' prior: 50725022!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	inputStream := self streamWithInvalidRecordType.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
Alem,San Martin,3322,Olivos,1636,BsAs'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:09:52' prior: 50725093!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
Alem,San Martin,3322,Olivos,1636,BsAs'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:10:50'!
streamWithInvalidCustomerRecordType

	^ ReadStream on: 'Carlos,Pepe,Sanchez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:10:50' prior: 50725120!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := self streamWithInvalidCustomerRecordType.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	inputStream := ReadStream on: 'C,Pepe,Sanchez,D,22333444
Alem,San Martin,3322,Olivos,1636,BsAs'.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:11:13'!
streamWithInvalidAddressRecordType

	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444
Alem,San Martin,3322,Olivos,1636,BsAs'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:11:13' prior: 50725152!
test07CanNotImportRecordWithInvalidType

	| inputStream |
	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	inputStream := self streamWithInvalidCustomerRecordType.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	inputStream := self streamWithInvalidAddressRecordType.
	self
		importingFrom: inputStream
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:11:34' prior: 50725185!
test07CanNotImportRecordWithInvalidType

	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	self
		importingFrom: self streamWithInvalidCustomerRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	self
		importingFrom: self streamWithInvalidAddressRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:12:17'!
test12CanNotImportCustomerWithInvalidRecordType

	^ self
		importingFrom: self streamWithInvalidCustomerRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:12:17' prior: 50725210!
test07CanNotImportRecordWithInvalidType

	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
	
	self test12CanNotImportCustomerWithInvalidRecordType.
		
	self
		importingFrom: self streamWithInvalidAddressRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:12:31' prior: 50725242!
test07CanNotImportRecordWithInvalidType

	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	self
		importingFrom: self streamWithInvalidAddressRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly].! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:13:02'!
test13CanNotImportAddressWithInvalidRecordType

	^ self
		importingFrom: self streamWithInvalidAddressRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:13:03' prior: 50725261!
test07CanNotImportRecordWithInvalidType

	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty].
		
	self test13CanNotImportAddressWithInvalidRecordType.! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:13:06' prior: 50725288!
test07CanNotImportRecordWithInvalidType

	self
		importingFrom: self streamWithInvalidRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:13:21' prior: 50725232!
test12CanNotImportCustomerWithInvalidRecordType

	self
		importingFrom: self streamWithInvalidCustomerRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:13:24' prior: 50725277!
test13CanNotImportAddressWithInvalidRecordType

	self
		importingFrom: self streamWithInvalidAddressRecordType
		raisesErrorWithDescription: CustomerImporter invalidRecordErrorDescrition
		andAssert: [self assertThatOneCustomerWithNoAddressesWasImportedCorrectly]! !

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:13:37'!
PASSED!

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:13:43'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 04:13:44'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 04:13:44'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 04:13:45'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 04:13:45'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 04:13:45'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 04:13:45'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 04:13:46'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 04:13:46'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 04:13:46'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 04:13:47'!
PASSED!

!testRun: #ImportTest #test12CanNotImportCustomerWithInvalidRecordType stamp: 'LMR 6/29/2023 04:13:47'!
PASSED!

!testRun: #ImportTest #test13CanNotImportAddressWithInvalidRecordType stamp: 'LMR 6/29/2023 04:13:47'!
PASSED!

!methodRemoval: ImportTest #assertThatCustomer:hasNoAddressesAtStreetNamed: stamp: 'LMR 6/29/2023 04:14:35'!
assertThatCustomer: aCustomer hasNoAddressesAtStreetNamed: streetName 

	|bool|
	bool := false.
	aCustomer addressAt: streetName ifNone: [bool := true].
	self assert: bool!
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:18:16' prior: 50724422!
test02CanNotImportNilInput

	self
		importingFrom: self nilInputStream
		raisesErrorWithDescription: CustomerImporter nilInputErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !
!ImportTest methodsFor: 'test data' stamp: 'LMR 6/29/2023 04:21:22' prior: 50724760!
streamWithMissingCustomerFields

	^ ReadStream on: 'C,Pepe,Sanchez,D'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:21:41' prior: 50724929!
test10CanNotImportCustomerWithMissingFields

	self
		importingFrom: self streamWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertThatSessionIsEmpty]
	! !
!ImportTest methodsFor: 'test data' stamp: 'LMR 6/29/2023 04:22:44' prior: 50724686!
streamWithExtraCustomerFields

	^ ReadStream on: 'C,Pepe,San,chez,D,22333444'! !
!ImportTest methodsFor: 'tests' stamp: 'LMR 6/29/2023 04:22:51' prior: 50724952!
test04CanNotImportCustomerWithExtraFields

	self
		importingFrom: self streamWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter InvalidAmountOfFieldsErrorDescription
		andAssert: [self assertThatSessionIsEmpty]! !

!testRun: #ImportTest #test01ValidInputStreamIsImportedCorrectly stamp: 'LMR 6/29/2023 04:23:19'!
PASSED!

!testRun: #ImportTest #test02CanNotImportNilInput stamp: 'LMR 6/29/2023 04:23:20'!
PASSED!

!testRun: #ImportTest #test03CanNotImportAddressBeforeCustomer stamp: 'LMR 6/29/2023 04:23:21'!
PASSED!

!testRun: #ImportTest #test04CanNotImportCustomerWithExtraFields stamp: 'LMR 6/29/2023 04:23:21'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressWithExtraFields stamp: 'LMR 6/29/2023 04:23:21'!
PASSED!

!testRun: #ImportTest #test06CanNotImportLineWithEmptyFields stamp: 'LMR 6/29/2023 04:23:21'!
PASSED!

!testRun: #ImportTest #test07CanNotImportRecordWithInvalidType stamp: 'LMR 6/29/2023 04:23:22'!
PASSED!

!testRun: #ImportTest #test08ImportingEmptyStreamResultsInEmptySession stamp: 'LMR 6/29/2023 04:23:22'!
PASSED!

!testRun: #ImportTest #test09CanNotImportEmptyLine stamp: 'LMR 6/29/2023 04:23:22'!
PASSED!

!testRun: #ImportTest #test10CanNotImportCustomerWithMissingFields stamp: 'LMR 6/29/2023 04:23:22'!
PASSED!

!testRun: #ImportTest #test11CanNotImportAddressWithMissingFields stamp: 'LMR 6/29/2023 04:23:23'!
PASSED!

!testRun: #ImportTest #test12CanNotImportCustomerWithInvalidRecordType stamp: 'LMR 6/29/2023 04:23:23'!
PASSED!

!testRun: #ImportTest #test13CanNotImportAddressWithInvalidRecordType stamp: 'LMR 6/29/2023 04:23:23'!
PASSED!

----SNAPSHOT----(29 June 2023 04:23:39) CuisUniversity-5832.image priorSource: 12547916!

----QUIT----(29 June 2023 04:23:41) CuisUniversity-5832.image priorSource: 12602214!

----STARTUP---- (29 June 2023 13:18:37) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5832\windows64\CuisUniversity-5832.image!


----SNAPSHOT----(29 June 2023 13:29:17) CuisUniversity-5832.image priorSource: 12602304!

----QUIT----(29 June 2023 13:29:19) CuisUniversity-5832.image priorSource: 12602515!