

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (22 June 2023 20:24:27) as /home/clinux01/Escritorio/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/Escritorio/linux64/CustomerImporter.st----!

----QUIT----(22 June 2023 20:26:27) CuisUniversity-5832.image priorSource: 9366758!

----STARTUP---- (22 June 2023 20:26:52) as /home/clinux01/Escritorio/linux64/CuisUniversity-5832.image!

!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:30:58'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:31:14' prior: 50668839!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!classDefinition: #ImportTest category: 'CustomerImporter' stamp: 'LMR 6/22/2023 20:31:14'!
TestCase subclass: #ImportTest
	instanceVariableNames: 'session'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:31:32' overrides: 16961394!
setUp

	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:31:32' prior: 50668880!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	self setUp.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 20:32:09' prior: 50668574!
test01Import

	self importCustomers ! !

!methodRemoval: Customer class #importCustomers stamp: 'LMR 6/22/2023 20:32:14'!
importCustomers

	"
	self importCustomers
	"
	| inputStream session newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.
	session := DataBaseSession for: (Array with: Address with: Customer).
	session beginTransaction.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:33:03' prior: 50668935!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	session commit.
	session close.

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:33:41'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:33:41'!
PASSED!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:34:18' overrides: 16961402!
tearDown

	session commit.
	session close! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:34:18' prior: 50669016!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	self tearDown.

	inputStream close.
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 20:34:27' prior: 50669063!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fourth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 20:45:44' prior: 50668972!
test01Import

	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:45:45'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:45:46'!
PASSED!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 20:53:46' prior: 50669136!
test01Import

	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assert: 2 equals: (session select: [:aCustomer | aCustomer firstName = 'Pepe'] ofType: Customer).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:53:48'!
FAILURE!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 20:54:34' prior: 50669147!
test01Import

	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assert: 2 equals: ((session select: [:aCustomer | aCustomer firstName = 'Pepe'] ofType: Customer) atRandom addresses size).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:54:35'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:54:36'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:54:45'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:54:45'!
PASSED!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 20:55:34' prior: 50669159!
test01Import

	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	self assert: 2 equals: ((session select: [:aCustomer | aCustomer firstName = 'Pepe'] ofType: Customer) atRandom addresses size).
	
	self assert: 1 equals: ((session select: [:aCustomer | aCustomer firstName = 'Juan'] ofType: Customer) atRandom addresses size).
! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:55:36'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 20:55:36'!
PASSED!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 21:05:59' prior: 50669179!
test01Import

	| pepe juan |
	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [:aCustomer | aCustomer firstName = 'Pepe'] ofType: Customer) atRandom.
	self assert: 'Sanchez' equals: (pepe lastName).
	self assert: 'D' equals: (pepe identificationType).
	self assert: '22333444' equals: (pepe identificationNumber).
	self assert: 2 equals: (pepe addresses size).
	
	juan := (session select: [:aCustomer | aCustomer firstName = 'Juan'] ofType: Customer) atRandom.
	self assert: 'Perez' equals: (juan lastName).
	self assert: 'C' equals: (juan identificationType).
	self assert: '23-25666777-9' equals: (juan identificationNumber).
	self assert: 1 equals: (juan addresses size).
	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:06:02'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 21:06:29' prior: 50669100!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData fourth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:06:33'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:06:34'!
PASSED!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 21:12:36' prior: 50669199!
test01Import

	| pepe juan |
	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [:aCustomer | aCustomer identificationType = 'D' and: [aCustomer identificationNumber = '22333444']] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: (pepe firstName).
	self assert: 'Sanchez' equals: (pepe lastName).
	self assert: 2 equals: (pepe addresses size).
	
	juan := (session select: [:aCustomer | aCustomer identificationType = 'C' and: [aCustomer identificationNumber = '23-25666777-9']] ofType: Customer) atRandom.
	self assert: 'Juan' equals: (juan firstName).
	self assert: 'Perez' equals: (juan lastName).
	self assert: 1 equals: (juan addresses size).
	
	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:12:38'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:12:39'!
PASSED!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 21:19:01' prior: 50669269!
test01Import

	| pepe juan |
	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [:aCustomer | aCustomer identificationType = 'D' and: [aCustomer identificationNumber = '22333444']] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: (pepe firstName).
	self assert: 'Sanchez' equals: (pepe lastName).
	self assert: 2 equals: (pepe addresses size).
	
	juan := (session select: [:aCustomer | aCustomer identificationType = 'C' and: [aCustomer identificationNumber = '23-25666777-9']] ofType: Customer) atRandom.
	self assert: 'Juan' equals: (juan firstName).
	self assert: 'Perez' equals: (juan lastName).
	self assert: 1 equals: (juan addresses size).
	
	self assert: (pepe addresses anySatisfy: [:anAddress | anAddress streetName = 'SanMartin' and: [anAddress streetNumber = 3322 and: [anAddress town = 'Olivos' and: [anAddress zipCode = 1636 and: [anAddress province = 'BsAs']]]]]).
	self assert: (pepe addresses anySatisfy: [:anAddress | anAddress streetName = 'Maipu' and: [anAddress streetNumber = 888 and: [anAddress town = 'Florida' and: [anAddress zipCode = 1122 and: [anAddress province = 'Buenos Aires']]]]]).
	
	self assert: (juan addresses anySatisfy: [:anAddress | anAddress streetName = 'Alem' and: [anAddress streetNumber = 1122 and: [anAddress town = 'CABA' and: [anAddress zipCode = 1001 and: [anAddress province = 'CABA']]]]]).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:19:04'!
FAILURE!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/22/2023 21:19:48' prior: 50669228!
importCustomers

	"
	self importCustomers
	"
	| inputStream  newCustomer line |

	inputStream := UniFileStream new open: 'input.txt' forWrite: false.

	line := inputStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := inputStream nextLine. ].

	inputStream close.
	! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:19:53'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:20:15'!
FAILURE!
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 21:21:22' prior: 50669300!
test01Import

	| pepe juan |
	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [:aCustomer | aCustomer identificationType = 'D' and: [aCustomer identificationNumber = '22333444']] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: (pepe firstName).
	self assert: 'Sanchez' equals: (pepe lastName).
	self assert: 2 equals: (pepe addresses size).
	
	juan := (session select: [:aCustomer | aCustomer identificationType = 'C' and: [aCustomer identificationNumber = '23-25666777-9']] ofType: Customer) atRandom.
	self assert: 'Juan' equals: (juan firstName).
	self assert: 'Perez' equals: (juan lastName).
	self assert: 1 equals: (juan addresses size).
	
	self assert: (pepe addresses anySatisfy: [:anAddress | anAddress streetName = 'San Martin' and: [anAddress streetNumber = 3322 and: [anAddress town = 'Olivos' and: [anAddress zipCode = 1636 and: [anAddress province = 'BsAs']]]]]).
	self assert: (pepe addresses anySatisfy: [:anAddress | anAddress streetName = 'Maipu' and: [anAddress streetNumber = 888 and: [anAddress town = 'Florida' and: [anAddress zipCode = 1122 and: [anAddress province = 'Buenos Aires']]]]]).
	
	self assert: (juan addresses anySatisfy: [:anAddress | anAddress streetName = 'Alem' and: [anAddress streetNumber = 1122 and: [anAddress town = 'CABA' and: [anAddress zipCode = 1001 and: [anAddress province = 'CABA']]]]]).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:21:24'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:21:25'!
PASSED!

----SNAPSHOT----(22 June 2023 21:28:31) CuisUniversity-5832.image priorSource: 10789838!
!Customer methodsFor: 'addresses' stamp: 'LMR 6/22/2023 21:37:52'!
amountOfAddresses

	^ addresses size! !
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 21:38:19' prior: 50669391!
test01Import

	| pepe juan |
	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [:aCustomer | aCustomer identificationType = 'D' and: [aCustomer identificationNumber = '22333444']] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: (pepe firstName).
	self assert: 'Sanchez' equals: (pepe lastName).
	self assert: 2 equals: (pepe amountOfAddresses).
	
	juan := (session select: [:aCustomer | aCustomer identificationType = 'C' and: [aCustomer identificationNumber = '23-25666777-9']] ofType: Customer) atRandom.
	self assert: 'Juan' equals: (juan firstName).
	self assert: 'Perez' equals: (juan lastName).
	self assert: 1 equals: (juan amountOfAddresses).
	
	self assert: (pepe addresses anySatisfy: [:anAddress | anAddress streetName = 'San Martin' and: [anAddress streetNumber = 3322 and: [anAddress town = 'Olivos' and: [anAddress zipCode = 1636 and: [anAddress province = 'BsAs']]]]]).
	self assert: (pepe addresses anySatisfy: [:anAddress | anAddress streetName = 'Maipu' and: [anAddress streetNumber = 888 and: [anAddress town = 'Florida' and: [anAddress zipCode = 1122 and: [anAddress province = 'Buenos Aires']]]]]).
	
	self assert: (juan addresses anySatisfy: [:anAddress | anAddress streetName = 'Alem' and: [anAddress streetNumber = 1122 and: [anAddress town = 'CABA' and: [anAddress zipCode = 1001 and: [anAddress province = 'CABA']]]]]).! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:38:21'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:38:22'!
PASSED!
!Customer methodsFor: 'addresses' stamp: 'LMR 6/22/2023 21:39:58'!
addressesOnStreetNamed: aStreetName

	^ addresses collect: [:anAddress | anAddress streetName = aStreetName].! !
!Customer methodsFor: 'addresses' stamp: 'LMR 6/22/2023 21:46:39' prior: 50669502!
addressesOnStreetNamed: aStreetName

	^ addresses select: [:anAddress | anAddress streetName = aStreetName].! !
!ImportTest methodsFor: 'testing' stamp: 'LMR 6/22/2023 21:49:35' prior: 50669450!
test01Import

	| pepe juan pepeSanMartinAddress pepeMaipuAddress juanAlemAddress |
	self importCustomers.
	
	self assert: 2 equals: (session selectAllOfType: Customer) size.
	
	pepe := (session select: [:aCustomer | aCustomer identificationType = 'D' and: [aCustomer identificationNumber = '22333444']] ofType: Customer) atRandom.
	self assert: 'Pepe' equals: (pepe firstName).
	self assert: 'Sanchez' equals: (pepe lastName).
	self assert: 2 equals: (pepe amountOfAddresses).
	
	juan := (session select: [:aCustomer | aCustomer identificationType = 'C' and: [aCustomer identificationNumber = '23-25666777-9']] ofType: Customer) atRandom.
	self assert: 'Juan' equals: (juan firstName).
	self assert: 'Perez' equals: (juan lastName).
	self assert: 1 equals: (juan amountOfAddresses).
	
	pepeSanMartinAddress := (pepe addressesOnStreetNamed: 'San Martin') first.
	self assert: 3322 equals: pepeSanMartinAddress streetNumber.
	self assert: 'Olivos' equals: pepeSanMartinAddress town.
	self assert: 1636 equals: pepeSanMartinAddress zipCode.
	self assert: 'BsAs' equals: pepeSanMartinAddress province. 
	pepeMaipuAddress := (pepe addressesOnStreetNamed: 'Maipu') first.
	self assert: 888 equals: pepeMaipuAddress streetNumber.
	self assert: 'Florida' equals: pepeMaipuAddress town.
	self assert: 1122 equals: pepeMaipuAddress zipCode.
	self assert: 'Buenos Aires' equals: pepeMaipuAddress province.
	
	juanAlemAddress := (juan addressesOnStreetNamed: 'Alem') first.
	self assert: 1122 equals: juanAlemAddress streetNumber.
	self assert: 'CABA' equals: juanAlemAddress town.
	self assert: 1001 equals: juanAlemAddress zipCode.
	self assert: 'CABA' equals: juanAlemAddress province.! !

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:49:38'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'LMR 6/22/2023 21:49:38'!
PASSED!

----SNAPSHOT----(22 June 2023 21:51:22) CuisUniversity-5832.image priorSource: 10809352!

----QUIT----(22 June 2023 21:51:45) CuisUniversity-5832.image priorSource: 10813611!