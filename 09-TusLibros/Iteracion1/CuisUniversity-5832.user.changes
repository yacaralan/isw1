

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (8 June 2023 00:01:01) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5832\windows64\CuisUniversity-5832.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NameOfSubclass category: 'TusLibros' stamp: 'LMR 6/8/2023 00:01:36'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTests category: 'TusLibros' stamp: 'LMR 6/8/2023 00:06:57'!
TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LMR 6/8/2023 00:09:16'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'no messages' stamp: 'LMR 6/8/2023 00:09:10'!
test01NewCartStartsEmpty

	self assert: Cart new isEmpty! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:09:20'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'LMR 6/8/2023 00:09:48'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'LMR 6/8/2023 00:09:58' prior: 50624403!
isEmpty
	
	^true.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:10:00'!
PASSED!

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:10:00'!
PASSED!
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:10:03' prior: 50624396!
test01NewCartStartsEmpty

	self assert: Cart new isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:15:50'!
test02AddingABookToACartAddsIt

	| aCart |
	aCart := Cart new.
	
	aCart add: #book1.
	
	self deny: aCart isEmpty.! !

!classRemoval: #NameOfSubclass stamp: 'LMR 6/8/2023 00:15:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:16:06'!
ERROR!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:16:15'!
add: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'LMR 6/8/2023 00:16:34'!
Object subclass: #Cart
	instanceVariableNames: 'empty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:16:33' prior: 50624437!
add: aBook 
	
	empty := false.! !

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:16:37'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'LMR 6/8/2023 00:16:52' prior: 50624407!
isEmpty
	
	^empty.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:17:08' overrides: 16920235!
initialize

	empty := True.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:17:12' prior: 50624459 overrides: 16920235!
initialize

	empty := true.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:17:17'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:17:17'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:27:43'!
test03CanAddMoreThanOneOfTheSameBook

	| aCart expected |
	aCart := Cart new.
	
	aCart add: #book1.
	aCart add: #book1.
	aCart add: #book1.
	
	expected := OrderedCollection with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart isEqualTo: expected.! !

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:27:49'!
ERROR!
!Cart methodsFor: 'list' stamp: 'LMR 6/8/2023 00:27:55'!
listCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'list' stamp: 'LMR 6/8/2023 00:28:10' prior: 50624486!
listCart
	
	^OrderedCollection with: #book1 with: #book1 with: #book1.! !

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:28:12'!
ERROR!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:28:16'!
ERROR!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:28:32' prior: 50624472!
test03CanAddMoreThanOneOfTheSameBook

	| aCart expected |
	aCart := Cart new.
	
	aCart add: #book1.
	aCart add: #book1.
	aCart add: #book1.
	
	expected := OrderedCollection with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart equals: expected.! !

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:28:34'!
PASSED!

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:28:34'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:28:34'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:28:34'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:29:21'!
test04CanAddDifferentBooks

	| aCart expected |
	aCart := Cart new.
	
	aCart add: #book1.
	aCart add: #book2.
	aCart add: #book3.
	
	expected := OrderedCollection with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:29:29' prior: 50624524!
test04CanAddDifferentBooks

	| aCart expected |
	aCart := Cart new.
	
	aCart add: #book1.
	aCart add: #book2.
	aCart add: #book3.
	
	expected := OrderedCollection with: #book1 with: #book2 with: #book3.
	self assert: aCart listCart equals: expected.! !

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:29:31'!
FAILURE!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LMR 6/8/2023 00:30:15'!
Object subclass: #Cart
	instanceVariableNames: 'empty products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:30:11' prior: 50624448!
add: aBook 
	
	products add: aBook.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:30:30' prior: 50624463 overrides: 16920235!
initialize

	products := OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'LMR 6/8/2023 00:30:40' prior: 50624455!
isEmpty
	
	^products isEmpty.! !
!Cart methodsFor: 'list' stamp: 'LMR 6/8/2023 00:30:50' prior: 50624490!
listCart
	
	^products.! !
!Cart methodsFor: 'list' stamp: 'LMR 6/8/2023 00:31:01' prior: 50624568!
listCart
	
	^products.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:31:06'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:31:06'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:31:06'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:31:06'!
PASSED!

!classDefinition: #XXX category: 'TusLibros' stamp: 'LMR 6/8/2023 00:39:29'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:39:22'!
test05CanNotAddInvalidBook

	| aCart xxx |
	xxx := XXX withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	self should: [aCart add: #book5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = 'Book not in store'].
		
	self assert: aCart isEmpty.! !

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:39:38'!
ERROR!
!XXX class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 00:39:43'!
withBooks: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithBooks: anOrderedCollection ! !
!XXX class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 00:40:09' prior: 50624609!
withBooks: aBookCollection 
	
	^self new initializeWithBooks: aBookCollection ! !

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:40:09'!
ERROR!

!classDefinition: #XXX category: 'TusLibros' stamp: 'LMR 6/8/2023 00:40:16'!
Object subclass: #XXX
	instanceVariableNames: 'bookCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'LMR 6/8/2023 00:40:16'!
initializeWithBooks: aBookCollection 
	self shouldBeImplemented.
	bookCollection := aBookCollection.! !
!XXX methodsFor: 'initialization' stamp: 'LMR 6/8/2023 00:40:21' prior: 50624632!
initializeWithBooks: aBookCollection 
	
	bookCollection := aBookCollection.! !

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:40:23'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 00:40:27'!
on: aXXX 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOn: aXXX ! !
!Cart class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 00:40:34' prior: 50624646!
on: aXXX 
	
	^self new initializeOn: aXXX ! !

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:40:35'!
ERROR!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LMR 6/8/2023 00:40:50'!
Object subclass: #Cart
	instanceVariableNames: 'empty products xXX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'LMR 6/8/2023 00:40:50'!
initializeOn: aXXX 
	self shouldBeImplemented.
	xXX := aXXX.! !
!Cart methodsFor: 'initialization' stamp: 'LMR 6/8/2023 00:40:53' prior: 50624668!
initializeOn: aXXX 
	
	xXX := aXXX.! !

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:40:55'!
FAILURE!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:44:47' prior: 50624555!
add: aBook 
	
	(xXX inStore: aBook) ifFalse: [^self error: ''].
	products add: aBook.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:45:01' prior: 50624680!
add: aBook 
	
	(xXX inStore: aBook) ifFalse: [^self error: 'Book not in store'].
	products add: aBook.! !
!XXX methodsFor: 'nil' stamp: 'LMR 6/8/2023 00:45:38'!
inStore: aBook

	^bookCollection includes: aBook.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:46:01'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:46:02'!
ERROR!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:46:02'!
ERROR!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:46:02'!
ERROR!

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:46:02'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:46:23' prior: 50624422!
test02AddingABookToACartAddsIt

	| aCart xxx |
	xxx := XXX withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	
	self deny: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:46:38' prior: 50624501!
test03CanAddMoreThanOneOfTheSameBook

	| aCart xxx expected |
	xxx := XXX withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	aCart add: #book1.
	aCart add: #book1.
	
	expected := OrderedCollection with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:46:57' prior: 50624535!
test04CanAddDifferentBooks

	| aCart xxx expected |
	xxx := XXX withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	aCart add: #book2.
	aCart add: #book3.
	
	expected := OrderedCollection with: #book1 with: #book2 with: #book3.
	self assert: aCart listCart equals: expected.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:47:00'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:47:00'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:47:00'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:47:00'!
PASSED!

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:47:00'!
PASSED!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:47:30' prior: 50624560 overrides: 16920235!
initialize

	products := Bag new.! !

Bag new isEmpty!

Bag new add: #a isEmpty!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:49:56' prior: 50624720!
test03CanAddMoreThanOneOfTheSameBook

	| aCart xxx expected |
	xxx := XXX withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	aCart add: #book1.
	aCart add: #book1.
	
	expected := Bag with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:50:01' prior: 50624733!
test04CanAddDifferentBooks

	| aCart xxx expected |
	xxx := XXX withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	aCart add: #book2.
	aCart add: #book3.
	
	expected := Bag with: #book1 with: #book2 with: #book3.
	self assert: aCart listCart equals: expected.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:50:05'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:50:05'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:50:05'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:50:05'!
PASSED!

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:50:05'!
PASSED!

!classDefinition: #XXX category: 'TusLibros' stamp: 'LMR 6/8/2023 00:52:19'!
Object subclass: #XXX
	instanceVariableNames: 'bookCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:52:19' prior: 50624692!
inStore: aBook

	^bookCatalogue includes: aBook.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:52:19' prior: 50624638!
initializeWithBooks: aBookCollection 
	
	bookCatalogue := aBookCollection.! !
!XXX methodsFor: 'initialization' stamp: 'LMR 6/8/2023 00:52:43' prior: 50624820!
initializeWithBooks: aBookCatalogue 
	
	bookCatalogue := aBookCatalogue.! !
!XXX class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 00:52:50' prior: 50624618!
withBooks: aBookCatalogue 
	
	^self new initializeWithBooks: aBookCatalogue ! !

Object subclass: #Catalogue
	instanceVariableNames: 'bookCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'LMR 6/8/2023 00:53:17'!
Object subclass: #Catalogue
	instanceVariableNames: 'bookCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Catalogue stamp: 'LMR 6/8/2023 00:53:29'!
Object subclass: #Catalogue
	instanceVariableNames: 'bookCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #XXX as: #Catalogue stamp: 'LMR 6/8/2023 00:53:52'!
Smalltalk renameClassNamed: #XXX as: #Catalogue!
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:53:52' prior: 50624767!
test03CanAddMoreThanOneOfTheSameBook

	| aCart xxx expected |
	xxx := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	aCart add: #book1.
	aCart add: #book1.
	
	expected := Bag with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:53:52' prior: 50624593!
test05CanNotAddInvalidBook

	| aCart xxx |
	xxx := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	self should: [aCart add: #book5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = 'Book not in store'].
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:53:52' prior: 50624780!
test04CanAddDifferentBooks

	| aCart xxx expected |
	xxx := Catalogue withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	aCart add: #book2.
	aCart add: #book3.
	
	expected := Bag with: #book1 with: #book2 with: #book3.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 00:53:52' prior: 50624711!
test02AddingABookToACartAddsIt

	| aCart xxx |
	xxx := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: xxx.
	
	aCart add: #book1.
	
	self deny: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:54:22' prior: 50624899!
test02AddingABookToACartAddsIt

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	aCart add: #book1.
	
	self deny: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:54:29' prior: 50624858!
test03CanAddMoreThanOneOfTheSameBook

	| aCart aCatalogue expected |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	aCart add: #book1.
	aCart add: #book1.
	aCart add: #book1.
	
	expected := Bag with: #book1 with: #book1 with: #book1.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:54:35' prior: 50624885!
test04CanAddDifferentBooks

	| aCart aCatalogue expected |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	aCart := Cart on: aCatalogue.
	
	aCart add: #book1.
	aCart add: #book2.
	aCart add: #book3.
	
	expected := Bag with: #book1 with: #book2 with: #book3.
	self assert: aCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:54:41' prior: 50624871!
test05CanNotAddInvalidBook

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: #book5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = 'Book not in store'].
		
	self assert: aCart isEmpty.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:54:45'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:54:45'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:54:45'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:54:45'!
PASSED!

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:54:45'!
PASSED!
!Cart class methodsFor: 'error descriptions' stamp: 'LMR 6/8/2023 00:56:15'!
bookNotInStoreErrorDescrition

	^'Book not in store'.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 00:56:30' prior: 50624686!
add: aBook 
	
	(xXX inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:56:42' prior: 50624945!
test05CanNotAddInvalidBook

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: #book5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
		
	self assert: aCart isEmpty.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 00:56:46'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 00:56:46'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 00:56:46'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 00:56:46'!
PASSED!

!testRun: #CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 00:56:46'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 00:58:56'!
test06CanNotAddInvalidBook

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: #book5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:03:14'!
test05CanAddMultipleCopiesOfABookAtOnce

	| aCart aCatalogue expected |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	aCart add: #book1 amount: 3.
	
	expected := Bag new add: #book1 withOccurrences: 3.
	self assert: aCart listCart = expected.! !

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:03:18'!
ERROR!

!methodRemoval: CartTests #test05CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:03:22'!
test05CanNotAddInvalidBook

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: #book5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
		
	self assert: aCart isEmpty.!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:03:25'!
ERROR!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:03:30'!
add: aRenameMe1 amount: aRenameMe2 
	self shouldBeImplemented.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:04:03' prior: 50625059!
add: aBook amount: anAmount 
	
	products add: aBook withOccurrences: anAmount.! !

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:04:05'!
FAILURE!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:04:34' prior: 50625027!
test05CanAddMultipleCopiesOfABookAtOnce

	| aCart aCatalogue expected |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	aCart add: #book1 amount: 3.
	
	expected := Bag new add: #book1 withOccurrences: 3.
	self assert: aCart listCart equals: expected.! !

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:04:35'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'LMR 6/8/2023 01:05:49' prior: 50624673!
initializeOn: aBookCatalogue 
	
	xXX := aBookCatalogue.! !

Object subclass: #Cart
	instanceVariableNames: 'empty products storeCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'LMR 6/8/2023 01:05:54'!
Object subclass: #Cart
	instanceVariableNames: 'empty products storeCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:06:13' prior: 50624978!
add: aBook 
	
	(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook.! !
!Cart methodsFor: 'initialization' stamp: 'LMR 6/8/2023 01:06:24' prior: 50625089!
initializeOn: aBookCatalogue 
	
	storeCatalogue := aBookCatalogue.! !
!Cart class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 01:06:53' prior: 50624654!
on: aBookCatalogue 
	
	^self new initializeOn: aBookCatalogue.! !

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:07:02'!
FAILURE!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:07:02'!
FAILURE!

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 01:07:41'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 01:07:42'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 01:07:42'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 01:07:42'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:07:42'!
FAILURE!

!testRun: #CartTests #test06CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:07:42'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:07:42'!
FAILURE!

Bag new add: #book1 withOccurrences: 3!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:08:37' prior: 50625073!
test05CanAddMultipleCopiesOfABookAtOnce

	| aCart aCatalogue expected |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	aCart add: #book1 amount: 3.
	
	expected := Bag new.
	expected add: #book1 withOccurrences: 3.
	self assert: aCart listCart equals: expected.! !

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:08:38'!
PASSED!

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 01:08:40'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 01:08:40'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 01:08:40'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 01:08:40'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:08:40'!
PASSED!

!testRun: #CartTests #test06CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:08:40'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:10:42'!
test07CanNotAddMultipleCopiesOfInvalidBookAtOnce

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: #book5 amount: 5.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
		
	self assert: aCart isEmpty.! !

!testRun: #CartTests #test07CanNotAddMultipleCopiesOfInvalidBookAtOnce stamp: 'LMR 6/8/2023 01:10:45'!
FAILURE!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:10:54' prior: 50625064!
add: aBook amount: anAmount 
	
	(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook withOccurrences: anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!

!testRun: #CartTests #test06CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!

!testRun: #CartTests #test07CanNotAddMultipleCopiesOfInvalidBookAtOnce stamp: 'LMR 6/8/2023 01:11:00'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:13:53'!
test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: #book1 amount: 0.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
	self assert: aCart isEmpty.
	self should: [aCart add: #book1 amount: -2.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
	self assert: aCart isEmpty.! !

!testRun: #CartTests #test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:13:57'!
FAILURE!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:14:42' prior: 50625204!
add: aBook amount: anAmount 
	
	(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	anAmount <= 0 ifTrue: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook withOccurrences: anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test06CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test07CanNotAddMultipleCopiesOfInvalidBookAtOnce stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!

!testRun: #CartTests #test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:14:46'!
PASSED!
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:17:55' prior: 50625258!
add: aBook amount: anAmount 
	
	"(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition]."
	storeCatalogue validate: aBook.
	anAmount <= 0 ifTrue: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook withOccurrences: anAmount.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:17:59' prior: 50625105!
add: aBook 
	
	"(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition]."
	storeCatalogue validate: aBook.
	products add: aBook.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:20:06' prior: 50625306!
add: aBook 
	
	(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:20:13' prior: 50625294!
add: aBook amount: anAmount 
	
	(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	anAmount <= 0 ifTrue: [^self error: self class bookNotInStoreErrorDescrition].
	products add: aBook withOccurrences: anAmount.! !

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test06CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test07CanNotAddMultipleCopiesOfInvalidBookAtOnce stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!

!testRun: #CartTests #test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:20:18'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:26:27' prior: 50625013!
test06CanNotAddInvalidBook

	| aCart aCatalogue aBook |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: aBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:27:24'!
canNotAddBook: aBook toCart: aCart

	^ self should: [aCart add: aBook.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition]! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:27:24' prior: 50625357!
test06CanNotAddInvalidBook

	| aCart aCatalogue aBook |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self canNotAddBook: aBook toCart: aCart.
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:27:44' prior: 50625381!
test06CanNotAddInvalidBook

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self canNotAddBook: #book5 toCart: aCart.
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:28:22' prior: 50625185!
test07CanNotAddMultipleCopiesOfInvalidBookAtOnce

	| aCart aCatalogue aBook anAmount |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self should: [aCart add: aBook amount: anAmount.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition].
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:29:25'!
canNotAdd: anAmountOfCopies copiesOfBook: aBook toCart: aCart

	^ self should: [aCart add: aBook amount: anAmountOfCopies.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition]! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:29:55' prior: 50625401!
test07CanNotAddMultipleCopiesOfInvalidBookAtOnce

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self canNotAdd: 5 copiesOfBook: #book5 toCart: aCart.
		
	self assert: aCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:30:59' prior: 50625233!
test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce

	| aCart aCatalogue |
	aCatalogue := Catalogue withBooks: (OrderedCollection with: #book1).
	aCart := Cart on: aCatalogue.
	
	self canNotAdd: 0 copiesOfBook: #book1 toCart: aCart.
	self assert: aCart isEmpty.
	self canNotAdd: -2 copiesOfBook: #book1 toCart: aCart.
	self assert: aCart isEmpty.! !

!classDefinition: #CartTests category: 'TusLibros' stamp: 'LMR 6/8/2023 01:33:35'!
TestCase subclass: #CartTests
	instanceVariableNames: 'aBook12And3Catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTests category: 'TusLibros' stamp: 'LMR 6/8/2023 01:33:36'!
TestCase subclass: #CartTests
	instanceVariableNames: 'aBook12And3Catalogue myCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'setUp/tearDown' stamp: 'LMR 6/8/2023 01:33:43' overrides: 16961394!
setUp

	aBook12And3Catalogue := Catalogue withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	myCart := Cart on: aBook12And3Catalogue.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:34:11' prior: 50624908!
test02AddingABookToACartAddsIt

	myCart add: #book1.
	
	self deny: myCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:34:37' prior: 50624917!
test03CanAddMoreThanOneOfTheSameBook

	| expected |
	
	
	myCart add: #book1.
	myCart add: #book1.
	myCart add: #book1.
	
	expected := Bag with: #book1 with: #book1 with: #book1.
	self assert: myCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:34:41' prior: 50625481!
test03CanAddMoreThanOneOfTheSameBook

	| expected |

	myCart add: #book1.
	myCart add: #book1.
	myCart add: #book1.
	
	expected := Bag with: #book1 with: #book1 with: #book1.
	self assert: myCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:35:01' prior: 50624931!
test04CanAddDifferentBooks

	| expected |
	myCart add: #book1.
	myCart add: #book2.
	myCart add: #book3.
	
	expected := Bag with: #book1 with: #book2 with: #book3.
	self assert: myCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:35:17' prior: 50625152!
test05CanAddMultipleCopiesOfABookAtOnce

	| expected |
	myCart add: #book1 amount: 3.
	
	expected := Bag new.
	expected add: #book1 withOccurrences: 3.
	self assert: myCart listCart equals: expected.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:35:29' prior: 50625391!
test06CanNotAddInvalidBook

	self canNotAddBook: #book5 toCart: myCart.
		
	self assert: myCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:35:48' prior: 50625427!
test07CanNotAddMultipleCopiesOfInvalidBookAtOnce

	self canNotAdd: 5 copiesOfBook: #book5 toCart: myCart.	
	self assert: myCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:35:52' prior: 50625520!
test06CanNotAddInvalidBook

	self canNotAddBook: #book5 toCart: myCart.
	self assert: myCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:36:08' prior: 50625438!
test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce

	self canNotAdd: 0 copiesOfBook: #book1 toCart: myCart.
	self assert: myCart isEmpty.
	self canNotAdd: -2 copiesOfBook: #book1 toCart: myCart.
	self assert: myCart isEmpty.! !

!classDefinition: #CartTests category: 'TusLibros' stamp: 'LMR 6/8/2023 01:36:37'!
TestCase subclass: #CartTests
	instanceVariableNames: 'aBookCatalogue myCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 01:36:38' prior: 50625467 overrides: 16961394!
setUp

	aBookCatalogue := Catalogue withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	myCart := Cart on: aBookCatalogue.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:38:38'!
canNotAdd: anAmountOfCopies copiesOfBook: aBook toCart: aCart errorDescription: anErrorDescription

	^ self should: [aCart add: aBook amount: anAmountOfCopies.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = anErrorDescription]! !

!methodRemoval: CartTests #canNotAdd:copiesOfBook:toCart: stamp: 'LMR 6/8/2023 01:38:50'!
canNotAdd: anAmountOfCopies copiesOfBook: aBook toCart: aCart

	^ self should: [aCart add: aBook amount: anAmountOfCopies.]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | self assert: anError messageText = Cart bookNotInStoreErrorDescrition]!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:39:25' prior: 50625526!
test07CanNotAddMultipleCopiesOfInvalidBookAtOnce

	self canNotAdd: 5 copiesOfBook: #book5 toCart: myCart errorDescription: Cart bookNotInStoreErrorDescrition.	
	self assert: myCart isEmpty.! !
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:40:18' prior: 50625539!
test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce

	self canNotAdd: 0 copiesOfBook: #book1 toCart: myCart errorDescription: Cart invalidAmountOfItemsErrorDescription.
	self assert: myCart isEmpty.
	self canNotAdd: -2 copiesOfBook: #book1 toCart: myCart errorDescription: Cart invalidAmountOfItemsErrorDescription.
	self assert: myCart isEmpty.! !
!Cart methodsFor: 'add' stamp: 'LMR 6/8/2023 01:40:35' prior: 50625321!
add: aBook amount: anAmount 
	
	(storeCatalogue inStore: aBook) ifFalse: [^self error: self class bookNotInStoreErrorDescrition].
	anAmount <= 0 ifTrue: [^self error: self class invalidAmountOfItemsErrorDescription].
	products add: aBook withOccurrences: anAmount.! !
!Cart class methodsFor: 'error descriptions' stamp: 'LMR 6/8/2023 01:41:03'!
invalidAmountOfItemsErrorDescription

	^'Invalid amount of items to add to cart'.! !
!Cart class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 01:41:50'!
withCatalogue: aBookCatalogue 
	
	^self new initializeOn: aBookCatalogue.! !
!CartTests methodsFor: 'as yet unclassified' stamp: 'LMR 6/8/2023 01:41:50' prior: 50625557 overrides: 16961394!
setUp

	aBookCatalogue := Catalogue withBooks: (OrderedCollection with: #book1 with: #book2 with: #book3).
	myCart := Cart withCatalogue: aBookCatalogue.! !

!methodRemoval: Cart class #on: stamp: 'LMR 6/8/2023 01:41:50'!
on: aBookCatalogue 
	
	^self new initializeOn: aBookCatalogue.!
!Cart class methodsFor: 'instance creation' stamp: 'LMR 6/8/2023 01:42:05' prior: 50625627!
withCatalogue: aBookCatalogue 
	
	^self new initializeWithCatalogue: aBookCatalogue.! !
!Cart methodsFor: 'initialization' stamp: 'LMR 6/8/2023 01:42:31'!
initializeWithCatalogue: aBookCatalogue 
	
	storeCatalogue := aBookCatalogue.! !

!methodRemoval: Cart #initializeOn: stamp: 'LMR 6/8/2023 01:42:32'!
initializeOn: aBookCatalogue 
	
	storeCatalogue := aBookCatalogue.!

!testRun: #CartTests #test01NewCartStartsEmpty stamp: 'LMR 6/8/2023 01:42:45'!
PASSED!

!testRun: #CartTests #test02AddingABookToACartAddsIt stamp: 'LMR 6/8/2023 01:42:45'!
PASSED!

!testRun: #CartTests #test03CanAddMoreThanOneOfTheSameBook stamp: 'LMR 6/8/2023 01:42:46'!
PASSED!

!testRun: #CartTests #test04CanAddDifferentBooks stamp: 'LMR 6/8/2023 01:42:46'!
PASSED!

!testRun: #CartTests #test05CanAddMultipleCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:42:46'!
PASSED!

!testRun: #CartTests #test06CanNotAddInvalidBook stamp: 'LMR 6/8/2023 01:42:46'!
PASSED!

!testRun: #CartTests #test07CanNotAddMultipleCopiesOfInvalidBookAtOnce stamp: 'LMR 6/8/2023 01:42:46'!
PASSED!

!testRun: #CartTests #test08CanNotAddInvalidAmountOfCopiesOfABookAtOnce stamp: 'LMR 6/8/2023 01:42:46'!
PASSED!
!CartTests methodsFor: 'tests' stamp: 'LMR 6/8/2023 01:43:15' prior: 50625491!
test03CanAddMoreThanOneOfTheSameBook

	| expected |
	myCart add: #book1.
	myCart add: #book1.
	myCart add: #book1.
	
	expected := Bag with: #book1 with: #book1 with: #book1.
	self assert: myCart listCart equals: expected.! !

----SNAPSHOT----(8 June 2023 01:43:33) CuisUniversity-5832.image priorSource: 9366758!

----QUIT----(8 June 2023 01:43:38) CuisUniversity-5832.image priorSource: 9409376!