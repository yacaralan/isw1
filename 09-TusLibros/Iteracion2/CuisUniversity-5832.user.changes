

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (11 June 2023 21:21:53) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5832\windows64\CuisUniversity-5832.image!


TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 21:25:09'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Date month: 10 year: 2021!

July/2021.!

July!

GregorianMonthOfYear year: 2023 monthNumber: 8!

GregorianMonthOfYear year: 2023 month: August!

!classDefinition: #Checkout category: 'TusLibros' stamp: 'LMR 6/11/2023 21:41:13'!
Object subclass: #Checkout
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 'LMR 6/11/2023 21:41:19'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'no messages' stamp: 'LMR 6/11/2023 21:41:03'!
test01CanNotCheckoutEmptyCart

	| aCart aCheckout |
	aCart := Cart acceptingItemsOf: (OrderedCollection new).
	aCheckout := Checkout of: aCart withCard: (Card name: 'Jorge' number: 1234567890123456 expirationDate: GregorianMonthOfYear year: 2023 month: August).
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		anError messageText = Checkout emptyCartErrorDescription.]. ! !

!classRenamed: #Card as: #CreditCard stamp: 'LMR 6/11/2023 21:41:49'!
Smalltalk renameClassNamed: #Card as: #CreditCard!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 21:41:49' prior: 50626366!
test01CanNotCheckoutEmptyCart

	| aCart aCheckout |
	aCart := Cart acceptingItemsOf: (OrderedCollection new).
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: GregorianMonthOfYear year: 2023 month: August).
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		anError messageText = Checkout emptyCartErrorDescription.]. ! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:42:05'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:42:12'!
name: aString number: aSmallInteger expirationDate: aClass year: aSmallInteger4 month: aNonSpecificThirtyOneDaysGregorianMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeName: aString number: aSmallInteger expirationDate: aClass year: aSmallInteger4 month: aNonSpecificThirtyOneDaysGregorianMonth ! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 21:43:06' prior: 50626387!
test01CanNotCheckoutEmptyCart

	| aCart aCheckout |
	aCart := Cart acceptingItemsOf: (OrderedCollection new).
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)).
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		anError messageText = Checkout emptyCartErrorDescription.]. ! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:43:11'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:43:20'!
name: aString number: aSmallInteger expirationDate: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeName: aString number: aSmallInteger expirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:43:27' prior: 50626442!
name: aString number: aSmallInteger expirationDate: aGregorianMonthOfYear 
	
	^self new initializeName: aString number: aSmallInteger expirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:43:33' prior: 50626454!
name: aName number: aSmallInteger expirationDate: aGregorianMonthOfYear 
	
	^self new initializeName: aName number: aSmallInteger expirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:43:46' prior: 50626463!
name: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear 
	
	^self new initializeName: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:43:52' prior: 50626472!
name: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear 
	
	^self new initializeName: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:43:54'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'LMR 6/11/2023 21:44:02'!
Object subclass: #CreditCard
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'LMR 6/11/2023 21:44:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'name creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'LMR 6/11/2023 21:44:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'name creditCardNumber gregorianMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'LMR 6/11/2023 21:44:03'!
initializeName: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear 
	self shouldBeImplemented.
	name := aName.
	creditCardNumber := aCreditCardNumber.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'LMR 6/11/2023 21:44:48' prior: 50626514!
initializeName: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear 
	
	name := aName.
	creditCardNumber := aCreditCardNumber.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'LMR 6/11/2023 21:44:57'!
Object subclass: #CreditCard
	instanceVariableNames: 'name creditCardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 21:44:57' prior: 50626524!
initializeName: aName number: aCreditCardNumber expirationDate: aGregorianMonthOfYear 
	
	name := aName.
	creditCardNumber := aCreditCardNumber.
	expirationDate := aGregorianMonthOfYear.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:44:59'!
ERROR!
!Checkout class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:45:08'!
of: aCart withCard: aCreditCard 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aCart withCard: aCreditCard ! !
!Checkout class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:45:19' prior: 50626553!
of: aCart withCard: aCreditCard 
	
	^self new initializeOf: aCart withCard: aCreditCard ! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:45:20'!
ERROR!

!classDefinition: #Checkout category: 'TusLibros' stamp: 'LMR 6/11/2023 21:45:26'!
Object subclass: #Checkout
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Checkout category: 'TusLibros' stamp: 'LMR 6/11/2023 21:45:26'!
Object subclass: #Checkout
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/11/2023 21:45:26'!
initializeOf: aCart withCard: aCreditCard 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.! !
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/11/2023 21:45:32' prior: 50626584!
initializeOf: aCart withCard: aCreditCard 
	
	cart := aCart.
	creditCard := aCreditCard.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:45:34'!
ERROR!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 21:45:44'!
checkout
	self shouldBeImplemented.! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 21:46:05' prior: 50626599!
checkout
	
	self error: self class emptyCartErrorDescription.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:46:06'!
ERROR!
!Checkout class methodsFor: 'error descriptions' stamp: 'LMR 6/11/2023 21:46:34'!
emptyCartErrorDescription
	self shouldBeImplemented.! !
!Checkout class methodsFor: 'error descriptions' stamp: 'LMR 6/11/2023 21:46:57' prior: 50626611!
emptyCartErrorDescription
	
	^'Can not checkout an empty cart'.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:46:58'!
PASSED!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:46:58'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 21:54:15'!
test02CartWithOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 100.! !

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 21:54:31'!
ERROR!
!Checkout class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:54:36'!
of: aCart withCard: aCreditCard withPrices: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aCart withCard: aCreditCard withPrices: aDictionary ! !
!Checkout class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:54:52' prior: 50626648!
of: aCart withCard: aCreditCard withPrices: aPriceList 
	
	^self new initializeOf: aCart withCard: aCreditCard withPrices: aPriceList ! !
!Checkout class methodsFor: 'instance creation' stamp: 'LMR 6/11/2023 21:54:53' prior: 50626659!
of: aCart withCard: aCreditCard withPrices: aPriceList 
	
	^self new initializeOf: aCart withCard: aCreditCard withPrices: aPriceList. ! !

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 21:54:55'!
ERROR!

!classDefinition: #Checkout category: 'TusLibros' stamp: 'LMR 6/11/2023 21:54:59'!
Object subclass: #Checkout
	instanceVariableNames: 'cart creditCard priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/11/2023 21:55:00'!
initializeOf: aCart withCard: aCreditCard withPrices: aPriceList 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.
	priceList := aPriceList.! !
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/11/2023 21:55:08' prior: 50626685!
initializeOf: aCart withCard: aCreditCard withPrices: aPriceList 
	
	cart := aCart.
	creditCard := aCreditCard.
	priceList := aPriceList.! !

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 21:55:09'!
ERROR!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 21:55:51' prior: 50626422!
test01CanNotCheckoutEmptyCart

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection new).
	aPriceList := Dictionary new.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)).
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		anError messageText = Checkout emptyCartErrorDescription.]. ! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 21:56:00' prior: 50626704!
test01CanNotCheckoutEmptyCart

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection new).
	aPriceList := Dictionary new.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		anError messageText = Checkout emptyCartErrorDescription.]. ! !

!methodRemoval: Checkout #initializeOf:withCard: stamp: 'LMR 6/11/2023 21:56:20'!
initializeOf: aCart withCard: aCreditCard 
	
	cart := aCart.
	creditCard := aCreditCard.!

!methodRemoval: Checkout class #of:withCard: stamp: 'LMR 6/11/2023 21:56:24'!
of: aCart withCard: aCreditCard 
	
	^self new initializeOf: aCart withCard: aCreditCard !

!methodRemoval: CreditCard class #name:number:expirationDate:year:month: stamp: 'LMR 6/11/2023 21:56:33'!
name: aString number: aSmallInteger expirationDate: aClass year: aSmallInteger4 month: aNonSpecificThirtyOneDaysGregorianMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeName: aString number: aSmallInteger expirationDate: aClass year: aSmallInteger4 month: aNonSpecificThirtyOneDaysGregorianMonth !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 21:56:40'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 21:56:40'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 21:56:40'!
ERROR!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 21:58:37' prior: 50626603!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 22:02:29' prior: 50626776!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	cart sendProductsTo: self.! !
!Cart methodsFor: 'nil' stamp: 'LMR 6/11/2023 22:02:53'!
sendProductsTo: aCheckout

	! !
!Cart methodsFor: 'initialization' stamp: 'LMR 6/11/2023 22:03:19' prior: 50626178!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'LMR 6/11/2023 22:04:26' prior: 50626196!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LMR 6/11/2023 22:04:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LMR 6/11/2023 22:04:31'!
PASSED!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:04:31'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:04:31'!
FAILURE!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:04:31'!
FAILURE!

(Bag with: 'hola' with: 'chau') first!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

(Bag with: 'hola' with: 'chau') atRandom!

atRandom!

(Bag with: 'hola') atRandom !

(Bag with: 'hola') atRandom !

(Bag with: 'hola') atRandom !

(Bag with: 'hola') atRandom !

(Bag with: 'hola') atRandom !

(Bag with: 'hola') at: 1 !
!Cart methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:09:23' prior: 50626788!
sendProductsTo: aCheckout

	aCheckout processProducts: items atRandom.! !

!classDefinition: #Checkout category: 'TusLibros' stamp: 'LMR 6/11/2023 22:10:44'!
Object subclass: #Checkout
	instanceVariableNames: 'cart creditCard priceList total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Checkout methodsFor: 'nil' stamp: 'LMR 6/11/2023 22:10:42'!
processProducts: aProduct

	total := priceList at: aProduct.! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 22:10:57' prior: 50626782!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	cart sendProductsTo: self.
	^total.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:11:02'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:11:02'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:11:44'!
test02CartWithMoreThanOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 300.! !

!testRun: #CheckoutTest #test02CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:11:47'!
FAILURE!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:11:55'!
test03CartWithOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 100.! !

!methodRemoval: CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:11:55'!
test02CartWithOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 100.!
!Checkout methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:12:19' prior: 50626870!
processProducts: aProduct

	total := total + (priceList at: aProduct).! !
!Cart methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:13:27' prior: 50626858!
sendProductsTo: aCheckout

	items withOccurrencesDo: [:item | aCheckout processProducts: item.]! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:13:36'!
PASSED!

!testRun: #CheckoutTest #test02CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:13:36'!
ERROR!

!testRun: #CheckoutTest #test03CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:13:36'!
ERROR!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:13:56'!
test03CartWithMoreThanOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 300.! !

!methodRemoval: CheckoutTest #test02CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:13:57'!
test02CartWithMoreThanOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 300.!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:14:03'!
test02CartWithOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 100.! !

!methodRemoval: CheckoutTest #test03CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:14:04'!
test03CartWithOneItemChecksoutCorrectly

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self assert: aCheckout checkout equals: 100.!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:14:07'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:14:07'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:14:07'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:14:10'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:15:29' prior: 50626950!
sendProductsTo: aCheckout

	items do: [:item | aCheckout processProducts: item.]! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:15:34'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:15:34'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:15:34'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:15:36'!
ERROR!
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/11/2023 22:16:03' prior: 50626693!
initializeOf: aCart withCard: aCreditCard withPrices: aPriceList 
	
	cart := aCart.
	creditCard := aCreditCard.
	priceList := aPriceList.
	total := 0.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:16:08'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:16:08'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:16:08'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:22:12'!
test04CanNotCheckoutWithCardWithEmptyName

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: '' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithCardWithEmptyName].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:22:35' prior: 50626722!
test01CanNotCheckoutEmptyCart

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection new).
	aPriceList := Dictionary new.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		self assert: anError messageText equals: Checkout emptyCartErrorDescription.]. ! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:22:40'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:22:40'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:22:41'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:22:41'!
FAILURE!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:22:41'!
FAILURE!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 22:23:23' prior: 50626875!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	creditCard name isEmpty ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	cart sendProductsTo: self.
	^total.! !
!Checkout class methodsFor: 'error descriptions' stamp: 'LMR 6/11/2023 22:23:53'!
canNotCheckoutWithCardWithEmptyName
	
	^'Can not checkout with a credit card with empty name'.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:23:59'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:23:59'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:23:59'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:23:59'!
FAILURE!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:24:00'!
FAILURE!
!CreditCard methodsFor: 'nil' stamp: 'LMR 6/11/2023 22:24:22' overrides: 16903442!
name

	^name.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:24:26'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:24:26'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:24:26'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:24:26'!
PASSED!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 22:25:49' prior: 50627145!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	cart sendProductsTo: self.
	^total.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:25:59'!
hasEmptyName

	^name isEmpty.! !

!methodRemoval: CreditCard #name stamp: 'LMR 6/11/2023 22:26:04'!
name

	^name.!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:26:09'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:26:09'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:26:09'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:26:09'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:28:08'!
test05CanNotCheckoutWithCardWithInvalidNumberOfDigits

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 12345678901234567 expirationDate: (GregorianMonthOfYear year: 2023 month: August)) withPrices: aPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithCardWithInvalidNumberOfDigits].! !
!Checkout class methodsFor: 'error descriptions' stamp: 'LMR 6/11/2023 22:28:42'!
canNotCheckoutWithCardWithInvalidNumberOfDigits
	
	^'Can not checkout with a credit card with an invalid amount of digits'.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:28:50'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:28:50'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:28:50'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:28:50'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:28:50'!
FAILURE!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:28:50'!
FAILURE!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 22:29:39' prior: 50627195!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	creditCard has16DigitNumber ifFalse: [self error: self class canNotCheckoutWithCardWithInvalidNumberOfDigits].
	cart sendProductsTo: self.
	^total.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:33:14'!
has16DigitNumber

	^creditCardNumber digitLength = 16.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:33:19'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:33:19'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:33:20'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:33:20'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:33:20'!
PASSED!

89072938 digitLength !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:34:02' prior: 50627289!
has16DigitNumber

	^creditCardNumber asString length = 16.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:34:06'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:34:06'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:34:06'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:34:06'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:34:06'!
ERROR!

98761923 asString length!

98761923 asString size!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:34:55' prior: 50627312!
has16DigitNumber

	^creditCardNumber asString size = 16.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:34:57'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:34:57'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:34:57'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:34:58'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:34:58'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:36:08'!
test06CanNotCheckoutWithExpiredCard

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: April)) withPrices: aPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithExpiredCard].! !
!Checkout class methodsFor: 'error descriptions' stamp: 'LMR 6/11/2023 22:36:35'!
canNotCheckoutWithExpiredCard
	
	^'Can not checkout with an expired credit card'.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:36:42'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:36:43'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:36:43'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:36:43'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:36:43'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:36:43'!
FAILURE!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:36:43'!
FAILURE!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 22:37:35' prior: 50627276!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	creditCard has16DigitNumber ifFalse: [self error: self class canNotCheckoutWithCardWithInvalidNumberOfDigits].
	creditCard isExpired ifTrue: [self error: self class canNotCheckoutWithExpiredCard].
	cart sendProductsTo: self.
	^total.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:37:48'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:37:48'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:37:48'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:37:48'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:37:49'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:37:49'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:37:55'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:41:55'!
isExpired

	^expirationDate < GregorianMonthOfYear current.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:42:01'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:42:01'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:42:02'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:42:02'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:42:02'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:42:02'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:42:05'!
ERROR!

GregorianMonthOfYear current!

GregorianMonthOfYear current!

expirationDate!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:45:29' prior: 50627449!
isExpired

	^expirationDate < (GregorianMonthOfYear current).! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:45:39'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:45:39'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:45:40'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:45:40'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:45:40'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:45:40'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:45:49'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:45:56'!
ERROR!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:46:00'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:47:52' prior: 50627480!
isExpired

	^expirationDate < (GregorianMonthOfYear year: 2023 month: April).! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:47:58'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:47:58'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:47:58'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:47:58'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:47:58'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:47:58'!
FAILURE!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:47:58'!
FAILURE!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 22:48:46' prior: 50627358!
test06CanNotCheckoutWithExpiredCard

	| aCart aCheckout aPriceList |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCheckout := Checkout of: aCart withCard: (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: April)) withPrices: aPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithExpiredCard].! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 22:48:53' prior: 50627516!
isExpired

	^expirationDate < (GregorianMonthOfYear year: 2023 month: May).! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/11/2023 22:48:58'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:48:58'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/11/2023 22:48:58'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/11/2023 22:48:58'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/11/2023 22:48:58'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/11/2023 22:48:59'!
PASSED!

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'LMR 6/11/2023 23:19:36'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/11/2023 23:19:32'!
test07CanNotCheckOutIfCardHasInsufficientFunds

	| aCart aCheckout aPriceList aMockMerchantProcessor aCard cardFunds |
	aCart := Cart acceptingItemsOf: (OrderedCollection with: 'libro1').
	aCart add: 3 of: 'libro1'.
	aPriceList := Dictionary new.
	aPriceList at: 'libro1' put: 100.
	aCard := (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear year: 2023 month: April)).
	aCheckout := Checkout of: aCart withCard: aCard withPrices: aPriceList.
	cardFunds := Dictionary new.
	cardFunds at: 1234567890123456 put: 50.
	aMockMerchantProcessor := MockMerchantProcessor withStolen: (OrderedCollection new) withCardFunds: cardFunds.

	self should: [aMockMerchantProcessor debit: aCheckout checkout fromCard: aCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/11/2023 23:22:19' prior: 50627409!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	creditCard has16DigitNumber ifFalse: [self error: self class canNotCheckoutWithCardWithInvalidNumberOfDigits].
	creditCard isExpired ifTrue: [self error: self class canNotCheckoutWithExpiredCard].
	cart sendProductsTo: self.
	self debitTotal.
	^total.! !

!classDefinition: #Checkout category: 'TusLibros' stamp: 'LMR 6/11/2023 23:23:27'!
Object subclass: #Checkout
	instanceVariableNames: 'cart creditCard priceList total merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Checkout methodsFor: 'as yet unclassified' stamp: 'LMR 6/11/2023 23:23:26'!
debitTotal

	merchantProcessor debit: total fromCard: creditCard.! !

----SNAPSHOT----(11 June 2023 23:24:12) CuisUniversity-5832.image priorSource: 9429766!
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/11/2023 23:25:01' prior: 50627070!
initializeOf: aCart withCard: aCreditCard withPrices: aPriceList 
	
	cart := aCart.
	creditCard := aCreditCard.
	priceList := aPriceList.
	total := 0.
	merchantProcessor := MockMerchantProcessor new.! !
!MockMerchantProcessor methodsFor: 'no messages' stamp: 'LMR 6/11/2023 23:29:24'!
debit: anAmount fromCard: aCreditCard

	"(anAmount > cardFunds at: aCreditCard) ifTrue: [self error: self class insufficientFundsErrorDescription]."
	self error: self class insufficientFundsErrorDescription.! !
!MockMerchantProcessor class methodsFor: 'no messages' stamp: 'LMR 6/11/2023 23:31:19'!
insufficientFundsErrorDescription

	^'Insufficient funds for purchase'.! !

GregorianMonthOfYear current!

GregorianMonthOfYear current = GregorianMonthOfYear year: 2023 month: June!

GregorianMonthOfYear current = (GregorianMonthOfYear year: 2023 month: June)!

GregorianMonthOfYear current < (GregorianMonthOfYear year: 2023 month: December)!

GregorianMonthOfYear current < (GregorianMonthOfYear current next)!

GregorianMonthOfYear current < (GregorianMonthOfYear current previous)!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:28'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:29'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:31'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:32'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:34'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:35'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:36'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds aStolenCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:37'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds aStolenCard aCardFunds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/11/2023 23:59:38'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds aStolenCard aCardFunds myMockMerchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/11/2023 23:59:55' overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: 1234567890123456 expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: 12345678901234567 expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: 1034567890123456 expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: 12045678901234567 expirationDate: (GregorianMonthOfYear current next)).
	
	aCardFunds := Dictionary new.
	aCardFunds at: 1234567890123456 put: 500.
	aCardFunds at: 1034567890123456 put: 5.
	aCardFunds at: 1204567890123456 put: 250.	
	
	myMockMerchantProcessor := MockMerchantProcessor withStolen: (OrderedCollection with: 12045678901234567) withCardFunds: aCardFunds.
	! !

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/12/2023 00:01:59'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds aStolenCard aCardFunds myMockMerchantProcessor aValidCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/12/2023 00:01:58' prior: 50627784 overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: 1234567890123456 expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: 12345678901234567 expirationDate: (GregorianMonthOfYear current next)).
	aValidCard := (CreditCard name: 'Jorge' number: 1234567890123457 expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: 1034567890123456 expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: 12045678901234567 expirationDate: (GregorianMonthOfYear current next)).
	
	aCardFunds := Dictionary new.
	aCardFunds at: 1234567890123456 put: 500.
	aCardFunds at: 1234567890123457 put: 500.
	aCardFunds at: 1034567890123456 put: 5.
	aCardFunds at: 1204567890123456 put: 250.	
	
	myMockMerchantProcessor := MockMerchantProcessor withStolen: (OrderedCollection with: 12045678901234567) withCardFunds: aCardFunds.
	! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:02:16' prior: 50627109!
test01CanNotCheckoutEmptyCart

	| aCheckout |
	aCheckout := Checkout of: myCart withCard: aValidCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | 
		self assert: anError messageText equals: Checkout emptyCartErrorDescription.]. ! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:03:51' prior: 50627002!
test02CartWithOneItemChecksoutCorrectly

	| aCheckout |
	myCart add: 'libro1'.
	aCheckout := Checkout of: myCart withCard: aValidCard withPrices: myPriceList.
	self assert: aCheckout checkout equals: 100.! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:04:18' prior: 50626966!
test03CartWithMoreThanOneItemChecksoutCorrectly

	| aCheckout |
	myCart add: 3 of: 'libro1'.
	aCheckout := Checkout of: myCart withCard: aValidCard withPrices: myPriceList.
	self assert: aCheckout checkout equals: 300.! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:04:47' prior: 50627087!
test04CanNotCheckoutWithCardWithEmptyName

	| aCheckout |
	myCart add: 3 of: 'libro1'.
	aCheckout := Checkout of: myCart withCard: anUnamedCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithCardWithEmptyName].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:05:13' prior: 50627225!
test05CanNotCheckoutWithCardWithInvalidNumberOfDigits

	| aCheckout |
	myCart add: 3 of: 'libro1'.
	aCheckout := Checkout of: myCart withCard: anInvalidCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithCardWithInvalidNumberOfDigits].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:05:51' prior: 50627545!
test06CanNotCheckoutWithExpiredCard

	| aCheckout |
	myCart add: 3 of: 'libro1'.
	aCheckout := Checkout of: myCart withCard: anExpiredCreditCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithExpiredCard].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:07:24' prior: 50627600!
test07CanNotCheckOutIfCardHasInsufficientFunds

	| aCheckout |
	myCart add: 3 of: 'libro1'.
	aCheckout := Checkout of: myCart withCard: aCardWithInsufficientFunds withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].! !
!CheckoutTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/12/2023 00:08:23' prior: 50627836 overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: 1234567890123456 expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: 1234567890123456 expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: 12345678901234567 expirationDate: (GregorianMonthOfYear current next)).
	aValidCard := (CreditCard name: 'Jorge' number: 1234567890123457 expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: 1034567890123456 expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: 12045678901234567 expirationDate: (GregorianMonthOfYear current next)).
	! !
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/12/2023 00:10:04' prior: 50627665!
initializeOf: aCart withCard: aCreditCard withPrices: aPriceList 
	
	| aCardFunds |
	cart := aCart.
	creditCard := aCreditCard.
	priceList := aPriceList.
	total := 0.
	aCardFunds := Dictionary new.
	aCardFunds at: 1234567890123456 put: 500.
	aCardFunds at: 1234567890123457 put: 500.
	aCardFunds at: 1034567890123456 put: 5.
	aCardFunds at: 1204567890123456 put: 250.	
	merchantProcessor := MockMerchantProcessor withStolen: (OrderedCollection with: 12045678901234567) withCardFunds: aCardFunds.! !

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'LMR 6/12/2023 00:11:19'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: 'aCardFunds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'LMR 6/12/2023 00:11:20'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: 'aCardFunds stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'nil' stamp: 'LMR 6/12/2023 00:11:18' overrides: 16920235!
initialize

	aCardFunds := Dictionary new.
	aCardFunds at: 1234567890123456 put: 500.
	aCardFunds at: 1234567890123457 put: 500.
	aCardFunds at: 1034567890123456 put: 5.
	aCardFunds at: 1204567890123456 put: 250.	
	stolenCards :=  OrderedCollection with: 12045678901234567.! !

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'LMR 6/12/2023 00:11:29'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: 'cardFunds stolenCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:11:30' prior: 50628044 overrides: 16920235!
initialize

	cardFunds := Dictionary new.
	cardFunds at: 1234567890123456 put: 500.
	cardFunds at: 1234567890123457 put: 500.
	cardFunds at: 1034567890123456 put: 5.
	cardFunds at: 1204567890123456 put: 250.	
	stolenCards :=  OrderedCollection with: 12045678901234567.! !
!Checkout methodsFor: 'initialization' stamp: 'LMR 6/12/2023 00:12:02' prior: 50628009!
initializeOf: aCart withCard: aCreditCard withPrices: aPriceList 
	
	cart := aCart.
	creditCard := aCreditCard.
	priceList := aPriceList.
	total := 0.
	merchantProcessor := MockMerchantProcessor new.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:12:21'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:12:21'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:12:21'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:12:21'!
ERROR!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:12:21'!
ERROR!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:12:21'!
ERROR!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:12:21'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:12:25'!
ERROR!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:12:51'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:12:52'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:12:52'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:12:52'!
ERROR!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:12:52'!
ERROR!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:12:52'!
ERROR!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:12:52'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LMR 6/12/2023 00:12:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LMR 6/12/2023 00:12:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LMR 6/12/2023 00:12:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LMR 6/12/2023 00:12:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LMR 6/12/2023 00:12:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LMR 6/12/2023 00:12:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LMR 6/12/2023 00:12:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LMR 6/12/2023 00:12:59'!
PASSED!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:13:04'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:13:04'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:13:04'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:13:04'!
ERROR!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:13:04'!
ERROR!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:13:04'!
ERROR!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:13:04'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:13:14'!
ERROR!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:14:43' prior: 50627894!
test02CartWithOneItemChecksoutCorrectly

	| aCheckout |
	myCart add: 'book1'.
	aCheckout := Checkout of: myCart withCard: aValidCard withPrices: myPriceList.
	self assert: aCheckout checkout equals: 100.! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:14:47' prior: 50627904!
test03CartWithMoreThanOneItemChecksoutCorrectly

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aValidCard withPrices: myPriceList.
	self assert: aCheckout checkout equals: 300.! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:14:50' prior: 50627914!
test04CanNotCheckoutWithCardWithEmptyName

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: anUnamedCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithCardWithEmptyName].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:14:52' prior: 50627928!
test05CanNotCheckoutWithCardWithInvalidNumberOfDigits

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: anInvalidCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithCardWithInvalidNumberOfDigits].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:14:56' prior: 50627943!
test06CanNotCheckoutWithExpiredCard

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: anExpiredCreditCard withPrices: myPriceList.
	self should: [aCheckout checkout]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout canNotCheckoutWithExpiredCard].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:14:59' prior: 50627957!
test07CanNotCheckOutIfCardHasInsufficientFunds

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithInsufficientFunds withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:15:04'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:05'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:05'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:15:05'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:15:05'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:15:05'!
ERROR!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:15:05'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:08'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:15:38' prior: 50627567!
isExpired

	^expirationDate < GregorianMonthOfYear current.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:15:42'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:42'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:42'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:15:42'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:15:42'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:15:42'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:15:42'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:50'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:15:57'!
ERROR!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:16:44'!
ERROR!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:17:26' prior: 50627674!
debit: anAmount fromCard: aCreditCard

	(anAmount > cardFunds at: aCreditCard) ifTrue: [self error: self class insufficientFundsErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:17:31'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:17:31'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:17:31'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:17:31'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:17:31'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:17:31'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:17:31'!
FAILURE!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:17:40'!
FAILURE!
!CheckoutTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/12/2023 00:19:56' prior: 50627975 overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: '1234567890123456' expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: '1234567890123456' expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: '12345678901234567' expirationDate: (GregorianMonthOfYear current next)).
	aValidCard := (CreditCard name: 'Jorge' number: '1234567890123457' expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: '1034567890123456' expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: '12045678901234567' expirationDate: (GregorianMonthOfYear current next)).
	! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:20:18' prior: 50628065 overrides: 16920235!
initialize

	cardFunds := Dictionary new.
	cardFunds at: '1234567890123456' put: 500.
	cardFunds at: '1234567890123457' put: 500.
	cardFunds at: '1034567890123456' put: 5.
	cardFunds at: '1204567890123456' put: 250.	
	stolenCards :=  OrderedCollection with: '12045678901234567'.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:20:28' prior: 50627336!
has16DigitNumber

	^creditCardNumber size = 16.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:20:32'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:20:32'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:20:32'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:20:32'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:20:32'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:20:32'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:20:33'!
FAILURE!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:20:38'!
FAILURE!

myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:21:23'!
FAILURE!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:21:40'!
FAILURE!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:22:07' prior: 50628253!
test07CanNotCheckOutIfCardHasInsufficientFunds

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithInsufficientFunds withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].! !
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:22:15' prior: 50628464!
test07CanNotCheckOutIfCardHasInsufficientFunds

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithInsufficientFunds withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].! !

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:22:50'!
FAILURE!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:23:08'!
FAILURE!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:23:32'!
FAILURE!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:25:48'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:25:56'!
ERROR!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:27:57' prior: 50628338!
debit: anAmount fromCard: aCreditCard

	(anAmount > (cardFunds at: aCreditCard)) ifTrue: [self error: self class insufficientFundsErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:28:00'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:28:00'!
ERROR!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:28:00'!
ERROR!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:28:00'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:28:00'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:28:00'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:28:00'!
FAILURE!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:28:04'!
ERROR!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:30:54' prior: 50628517!
debit: anAmount fromCard: aCreditCard

	aCreditCard sendNumberTo: self.! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:31:48' prior: 50628553!
debit: anAmount fromCard: aCreditCard

	(anAmount > (cardFunds at: aCreditCard number)) ifTrue: [self error: self class insufficientFundsErrorDescription].! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:32:05'!
number

	^creditCardNumber.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:32:09'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:32:09'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:32:09'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:32:09'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:32:09'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:32:09'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:32:10'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 00:40:10'!
test08CanNotCheckOutIfCardIsStolen

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aStolenCard withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aStolenCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor stolenCardErrorDescription].! !
!MockMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:40:36'!
stolenCardErrorDescription

	^'Stolen card'.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:40:47'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:40:48'!
FAILURE!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:40:48'!
FAILURE!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:41:54' prior: 50628559!
debit: anAmount fromCard: aCreditCard

	(anAmount > (cardFunds at: aCreditCard number)) ifTrue: [self error: self class insufficientFundsErrorDescription].
	(stolenCards includes: aCreditCard number) ifTrue: [self error: self class stolenCardErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:41:58'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:41:58'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:41:59'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:41:59'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:41:59'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:41:59'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:41:59'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:41:59'!
FAILURE!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:41:59'!
FAILURE!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:44:49'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:44:49'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:44:49'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:44:49'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:44:49'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:44:49'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:44:50'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:44:50'!
FAILURE!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:44:50'!
FAILURE!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:49:23' prior: 50628410 overrides: 16920235!
initialize

	cardFunds := Dictionary new.
	cardFunds at: '1234567890123456' put: 500.
	cardFunds at: '1234567890123457' put: 500.
	cardFunds at: '1034567890123456' put: 5.
	cardFunds at: '1204567890123456' put: 250.	
	stolenCards :=  OrderedCollection with: '1204567890123456'.! !
!CheckoutTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/12/2023 00:49:35' prior: 50628374 overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: '1234567890123456' expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: '1234567891123456' expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: '12345678' expirationDate: (GregorianMonthOfYear current next)).
	aValidCard := (CreditCard name: 'Jorge' number: '1234567890123457' expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: '1034567890123456' expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: '1204567890123456' expirationDate: (GregorianMonthOfYear current next)).
	! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 00:49:47' prior: 50628646!
debit: anAmount fromCard: aCreditCard

	(stolenCards includes: aCreditCard number) ifTrue: [self error: self class stolenCardErrorDescription].
	(anAmount > (cardFunds at: aCreditCard number)) ifTrue: [self error: self class insufficientFundsErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:49:50'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:49:51'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:49:52'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:49:52'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:49:52'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:49:52'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:49:52'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:49:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LMR 6/12/2023 00:52:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LMR 6/12/2023 00:52:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 00:52:19'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 00:52:20'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 00:52:20'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 00:52:20'!
PASSED!

----SNAPSHOT----(12 June 2023 00:52:23) CuisUniversity-5832.image priorSource: 9472356!

----QUIT----(12 June 2023 00:53:42) CuisUniversity-5832.image priorSource: 9510626!

----STARTUP---- (12 June 2023 14:57:23) as D:\OneDrive - dc.uba.ar\UBA\Inge1\cuis5832\windows64\CuisUniversity-5832.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LMR 6/12/2023 14:58:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LMR 6/12/2023 14:58:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LMR 6/12/2023 14:58:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LMR 6/12/2023 14:58:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LMR 6/12/2023 14:58:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 14:58:21'!
PASSED!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/12/2023 15:02:21'!
validateCard

	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	creditCard has16DigitNumber ifFalse: [self error: self class canNotCheckoutWithCardWithInvalidNumberOfDigits].
	creditCard isExpired ifTrue: [self error: self class canNotCheckoutWithExpiredCard]! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/12/2023 15:02:21' prior: 50627632!
checkout
	
	cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.].
	self validateCard.
	cart sendProductsTo: self.
	self debitTotal.
	^total.! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/12/2023 15:02:30'!
validateCart

	^ cart isEmpty ifTrue: [self error: self class emptyCartErrorDescription.]! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/12/2023 15:02:30' prior: 50628933!
checkout
	
	self validateCart.
	self validateCard.
	cart sendProductsTo: self.
	self debitTotal.
	^total.! !

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/12/2023 15:12:00'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds aStolenCard aCardFunds myMockMerchantProcessor aValidCard aCardWithMoreThan30CharactersOnItsNae'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 15:11:57'!
test09CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsNae withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsNae.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout invalidDefinitionErrorDescription].! !
!CheckoutTest methodsFor: 'setUp/tearDown' stamp: 'LMR 6/12/2023 15:13:50' prior: 50628732 overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: '1234567890123456' expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: '1234567891123456' expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: '12345678' expirationDate: (GregorianMonthOfYear current next)).
	aValidCard := (CreditCard name: 'Jorge' number: '1234567890123457' expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: '1034567890123456' expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: '1204567890123456' expirationDate: (GregorianMonthOfYear current next)).
	aCardWithMoreThan30CharactersOnItsNae := (CreditCard name: 'HolaComoEstasMeLlamoJorgeGonzales' number: '1204560890123456' expirationDate: (GregorianMonthOfYear current next)).! !

!classDefinition: #CheckoutTest category: 'TusLibros' stamp: 'LMR 6/12/2023 15:13:57'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'myCart myPriceList anExpiredCreditCard anUnamedCard anInvalidCard aCardWithInsufficientFunds aStolenCard aCardFunds myMockMerchantProcessor aValidCard aCardWithMoreThan30CharactersOnItsName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 15:13:57' prior: 50628985 overrides: 16961394!
setUp

	myCart := Cart acceptingItemsOf: (OrderedCollection with: 'book1' with: 'book2' with: 'book3').
	myPriceList := Dictionary new.
	myPriceList at: 'book1' put: 100.
	myPriceList at: 'book2' put: 50.
	myPriceList at: 'book3' put: 10.
	
	anExpiredCreditCard := (CreditCard name: 'Jorge' number: '1234567890123456' expirationDate: (GregorianMonthOfYear current previous)).
	anUnamedCard := (CreditCard name: '' number: '1234567891123456' expirationDate: (GregorianMonthOfYear current next)).
	anInvalidCard := (CreditCard name: 'Jorge' number: '12345678' expirationDate: (GregorianMonthOfYear current next)).
	aValidCard := (CreditCard name: 'Jorge' number: '1234567890123457' expirationDate: (GregorianMonthOfYear current next)).
	aCardWithInsufficientFunds := (CreditCard name: 'Jorge' number: '1034567890123456' expirationDate: (GregorianMonthOfYear current next)).
	aStolenCard := (CreditCard name: 'Jorge' number: '1204567890123456' expirationDate: (GregorianMonthOfYear current next)).
	aCardWithMoreThan30CharactersOnItsName := (CreditCard name: 'HolaComoEstasMeLlamoJorgeGonzales' number: '1204560890123456' expirationDate: (GregorianMonthOfYear current next)).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 15:13:57' prior: 50628966!
test09CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsName withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsName.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout invalidDefinitionErrorDescription].! !
!Checkout class methodsFor: 'error descriptions' stamp: 'LMR 6/12/2023 15:14:41'!
cardNameIsTooLongErrorDescription
	
	^'Credit card name is too long'.! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 15:14:47'!
PASSED!

!testRun: #CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:14:47'!
ERROR!

!testRun: #CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:14:47'!
ERROR!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 15:15:10' prior: 50629079!
test09CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsName withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsName.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout cardNameIsTooLongErrorDescription].! !

!testRun: #CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:15:12'!
FAILURE!
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/12/2023 15:16:44' prior: 50628920!
validateCard

	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	creditCard has16DigitNumber ifFalse: [self error: self class canNotCheckoutWithCardWithInvalidNumberOfDigits].
	creditCard isExpired ifTrue: [self error: self class canNotCheckoutWithExpiredCard].
	creditCard name size > 30 ifTrue: [self error: self class cardNameIsTooLongErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 15:16:49'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:16:49'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:16:49'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 15:16:50'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 15:16:50'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 15:16:50'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 15:16:50'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 15:16:50'!
PASSED!

!testRun: #CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:16:50'!
FAILURE!

!testRun: #CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:16:50'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LMR 6/12/2023 15:18:01'!
nameExceedsMaximumLength

	^name size > 30.! !
!Checkout methodsFor: 'checkout' stamp: 'LMR 6/12/2023 15:18:23' prior: 50629159!
validateCard

	creditCard hasEmptyName ifTrue: [self error: self class canNotCheckoutWithCardWithEmptyName].
	creditCard has16DigitNumber ifFalse: [self error: self class canNotCheckoutWithCardWithInvalidNumberOfDigits].
	creditCard isExpired ifTrue: [self error: self class canNotCheckoutWithExpiredCard].
	creditCard nameExceedsMaximumLength ifTrue: [self error: self class cardNameIsTooLongErrorDescription].! !

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 15:18:26'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!

!testRun: #CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:18:27'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 15:26:57'!
test08CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsName withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsName.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout cardNameIsTooLongErrorDescription].! !

!methodRemoval: CheckoutTest #test09CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:26:57'!
test09CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsName withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsName.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout cardNameIsTooLongErrorDescription].!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 15:27:05'!
test09CanNotCheckOutIfCardIsStolen

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aStolenCard withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aStolenCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor stolenCardErrorDescription].! !

!methodRemoval: CheckoutTest #test08CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 15:27:05'!
test08CanNotCheckOutIfCardIsStolen

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aStolenCard withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aStolenCard.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor stolenCardErrorDescription].!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 15:27:28'!
test07CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsName withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsName.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout cardNameIsTooLongErrorDescription].! !

!methodRemoval: CheckoutTest #test08CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:27:28'!
test08CanNotCheckoutIfCardNameLenghtExceeds30Characters

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithMoreThan30CharactersOnItsName withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithMoreThan30CharactersOnItsName.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: Checkout cardNameIsTooLongErrorDescription].!
!CheckoutTest methodsFor: 'tests' stamp: 'LMR 6/12/2023 15:27:32'!
test08CanNotCheckOutIfCardHasInsufficientFunds

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithInsufficientFunds withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].! !

!methodRemoval: CheckoutTest #test07CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 15:27:32'!
test07CanNotCheckOutIfCardHasInsufficientFunds

	| aCheckout |
	myCart add: 3 of: 'book1'.
	aCheckout := Checkout of: myCart withCard: aCardWithInsufficientFunds withPrices: myPriceList.
	self should: [myMockMerchantProcessor debit: aCheckout checkout fromCard: aCardWithInsufficientFunds.]
	raise: Error - MessageNotUnderstood
	withExceptionDo: [:anError | self assert: anError messageText equals: MockMerchantProcessor insufficientFundsErrorDescription].!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LMR 6/12/2023 15:31:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LMR 6/12/2023 15:31:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LMR 6/12/2023 15:31:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LMR 6/12/2023 15:31:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LMR 6/12/2023 15:31:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LMR 6/12/2023 15:31:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test01CanNotCheckoutEmptyCart stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test02CartWithOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test03CartWithMoreThanOneItemChecksoutCorrectly stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test04CanNotCheckoutWithCardWithEmptyName stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test05CanNotCheckoutWithCardWithInvalidNumberOfDigits stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test06CanNotCheckoutWithExpiredCard stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test07CanNotCheckoutIfCardNameLenghtExceeds30Characters stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test08CanNotCheckOutIfCardHasInsufficientFunds stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

!testRun: #CheckoutTest #test09CanNotCheckOutIfCardIsStolen stamp: 'LMR 6/12/2023 15:31:14'!
PASSED!

----SNAPSHOT----(12 June 2023 15:31:32) CuisUniversity-5832.image priorSource: 9510715!

----QUIT----(12 June 2023 15:31:35) CuisUniversity-5832.image priorSource: 9529750!